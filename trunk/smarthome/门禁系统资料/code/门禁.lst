__start:
__text_start:
    011D E5CF      LDI	R28,0x5F
    011E E0D4      LDI	R29,4
    011F BFCD      OUT	0x3D,R28
    0120 BFDE      OUT	0x3E,R29
    0121 51C0      SUBI	R28,0x10
    0122 40D0      SBCI	R29,0
    0123 EA0A      LDI	R16,0xAA
    0124 8308      STD	Y+0,R16
    0125 2400      CLR	R0
    0126 E3ED      LDI	R30,0x3D
    0127 E0F1      LDI	R31,1
    0128 E011      LDI	R17,1
    0129 36E8      CPI	R30,0x68
    012A 07F1      CPC	R31,R17
    012B F011      BEQ	0x012E
    012C 9201      ST	R0,Z+
    012D CFFB      RJMP	0x0129
    012E 8300      STD	Z+0,R16
    012F E5ED      LDI	R30,0x5D
    0130 E0F1      LDI	R31,1
    0131 E6A0      LDI	R26,0x60
    0132 E0B0      LDI	R27,0
    0133 E012      LDI	R17,2
    0134 33EA      CPI	R30,0x3A
    0135 07F1      CPC	R31,R17
    0136 F021      BEQ	0x013B
    0137 95C8      LPM
    0138 9631      ADIW	R30,1
    0139 920D      ST	R0,X+
    013A CFF9      RJMP	0x0134
    013B D00E      RCALL	_main
_exit:
    013C CFFF      RJMP	_exit
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\uart.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "uart.h"
(0005) 
(0006) //uart0 init. for printf.
(0007) void uart0_init(void)
(0008) {
(0009)     UCSRB = 0x00;                //禁止UART发送和接收
_uart0_init:
    013D 2422      CLR	R2
    013E B82A      OUT	0x0A,R2
(0010)     UCSRA = 0x02;               //倍速
    013F E082      LDI	R24,2
    0140 B98B      OUT	0x0B,R24
(0011)     UCSRC = 0x06;                //8位数据
    0141 E086      LDI	R24,6
    0142 BD80      OUT	0x20,R24
(0012)     UBRRL = 0x67;                 //9600bps
    0143 E687      LDI	R24,0x67
    0144 B989      OUT	0x09,R24
(0013)     UBRRH = 0x00;
    0145 BC20      OUT	0x20,R2
(0014)     UCSRB = 0x18;
    0146 E188      LDI	R24,0x18
    0147 B98A      OUT	0x0A,R24
    0148 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\init.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) void port_init(void)
(0005) {
_port_init:
    0149 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\main.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) 
(0005) #include<iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include "init.h"
(0009) #include "uart.h"
(0010) #include "wg26.h"
(0011) #include "util.h"
(0012) #include "tips.h"
(0013) #include "timer.h"
(0014) 
(0015) int main(void)
(0016) {
(0017)     port_init();
_main:
    014A DFFE      RCALL	_port_init
(0018)     uart0_init();
    014B DFF1      RCALL	_uart0_init
(0019)     init_interrupt();
    014C D00E      RCALL	_init_interrupt
(0020)     tips_port_init();
    014D D0D5      RCALL	_tips_port_init
(0021)     timer_init();
    014E D2AF      RCALL	_timer_init
(0022)     printf("running...");
    014F E600      LDI	R16,0x60
    0150 E010      LDI	R17,0
    0151 940E0798  CALL	_printf
    0153 C003      RJMP	0x0157
(0023)     while(1)
(0024)     {
(0025)         delay_ms(200);
    0154 EC08      LDI	R16,0xC8
    0155 E010      LDI	R17,0
    0156 D0B9      RCALL	_delay_ms
    0157 CFFC      RJMP	0x0154
(0026)     }
(0027)     return 0;
    0158 2700      CLR	R16
    0159 2711      CLR	R17
    015A 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\wg26.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "password.h"
(0004) #include "timer.h"
(0005) 
(0006) //pd2 input wg26 d0, pd3 input wg26 pd3.
(0007) //wg26 d0 is 0, d1 is 1.
(0008) void init_interrupt(void)
(0009) {
(0010)     //pd2,pd3 input mode.
(0011)     DDRD &= 0xf3;
_init_interrupt:
    015B B381      IN	R24,0x11
    015C 7F83      ANDI	R24,0xF3
    015D BB81      OUT	0x11,R24
(0012)     //上拉。
(0013)     PORTD |= 0x0c;
    015E B382      IN	R24,0x12
    015F 608C      ORI	R24,0xC
    0160 BB82      OUT	0x12,R24
(0014)     //enable interrupt.
(0015)     SREG |= 0x80;
    0161 9478      BSET	7
(0016)     //int1 int0 enable.
(0017)     GICR |= 0xc0;
    0162 B78B      IN	R24,0x3B
    0163 6C80      ORI	R24,0xC0
    0164 BF8B      OUT	0x3B,R24
(0018)     //int1 int0 fall edge.
(0019)     MCUCR |= 0x0a;
    0165 B785      IN	R24,0x35
    0166 608A      ORI	R24,0xA
    0167 BF85      OUT	0x35,R24
(0020)     return;
    0168 9508      RET
(0021) }
(0022) //diable reader.
(0023) static void disable_reader(void)
(0024) {
(0025)     GICR &= 0x3f;
_disable_reader:
    0169 B78B      IN	R24,0x3B
    016A 738F      ANDI	R24,0x3F
    016B BF8B      OUT	0x3B,R24
(0026)     return;
    016C 9508      RET
(0027) }
(0028) //enable reader.
(0029) static void enable_reader(void)
(0030) {
(0031)     GICR |= 0xc0;
_enable_reader:
    016D B78B      IN	R24,0x3B
    016E 6C80      ORI	R24,0xC0
    016F BF8B      OUT	0x3B,R24
(0032)     return;
    0170 9508      RET
_id_reader_check:
  id_code              --> Y+0
    0171 D47C      RCALL	push_arg4
(0033) }
(0034) 
(0035) //id card id.
(0036) static unsigned long id_code = 0;
(0037) //read flags.
(0038) static unsigned int id_reader_flags = 0;
(0039) //read count.
(0040) static char read_count = 0;
(0041) //define reader flags.
(0042) #define IDREADERFLAG_WAITING 0x0000
(0043) #define IDREADERFLAG_READING 0x0001
(0044) #define IDREADERFLAG_READED 0x0002
(0045) //id code check.
(0046) static char id_reader_check(unsigned long id_code)
(0047) {
(0048)     return 0;
    0172 2700      CLR	R16
    0173 9624      ADIW	R28,4
    0174 9508      RET
_read_time_out:
  timer                --> R10
    0175 D4E8      RCALL	push_gset3
    0176 2EA0      MOV	R10,R16
    0177 9722      SBIW	R28,2
(0049) }
(0050) 
(0051) //read timeout.
(0052) static void read_time_out(char timer)
(0053) {
(0054)     if(timer == IDREADERTIMEOUTTIMER)
    0178 20AA      TST	R10
    0179 F009      BEQ	0x017B
    017A C03A      RJMP	0x01B5
(0055)     {
(0056)         //disable reader.
(0057)         disable_reader();
    017B DFED      RCALL	_disable_reader
(0058)         id_reader_flags = IDREADERFLAG_READED;
    017C E082      LDI	R24,2
    017D 940E0883  CALL	0x883
(0059)         //read ok.
(0060)         if(read_count>5) //id card.
    017F E085      LDI	R24,5
    0180 90200071  LDS	R2,read_count
    0182 1582      CP	R24,R2
    0183 F508      BCC	0x01A5
(0061)         {
(0062)             if(!id_reader_check(id_code))
    0184 9120006D  LDS	R18,id_code+2
    0186 9130006E  LDS	R19,id_code+3
    0188 9100006B  LDS	R16,id_code
    018A 9110006C  LDS	R17,id_code+1
    018C DFE4      RCALL	_id_reader_check
    018D 2300      TST	R16
    018E F4E9      BNE	0x01AC
(0063)             {
(0064)                 id_code &= 0x01fffffe;
    018F EF4E      LDI	R20,0xFE
    0190 EF5F      LDI	R21,0xFF
    0191 EF6F      LDI	R22,0xFF
    0192 E071      LDI	R23,1
    0193 940E07FA  CALL	0x7FA
    0195 940E08BC  CALL	0x8BC
    0197 940E07D7  CALL	0x7D7
(0065)                 id_code >>= 1;
    0199 9456      LSR	R5
    019A 9447      ROR	R4
    019B 9437      ROR	R3
    019C 9427      ROR	R2
    019D 940E07D7  CALL	0x7D7
(0066)                 password_handle(IDREADEDIDCARD, id_code);
    019F 8248      STD	Y+0,R4
    01A0 8259      STD	Y+1,R5
    01A1 0191      MOVW	R18,R2
    01A2 2700      CLR	R16
    01A3 D123      RCALL	_password_handle
(0067)             }
(0068)         }
    01A4 C007      RJMP	0x01AC
(0069)         else //keypad input.
(0070)             password_handle(IDREADEDKEYPAD, id_code);
    01A5 940E07FA  CALL	0x7FA
    01A7 8248      STD	Y+0,R4
    01A8 8259      STD	Y+1,R5
    01A9 0191      MOVW	R18,R2
    01AA E001      LDI	R16,1
    01AB D11B      RCALL	_password_handle
(0071)         //enable reader.
(0072)         enable_reader();
    01AC DFC0      RCALL	_enable_reader
(0073)         id_reader_flags = IDREADERFLAG_WAITING;
    01AD 2422      CLR	R2
    01AE 2433      CLR	R3
    01AF 92300070  STS	id_reader_flags+1,R3
    01B1 9220006F  STS	id_reader_flags,R2
(0074) 		read_count = 0;
    01B3 92200071  STS	read_count,R2
(0075)     }
(0076)     return;
    01B5 9622      ADIW	R28,2
    01B6 D49D      RCALL	pop_gset3
    01B7 9508      RET
_set_id_reading_status:
    01B8 D4A7      RCALL	push_gset2
    01B9 9722      SBIW	R28,2
(0077) }
(0078) //set status.
(0079) static void set_id_reading_status(void)
(0080) {
(0081)     if(id_reader_flags!=IDREADERFLAG_READING)
    01BA 9180006F  LDS	R24,id_reader_flags
    01BC 91900070  LDS	R25,id_reader_flags+1
    01BE 3081      CPI	R24,1
    01BF E0E0      LDI	R30,0
    01C0 079E      CPC	R25,R30
    01C1 F0A9      BEQ	0x01D7
(0082)     {
(0083)         id_reader_flags = IDREADERFLAG_READING;
    01C2 E081      LDI	R24,1
    01C3 940E0883  CALL	0x883
    01C5 940E0836  CALL	0x836
(0084)         id_code = 0;
    01C7 9350006C  STS	id_code+1,R21
    01C9 9340006B  STS	id_code,R20
    01CB 9370006E  STS	id_code+3,R23
    01CD 9360006D  STS	id_code+2,R22
(0085)         //1*200ms.
(0086)         set_timer(IDREADERTIMEOUTTIMER, 1, read_time_out);
    01CF E584      LDI	R24,0x54
    01D0 E090      LDI	R25,0
    01D1 8399      STD	Y+1,R25
    01D2 8388      STD	Y+0,R24
    01D3 E021      LDI	R18,1
    01D4 E030      LDI	R19,0
    01D5 2700      CLR	R16
    01D6 D236      RCALL	_set_timer
(0087)     }
(0088)     return;
    01D7 9622      ADIW	R28,2
    01D8 D479      RCALL	pop_gset2
    01D9 9508      RET
_int0_isr:
    01DA D4CC      RCALL	push_lset
    01DB D484      RCALL	push_gset2
(0089) }
(0090) //pull id card id and keypad input.
(0091) #pragma interrupt_handler int0_isr:2
(0092) void int0_isr(void)
(0093) {
(0094)     set_id_reading_status();
    01DC DFDB      RCALL	_set_id_reading_status
(0095)     if(!(PIND&0x08))
    01DD 9983      SBIC	0x10,3
    01DE C00D      RJMP	0x01EC
    01DF 940E07B1  CALL	<created procedures>
    01E1 940E083B  CALL	0x83B
(0096)     {
(0097)         id_code <<= 1;
(0098)         id_code |= 1;
    01E3 2A24      OR	R2,R20
    01E4 2A35      OR	R3,R21
    01E5 2A46      OR	R4,R22
    01E6 2A57      OR	R5,R23
    01E7 940E07D7  CALL	0x7D7
    01E9 940E085F  CALL	0x85F
(0099)         ++read_count;
(0100)     }
    01EB C006      RJMP	0x01F2
(0101)     else if(!(PIND&0x04))
    01EC 9982      SBIC	0x10,2
    01ED C004      RJMP	0x01F2
    01EE 940E07B1  CALL	<created procedures>
    01F0 940E085F  CALL	0x85F
(0102)     {
(0103)         id_code <<= 1;
(0104)         ++read_count;
(0105)     }
(0106)     return;
    01F2 D45F      RCALL	pop_gset2
    01F3 D4C6      RCALL	pop_lset
    01F4 9518      RETI
_int1_isr:
    01F5 D4B1      RCALL	push_lset
    01F6 D469      RCALL	push_gset2
(0107) }
(0108) #pragma interrupt_handler int1_isr:3
(0109) void int1_isr(void)
(0110) {
(0111)     set_id_reading_status();
    01F7 DFC0      RCALL	_set_id_reading_status
(0112)     if(!(PIND&0x08))
    01F8 9983      SBIC	0x10,3
    01F9 C00D      RJMP	0x0207
    01FA 940E07B1  CALL	<created procedures>
    01FC 940E083B  CALL	0x83B
(0113)     {
(0114)         id_code <<= 1;
(0115)         id_code |= 1;
    01FE 2A24      OR	R2,R20
    01FF 2A35      OR	R3,R21
    0200 2A46      OR	R4,R22
    0201 2A57      OR	R5,R23
    0202 940E07D7  CALL	0x7D7
    0204 940E085F  CALL	0x85F
(0116)         ++read_count;
(0117)     }
    0206 C006      RJMP	0x020D
(0118)     else if(!(PIND&0x04))
    0207 9982      SBIC	0x10,2
    0208 C004      RJMP	0x020D
    0209 940E07B1  CALL	<created procedures>
    020B 940E085F  CALL	0x85F
(0119)     {
(0120)         id_code <<= 1;
(0121)         ++read_count;
(0122)     }
(0123)     return;
    020D D444      RCALL	pop_gset2
    020E D4AB      RCALL	pop_lset
    020F 9518      RETI
_delay_ms:
  i                    --> R20
  j                    --> R22
  ms                   --> R16
    0210 D44F      RCALL	push_gset2
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\util.c
(0001) #include <stdio.h>
(0002) #include <string.h>
(0003) #include <stdlib.h>
(0004) 
(0005) #include "util.h"
(0006) 
(0007) void delay_ms(int ms)
(0008) {
(0009)     int i,j;
(0010)     for(i=0;i<ms;i++)
    0211 2744      CLR	R20
    0212 2755      CLR	R21
    0213 C00A      RJMP	0x021E
(0011)     {
(0012)         for(j=0;j<1140;j++)
    0214 2766      CLR	R22
    0215 2777      CLR	R23
    0216 5F6F      SUBI	R22,0xFF
    0217 4F7F      SBCI	R23,0xFF
    0218 3764      CPI	R22,0x74
    0219 E0E4      LDI	R30,4
    021A 077E      CPC	R23,R30
    021B F3D4      BLT	0x0216
    021C 5F4F      SUBI	R20,0xFF
    021D 4F5F      SBCI	R21,0xFF
    021E 1740      CP	R20,R16
    021F 0751      CPC	R21,R17
    0220 F39C      BLT	0x0214
    0221 D430      RCALL	pop_gset2
    0222 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\tips.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "tips.h"
(0005) #include "util.h"
(0006) 
(0007) #define BEEP_ON (PORTD&=0xef)
(0008) #define BEEP_OFF (PORTD|=0x10)
(0009) #define LED_ON (PORTD&=0xdf)
(0010) #define LED_OFF (PORTD|=0x20)
(0011) 
(0012) //pd4 beep,pd5 led.
(0013) void tips_port_init(void)
(0014) {
(0015)     //PIND4 & PIND5 OUTPUT AND pull-up resistors.
(0016)     PORTD |= 0x30;
_tips_port_init:
    0223 B382      IN	R24,0x12
    0224 6380      ORI	R24,0x30
    0225 BB82      OUT	0x12,R24
(0017)     DDRD |= 0x30;
    0226 B381      IN	R24,0x11
    0227 6380      ORI	R24,0x30
    0228 BB81      OUT	0x11,R24
(0018)     return;
    0229 9508      RET
(0019) }
(0020) //led on.
(0021) void tips_led_on(void)
(0022) {
(0023)     LED_ON;
_tips_led_on:
    022A B382      IN	R24,0x12
    022B 7D8F      ANDI	R24,0xDF
    022C BB82      OUT	0x12,R24
(0024)     return;
    022D 9508      RET
(0025) }
(0026) //led off.
(0027) void tips_led_off(void)
(0028) {
(0029)     LED_OFF;
_tips_led_off:
    022E 9A95      SBI	0x12,5
(0030)     return;
    022F 9508      RET
(0031) }
(0032) //beep on.
(0033) void tips_beep_on(void)
(0034) {
(0035)     BEEP_ON;
_tips_beep_on:
    0230 B382      IN	R24,0x12
    0231 7E8F      ANDI	R24,0xEF
    0232 BB82      OUT	0x12,R24
(0036)     return;
    0233 9508      RET
(0037) }
(0038) //beep off.
(0039) void tips_beep_off(void)
(0040) {
(0041)     BEEP_OFF;
_tips_beep_off:
    0234 9A94      SBI	0x12,4
(0042)     return;
    0235 9508      RET
(0043) }
(0044) //__------__ 6 pices.pice per 0.4 seconds.
(0045) void tips_ok(void)
(0046) {
(0047)     LED_ON;
_tips_ok:
    0236 B382      IN	R24,0x12
    0237 7D8F      ANDI	R24,0xDF
    0238 BB82      OUT	0x12,R24
(0048)     BEEP_ON;
    0239 B382      IN	R24,0x12
    023A 7E8F      ANDI	R24,0xEF
    023B BB82      OUT	0x12,R24
(0049)     //2.4 seconds.
(0050)     delay_ms(400);
    023C E900      LDI	R16,0x90
    023D E011      LDI	R17,1
    023E DFD1      RCALL	_delay_ms
(0051)     LED_OFF;
    023F 9A95      SBI	0x12,5
(0052)     BEEP_OFF;
    0240 9A94      SBI	0x12,4
(0053)     return;
    0241 9508      RET
(0054) }
(0055) //_-_-___-_-_
(0056) void tips_err(void)
(0057) {
(0058)     BEEP_ON;
_tips_err:
    0242 940E082A  CALL	0x82A
(0059)     delay_ms(100);
    0244 DFCB      RCALL	_delay_ms
(0060)     BEEP_OFF;
    0245 9A94      SBI	0x12,4
(0061)     delay_ms(100);
    0246 E604      LDI	R16,0x64
    0247 E010      LDI	R17,0
    0248 DFC7      RCALL	_delay_ms
    0249 940E082A  CALL	0x82A
(0062)     BEEP_ON;
(0063)     delay_ms(100);
    024B DFC4      RCALL	_delay_ms
(0064)     BEEP_OFF;
    024C 9A94      SBI	0x12,4
(0065)  
(0066)     delay_ms(200);
    024D EC08      LDI	R16,0xC8
    024E E010      LDI	R17,0
    024F DFC0      RCALL	_delay_ms
    0250 940E082A  CALL	0x82A
(0067)  
(0068)     BEEP_ON;
(0069)     delay_ms(100);
    0252 DFBD      RCALL	_delay_ms
(0070)     BEEP_OFF;
    0253 9A94      SBI	0x12,4
(0071)     delay_ms(100);
    0254 E604      LDI	R16,0x64
    0255 E010      LDI	R17,0
    0256 DFB9      RCALL	_delay_ms
    0257 940E082A  CALL	0x82A
(0072)     BEEP_ON;
(0073)     delay_ms(100);
    0259 DFB6      RCALL	_delay_ms
(0074)     BEEP_OFF;
    025A 9A94      SBI	0x12,4
(0075)     return;
    025B 9508      RET
(0076) }
(0077) //_----_-_-_
(0078) void tips_id_ok(void)
(0079) {
(0080)     BEEP_ON;
_tips_id_ok:
    025C B382      IN	R24,0x12
    025D 7E8F      ANDI	R24,0xEF
    025E BB82      OUT	0x12,R24
(0081)     delay_ms(200);
    025F EC08      LDI	R16,0xC8
    0260 E010      LDI	R17,0
    0261 DFAE      RCALL	_delay_ms
(0082)     BEEP_OFF;
    0262 9A94      SBI	0x12,4
(0083)     delay_ms(200);
    0263 EC08      LDI	R16,0xC8
    0264 E010      LDI	R17,0
    0265 DFAA      RCALL	_delay_ms
    0266 940E082A  CALL	0x82A
(0084) 
(0085)     BEEP_ON;
(0086)     delay_ms(100);
    0268 DFA7      RCALL	_delay_ms
(0087)     BEEP_OFF;
    0269 9A94      SBI	0x12,4
(0088)     delay_ms(100);
    026A E604      LDI	R16,0x64
    026B E010      LDI	R17,0
    026C DFA3      RCALL	_delay_ms
    026D 940E082A  CALL	0x82A
(0089)     BEEP_ON;
(0090)     delay_ms(100);
    026F DFA0      RCALL	_delay_ms
(0091)     BEEP_OFF;
    0270 9A94      SBI	0x12,4
(0092)     return;
    0271 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\password.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) 
(0004) #include<iom16v.h>
(0005) #include <macros.h>
(0006) 
(0007) #include "log.h"
(0008) #include "locker.h"
(0009) #include "tips.h"
(0010) #include "timer.h"
(0011) #include "password.h"
(0012) 
(0013) 
(0014) unsigned char readPasswordItemNum(void)
(0015) {
(0016) 
(0017)     return 1;
_readPasswordItemNum:
    0272 E001      LDI	R16,1
    0273 9508      RET
_readPasswordItem:
  item                 --> Y+0
  index                --> R12
    0274 D3E7      RCALL	push_gset4
    0275 2EC2      MOV	R12,R18
    0276 0158      MOVW	R10,R16
    0277 972D      SBIW	R28,0xD
(0018) }
(0019) passwordItem_t readPasswordItem(unsigned char index)
(0020) {
(0021)     passwordItem_t item;
(0022) 	item.flags = PASSWORDFLAGS_PASSWORD|PASSWORDFLAGS_ID;
    0278 E083      LDI	R24,3
    0279 8388      STD	Y+0,R24
(0023) 	item.idCard = 1392618;
    027A EE4A      LDI	R20,0xEA
    027B E35F      LDI	R21,0x3F
    027C E165      LDI	R22,0x15
    027D E070      LDI	R23,0
    027E 01FE      MOVW	R30,R28
    027F 8341      STD	Z+1,R20
    0280 8352      STD	Z+2,R21
    0281 8363      STD	Z+3,R22
    0282 8374      STD	Z+4,R23
    0283 940E083B  CALL	0x83B
(0024) 	item.passwordH = 1;
    0285 01FE      MOVW	R30,R28
    0286 8345      STD	Z+5,R20
    0287 8356      STD	Z+6,R21
    0288 8367      STD	Z+7,R22
    0289 8770      STD	Z+8,R23
(0025) 	item.passwordL = 1007;
    028A EE4F      LDI	R20,0xEF
    028B E053      LDI	R21,3
    028C E060      LDI	R22,0
    028D E070      LDI	R23,0
    028E 01FE      MOVW	R30,R28
    028F 8741      STD	Z+9,R20
    0290 8752      STD	Z+10,R21
    0291 8763      STD	Z+11,R22
    0292 8774      STD	Z+12,R23
(0026)     return item;
    0293 01CE      MOVW	R24,R28
    0294 E00D      LDI	R16,0xD
    0295 E010      LDI	R17,0
    0296 92BA      ST	R11,-Y
    0297 92AA      ST	R10,-Y
    0298 939A      ST	R25,-Y
    0299 938A      ST	R24,-Y
    029A D436      RCALL	asgnblk
    029B 962D      ADIW	R28,0xD
    029C D3B9      RCALL	pop_gset4
    029D 9508      RET
(0027) }
(0028) unsigned char insertPasswordItem(passwordItem_t item)
(0029) {
(0030)     return 0;
_insertPasswordItem:
  item                 --> R16
    029E 2700      CLR	R16
    029F 9508      RET
(0031) }
(0032) //maybe change the index.
(0033) void deletePasswordItem(unsigned char index)
(0034) {
(0035)     return;
_deletePasswordItem:
  index                --> Y+0
    02A0 9508      RET
_clear_pswd_status:
    02A1 D3BE      RCALL	push_gset2
    02A2 940E083B  CALL	0x83B
(0036) }
(0037) 
(0038) #define PASSWORDREADIDCARDUNKOWN    0
(0039) #define PASSWORDREADIDCARDOK                1
(0040) #define PASSWORDREADIDANDPSWDOK         2
(0041) 
(0042) static unsigned char password_read_flags = 0;
(0043) static unsigned char current_index = 0;
(0044) static unsigned char input_err_count = 0;
(0045) 
(0046) //You input xxx then password is 1xxx.
(0047) static unsigned long passwordH = 1;
(0048) static unsigned long passwordL = 1;
(0049) 
(0050) static void clear_pswd_status(void)
(0051) {
(0052)     //clear last password input.
(0053) 	passwordH = 1;
    02A4 93500076  STS	passwordH+1,R21
    02A6 93400075  STS	passwordH,R20
    02A8 93700078  STS	passwordH+3,R23
    02AA 93600077  STS	passwordH+2,R22
    02AC 940E083B  CALL	0x83B
    02AE 940E0865  CALL	0x865
(0054)     passwordL = 1;
(0055)     tips_led_off();
    02B0 DF7D      RCALL	_tips_led_off
(0056)     password_read_flags = PASSWORDREADIDCARDUNKOWN;
    02B1 2422      CLR	R2
    02B2 92200072  STS	password_read_flags,R2
(0057)     current_index = 0;
    02B4 92200073  STS	current_index,R2
(0058)     stop_timer(PASSWORDTIMEOUTTIMER);
    02B6 E001      LDI	R16,1
    02B7 D175      RCALL	_stop_timer
(0059)     return;
    02B8 D399      RCALL	pop_gset2
    02B9 9508      RET
(0060) }
(0061) 
(0062) //cannot input timeout.
(0063) static void cannot_input_time_out(char timer)
(0064) {
(0065)     if(timer==PASSWORDTIMEOUTTIMER)
_cannot_input_time_out:
  timer                --> R16
    02BA 3001      CPI	R16,1
    02BB F419      BNE	0x02BF
(0066)         input_err_count = 0;
    02BC 2422      CLR	R2
    02BD 92200074  STS	input_err_count,R2
(0067)     return;
    02BF 9508      RET
_input_time_out:
  timer                --> R20
    02C0 D3A1      RCALL	push_gset1
    02C1 2F40      MOV	R20,R16
(0068) }
(0069) 
(0070) //input timeout.
(0071) static void input_time_out(char timer)
(0072) {
(0073)     if(timer==PASSWORDTIMEOUTTIMER)
    02C2 3041      CPI	R20,1
    02C3 F409      BNE	0x02C5
(0074)         clear_pswd_status();
    02C4 DFDC      RCALL	_clear_pswd_status
(0075)     return;
    02C5 D39F      RCALL	pop_gset1
    02C6 9508      RET
_password_handle:
  current_item         --> Y+25
  pswd_item_num        --> R10
  i                    --> R12
  item                 --> Y+12
  code                 --> Y+48
  type                 --> R14
    02C7 933A      ST	R19,-Y
    02C8 932A      ST	R18,-Y
    02C9 D390      RCALL	push_gset5
    02CA 2EE0      MOV	R14,R16
    02CB 97A6      SBIW	R28,0x26
(0076) }
(0077) 
(0078) void password_handle(char type, unsigned long code)
(0079) {
(0080)     unsigned char pswd_item_num = 0;
    02CC 24AA      CLR	R10
(0081)     unsigned char i;
(0082)     passwordItem_t item;
(0083) 
(0084)     //if input error count is too large.
(0085)     if(input_err_count>5)
    02CD E085      LDI	R24,5
    02CE 90200074  LDS	R2,input_err_count
    02D0 1582      CP	R24,R2
    02D1 F458      BCC	0x02DD
(0086)     {
(0087)         clear_pswd_status();
    02D2 DFCE      RCALL	_clear_pswd_status
(0088)         tips_err();
    02D3 DF6E      RCALL	_tips_err
(0089)         //set time out. 200ms*5*60
(0090)         set_timer(PASSWORDTIMEOUTTIMER, 300, cannot_input_time_out);
    02D4 E588      LDI	R24,0x58
    02D5 E090      LDI	R25,0
    02D6 8399      STD	Y+1,R25
    02D7 8388      STD	Y+0,R24
    02D8 E22C      LDI	R18,0x2C
    02D9 E031      LDI	R19,1
    02DA E001      LDI	R16,1
    02DB D131      RCALL	_set_timer
(0091)         return;
    02DC C11D      RJMP	0x03FA
(0092)     }
(0093)  
(0094)     //read a card.
(0095)     if(type==IDREADEDIDCARD)
    02DD 20EE      TST	R14
    02DE F009      BEQ	0x02E0
    02DF C041      RJMP	0x0321
(0096)     {
(0097)         clear_pswd_status();
    02E0 DFC0      RCALL	_clear_pswd_status
(0098)         //read paswd item num.
(0099)         pswd_item_num = readPasswordItemNum();
    02E1 DF90      RCALL	_readPasswordItemNum
    02E2 2EA0      MOV	R10,R16
(0100)         //loop find it.
(0101)         for(i=0;i<pswd_item_num;++i)
    02E3 24CC      CLR	R12
    02E4 C02F      RJMP	0x0314
(0102)         {
(0103)             //read a item.
(0104)             item = readPasswordItem(i);
    02E5 940E08AD  CALL	0x8AD
    02E7 DF8C      RCALL	_readPasswordItem
(0105)             //if item need id card, and is this id card.
(0106)             if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
    02E8 842C      LDD	R2,Y+12
    02E9 FE20      SBRS	R2,0
    02EA C028      RJMP	0x0313
    02EB 940E0830  CALL	0x830
    02ED 01FE      MOVW	R30,R28
    02EE 8465      LDD	R6,Z+13
    02EF 8476      LDD	R7,Z+14
    02F0 8487      LDD	R8,Z+15
    02F1 8890      LDD	R9,Z+16
    02F2 940E0854  CALL	0x854
    02F4 F009      BEQ	0x02F6
    02F5 C01D      RJMP	0x0313
(0107)             {
(0108)                 //need paswd.
(0109)                 if(item.flags&PASSWORDFLAGS_PASSWORD)
    02F6 842C      LDD	R2,Y+12
    02F7 FE21      SBRS	R2,1
    02F8 C00E      RJMP	0x0307
(0110)                 {
(0111)                     //id card ok, but need password.
(0112)                     tips_id_ok();
    02F9 DF62      RCALL	_tips_id_ok
(0113)                     //id card ok, but not input password, led on.
(0114)                     tips_led_on();
    02FA DF2F      RCALL	_tips_led_on
(0115)                     current_index = i;
    02FB 92C00073  STS	current_index,R12
(0116)                     password_read_flags = PASSWORDREADIDCARDOK;
    02FD E081      LDI	R24,1
    02FE 93800072  STS	password_read_flags,R24
    0300 940E08DA  CALL	0x8DA
(0117)                     //set time out. 200ms*5*30
(0118)                     set_timer(PASSWORDTIMEOUTTIMER, 150, input_time_out);
    0302 E926      LDI	R18,0x96
    0303 E030      LDI	R19,0
    0304 E001      LDI	R16,1
    0305 D107      RCALL	_set_timer
(0119)                 }
    0306 C0F3      RJMP	0x03FA
(0120)                 else //only id card.
(0121)                 {
(0122)                     //record log
(0123)                     log(LOGTYPEIDOK, i, code, 0, 0);
    0307 940E07E0  CALL	0x7E0
    0309 2D2C      MOV	R18,R12
    030A E001      LDI	R16,1
    030B D194      RCALL	_log
(0124)                     //clear pswd statuc.
(0125)                     clear_pswd_status();
    030C DF94      RCALL	_clear_pswd_status
(0126)                     tips_ok();
    030D DF28      RCALL	_tips_ok
(0127)                     locker_unlock();
    030E D193      RCALL	_locker_unlock
(0128)                     //error count clear.
(0129)                     input_err_count = 0;
    030F 2422      CLR	R2
    0310 92200074  STS	input_err_count,R2
(0130)                 } //else
(0131)                 return;
    0312 C0E7      RJMP	0x03FA
    0313 94C3      INC	R12
    0314 14CA      CP	R12,R10
    0315 F408      BCC	0x0317
    0316 CFCE      RJMP	0x02E5
(0132)             }  //if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
(0133)         }	  //for(i=0;i<pswd_item_num;++i)
(0134)         //unkown id card.
(0135)         log(LOGTYPEIDERR, 0, code, 0, 0);
    0317 940E07E0  CALL	0x7E0
    0319 2722      CLR	R18
    031A E002      LDI	R16,2
    031B D184      RCALL	_log
(0136)         //clear password.
(0137)         clear_pswd_status();
    031C DF84      RCALL	_clear_pswd_status
(0138)         //error password and log.
(0139)         tips_err();
    031D DF24      RCALL	_tips_err
    031E 940E086E  CALL	0x86E
(0140)         //error count ++
(0141)         ++input_err_count;
(0142)         return;
    0320 C0D9      RJMP	0x03FA
(0143)     }	  //if(type==IDREADEDIDCARD)
(0144)     else if(type==IDREADEDKEYPAD) // read a keypad input.
    0321 2D8E      MOV	R24,R14
    0322 3081      CPI	R24,1
    0323 F009      BEQ	0x0325
    0324 C0D5      RJMP	0x03FA
(0145)     {
(0146)         code &= 0x0000000f;
    0325 E04F      LDI	R20,0xF
    0326 E050      LDI	R21,0
    0327 E060      LDI	R22,0
    0328 E070      LDI	R23,0
    0329 940E0830  CALL	0x830
    032B 940E08BC  CALL	0x8BC
    032D 01FE      MOVW	R30,R28
    032E AA20      STD	Z+48,R2
    032F AA31      STD	Z+49,R3
    0330 AA42      STD	Z+50,R4
    0331 AA53      STD	Z+51,R5
    0332 940E08D0  CALL	0x8D0
    0334 940E0830  CALL	0x830
    0336 940E0899  CALL	0x899
(0147)         if(code == 0x0000000a)  //*
    0338 F411      BNE	0x033B
(0148)         {
(0149)             //clear password.
(0150)             clear_pswd_status();
    0339 DF67      RCALL	_clear_pswd_status
(0151)         }
    033A C0BF      RJMP	0x03FA
(0152)         else if(code == 0x0000000b) //#
    033B E04B      LDI	R20,0xB
    033C E050      LDI	R21,0
    033D E060      LDI	R22,0
    033E E070      LDI	R23,0
    033F 940E0830  CALL	0x830
    0341 940E0899  CALL	0x899
    0343 F009      BEQ	0x0345
    0344 C07D      RJMP	0x03C2
(0153)         {
(0154)             //need id card password.
(0155)             if(password_read_flags==PASSWORDREADIDCARDOK)
    0345 91800072  LDS	R24,password_read_flags
    0347 3081      CPI	R24,1
    0348 F009      BEQ	0x034A
    0349 C035      RJMP	0x037F
(0156)             {
(0157)                 passwordItem_t current_item = readPasswordItem(current_index);
    034A 91200073  LDS	R18,current_index
    034C 018E      MOVW	R16,R28
    034D 5E07      SUBI	R16,0xE7
    034E 4F1F      SBCI	R17,0xFF
    034F DF24      RCALL	_readPasswordItem
    0350 940E0803  CALL	0x803
(0158)                 //password is ok.
(0159)                 if((current_item.passwordH==passwordH)&&(current_item.passwordL==passwordL))
    0352 01FE      MOVW	R30,R28
    0353 8C66      LDD	R6,Z+30
    0354 8C77      LDD	R7,Z+31
    0355 A080      LDD	R8,Z+32
    0356 A091      LDD	R9,Z+33
    0357 940E0854  CALL	0x854
    0359 F009      BEQ	0x035B
    035A C017      RJMP	0x0372
    035B 940E080C  CALL	0x80C
    035D 01FE      MOVW	R30,R28
    035E A062      LDD	R6,Z+34
    035F A073      LDD	R7,Z+35
    0360 A084      LDD	R8,Z+36
    0361 A095      LDD	R9,Z+37
    0362 940E0854  CALL	0x854
    0364 F469      BNE	0x0372
    0365 940E07C6  CALL	0x7C6
    0367 940E0840  CALL	0x840
(0160)                 {
(0161)                     log(LOGTYPEIDANDPSWDOK, current_index, current_item.idCard, passwordH, passwordL);
    0369 E003      LDI	R16,3
    036A D135      RCALL	_log
(0162)                     //clear password status.
(0163)                     clear_pswd_status();
    036B DF35      RCALL	_clear_pswd_status
(0164)                     //unlock and write log.
(0165)                     tips_ok();
    036C DEC9      RCALL	_tips_ok
(0166)                     locker_unlock();
    036D D134      RCALL	_locker_unlock
(0167)                     //error count clear.
(0168)                     input_err_count = 0;
    036E 2422      CLR	R2
    036F 92200074  STS	input_err_count,R2
(0169)                 }
    0371 C088      RJMP	0x03FA
(0170)                 else //password is error.
(0171)                 {
(0172)                     log(LOGTYPEIDANDPSWDERR, current_index, current_item.idCard, passwordH, passwordL);
    0372 940E080C  CALL	0x80C
    0374 940E07C6  CALL	0x7C6
    0376 940E0840  CALL	0x840
    0378 E004      LDI	R16,4
    0379 D126      RCALL	_log
(0173)                     //clear password.
(0174)                     clear_pswd_status();
    037A DF26      RCALL	_clear_pswd_status
(0175)                     //error password and log.
(0176)                     tips_err();
    037B DEC6      RCALL	_tips_err
    037C 940E086E  CALL	0x86E
(0177)                     //error count ++.
(0178)                     ++input_err_count;
(0179)                 }
(0180)             }
    037E C07B      RJMP	0x03FA
(0181)             else //only password.
(0182)             {
(0183)                 //read paswd item num.
(0184)                 pswd_item_num = readPasswordItemNum();
    037F DEF2      RCALL	_readPasswordItemNum
    0380 2EA0      MOV	R10,R16
(0185)                 //loop find it.
(0186)                 for(i=0;i<pswd_item_num;++i)
    0381 24CC      CLR	R12
    0382 C02C      RJMP	0x03AF
(0187)                 {
(0188)                     //read a item.
(0189)                     item = readPasswordItem(i);
    0383 940E08AD  CALL	0x8AD
    0385 DEEE      RCALL	_readPasswordItem
(0190)                     //if item need id card, and is this id card.
(0191)                     if((item.flags==PASSWORDFLAGS_PASSWORD)&&(item.passwordH==passwordH)
    0386 858C      LDD	R24,Y+12
    0387 3082      CPI	R24,2
    0388 F009      BEQ	0x038A
    0389 C024      RJMP	0x03AE
    038A 940E0803  CALL	0x803
    038C 01FE      MOVW	R30,R28
    038D 8861      LDD	R6,Z+17
    038E 8872      LDD	R7,Z+18
    038F 8883      LDD	R8,Z+19
    0390 8894      LDD	R9,Z+20
    0391 940E0854  CALL	0x854
    0393 F4D1      BNE	0x03AE
    0394 940E080C  CALL	0x80C
    0396 01FE      MOVW	R30,R28
    0397 8865      LDD	R6,Z+21
    0398 8876      LDD	R7,Z+22
    0399 8887      LDD	R8,Z+23
    039A 8C90      LDD	R9,Z+24
    039B 940E0854  CALL	0x854
    039D F481      BNE	0x03AE
    039E 940E07C6  CALL	0x7C6
    03A0 940E0836  CALL	0x836
    03A2 940E08C6  CALL	0x8C6
(0192) 						&&(item.passwordL==passwordL))
(0193)                     {
(0194)                         log(LOGTYPEPSWDOK, i, 0, passwordH, passwordL);
    03A4 2D2C      MOV	R18,R12
    03A5 E005      LDI	R16,5
    03A6 D0F9      RCALL	_log
(0195)                         //clear password.
(0196)                         clear_pswd_status();
    03A7 DEF9      RCALL	_clear_pswd_status
(0197)                         //password is right. unlock and log.
(0198)                         tips_ok();
    03A8 DE8D      RCALL	_tips_ok
(0199)                         locker_unlock();
    03A9 D0F8      RCALL	_locker_unlock
(0200)                         //error count clear.
(0201)                         input_err_count = 0;
    03AA 2422      CLR	R2
    03AB 92200074  STS	input_err_count,R2
(0202)                         return;
    03AD C04C      RJMP	0x03FA
    03AE 94C3      INC	R12
    03AF 14CA      CP	R12,R10
    03B0 F408      BCC	0x03B2
    03B1 CFD1      RJMP	0x0383
(0203)                     }
(0204)                 }
(0205)                 //password is error.
(0206)                 log(LOGTYPEPSWDERR, 0, 0, passwordH, passwordL);
    03B2 940E080C  CALL	0x80C
    03B4 940E07C6  CALL	0x7C6
    03B6 940E0836  CALL	0x836
    03B8 940E08C6  CALL	0x8C6
    03BA 2722      CLR	R18
    03BB E006      LDI	R16,6
    03BC D0E3      RCALL	_log
(0207)                 //clear password.
(0208)                 clear_pswd_status();
    03BD DEE3      RCALL	_clear_pswd_status
(0209)                 //password is error, and log.
(0210)                 tips_err();
    03BE DE83      RCALL	_tips_err
    03BF 940E086E  CALL	0x86E
(0211)                 //error count++.
(0212)                 ++input_err_count;
(0213)                 return;
    03C1 C038      RJMP	0x03FA
(0214)             }
(0215)         }
(0216)         else
(0217)         {
(0218)             tips_led_on();
    03C2 DE67      RCALL	_tips_led_on
    03C3 940E08DA  CALL	0x8DA
(0219)             //set time out. 200ms*5*30
(0220)             set_timer(PASSWORDTIMEOUTTIMER, 30000, input_time_out);
    03C5 E320      LDI	R18,0x30
    03C6 E735      LDI	R19,0x75
    03C7 E001      LDI	R16,1
    03C8 D044      RCALL	_set_timer
    03C9 940E080C  CALL	0x80C
    03CB 940E08D0  CALL	0x8D0
    03CD 940E08B2  CALL	0x8B2
(0221)             passwordL = passwordL*10 + code;
    03CF 018A      MOVW	R16,R20
    03D0 019B      MOVW	R18,R22
    03D1 D254      RCALL	empy32s
    03D2 0118      MOVW	R2,R16
    03D3 0129      MOVW	R4,R18
    03D4 01FE      MOVW	R30,R28
    03D5 A860      LDD	R6,Z+48
    03D6 A871      LDD	R7,Z+49
    03D7 A882      LDD	R8,Z+50
    03D8 A893      LDD	R9,Z+51
    03D9 0C26      ADD	R2,R6
    03DA 1C37      ADC	R3,R7
    03DB 1C48      ADC	R4,R8
    03DC 1C59      ADC	R5,R9
    03DD 9230007A  STS	passwordL+1,R3
    03DF 92200079  STS	passwordL,R2
    03E1 9250007C  STS	passwordL+3,R5
    03E3 9240007B  STS	passwordL+2,R4
(0222) 			//passwordH save password hight 9 num.
(0223) 			if(passwordL>999999999)
    03E5 EF4F      LDI	R20,0xFF
    03E6 EC59      LDI	R21,0xC9
    03E7 E96A      LDI	R22,0x9A
    03E8 E37B      LDI	R23,0x3B
    03E9 1542      CP	R20,R2
    03EA 0553      CPC	R21,R3
    03EB 0564      CPC	R22,R4
    03EC 0575      CPC	R23,R5
    03ED F460      BCC	0x03FA
(0224) 			{
(0225) 			 passwordH = passwordL;
    03EE 92300076  STS	passwordH+1,R3
    03F0 92200075  STS	passwordH,R2
    03F2 92500078  STS	passwordH+3,R5
    03F4 92400077  STS	passwordH+2,R4
    03F6 940E083B  CALL	0x83B
    03F8 940E0865  CALL	0x865
(0226) 			 passwordL = 1;
(0227) 			}
(0228) 		}
(0229)     }
(0230)     return;
    03FA 96A6      ADIW	R28,0x26
    03FB D25C      RCALL	pop_gset5
    03FC 9622      ADIW	R28,2
    03FD 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\timer.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) 
(0005) #include<iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include "timer.h"
(0009) 
(0010) void timer_init(void)
(0011) {
(0012)     //enable interrupt.
(0013)     SREG |= 0x80;
_timer_init:
    03FE 9478      BSET	7
(0014)     //timer0 normal mode.ck/1024.
(0015)     TCCR0 |= 0x05;
    03FF B783      IN	R24,0x33
    0400 6085      ORI	R24,5
    0401 BF83      OUT	0x33,R24
(0016)     //init TCNT0.
(0017)     TCNT0 = 0;
    0402 2422      CLR	R2
    0403 BE22      OUT	0x32,R2
(0018)     //TIMSK
(0019)     //TIMSK |= 0x01;
(0020)     return; 
    0404 9508      RET
(0021) }
(0022) //cpu timer0 start
(0023) static void t0_start(void)
(0024) {
(0025)     TIMSK |= 0x01;
_t0_start:
    0405 B789      IN	R24,0x39
    0406 6081      ORI	R24,1
    0407 BF89      OUT	0x39,R24
(0026)     return;
    0408 9508      RET
(0027) }
(0028) //cpu timer0 stop
(0029) static void t0_stop(void)
(0030) {
(0031)     TIMSK &= 0xfe;
_t0_stop:
    0409 B789      IN	R24,0x39
    040A 7F8E      ANDI	R24,0xFE
    040B BF89      OUT	0x39,R24
(0032)     return;
    040C 9508      RET
_set_timer:
  cb                   --> Y+4
  value                --> R22
  timer                --> R20
    040D D252      RCALL	push_gset2
    040E 01B9      MOVW	R22,R18
    040F 2F40      MOV	R20,R16
(0033) }
(0034) //
(0035) static timer_t g_timer[MAXTIMER];
(0036) //set timer and start timer. set value 0, need wait a cpu timer pice.
(0037) void set_timer(char timer, int value, timerCB cb)
(0038) {
(0039)     //value=0, stoped timer.
(0040)     g_timer[timer].value = value+1;
    0410 E084      LDI	R24,4
    0411 9F84      MUL	R24,R20
    0412 940E0824  CALL	0x824
    0414 01CB      MOVW	R24,R22
    0415 9601      ADIW	R24,1
    0416 8391      STD	Z+1,R25
    0417 8380      STD	Z+0,R24
(0041)     g_timer[timer].cb = cb;
    0418 E084      LDI	R24,4
    0419 9F84      MUL	R24,R20
    041A 940E0859  CALL	0x859
    041C 800C      LDD	R0,Y+4
    041D 801D      LDD	R1,Y+5
    041E 8211      STD	Z+1,R1
    041F 8200      STD	Z+0,R0
(0042)     if(g_timer[timer].value)
    0420 E084      LDI	R24,4
    0421 9F84      MUL	R24,R20
    0422 940E0824  CALL	0x824
    0424 8020      LDD	R2,Z+0
    0425 8031      LDD	R3,Z+1
    0426 2022      TST	R2
    0427 F411      BNE	0x042A
    0428 2033      TST	R3
    0429 F009      BEQ	0x042B
(0043)         t0_start();
    042A DFDA      RCALL	_t0_start
(0044)     return;
    042B D226      RCALL	pop_gset2
    042C 9508      RET
(0045) }
(0046) //stop timer and clean timer.
(0047) void stop_timer(char timer)
(0048) {
(0049)     if(g_timer[timer].value)
_stop_timer:
  timer                --> R16
    042D E084      LDI	R24,4
    042E 9F80      MUL	R24,R16
    042F 940E0824  CALL	0x824
    0431 8020      LDD	R2,Z+0
    0432 8031      LDD	R3,Z+1
    0433 2022      TST	R2
    0434 F411      BNE	0x0437
    0435 2033      TST	R3
    0436 F061      BEQ	0x0443
(0050)     {
(0051)         //stop this timer.
(0052)         g_timer[timer].value = 0;
    0437 E084      LDI	R24,4
    0438 9F80      MUL	R24,R16
    0439 940E0824  CALL	0x824
    043B 940E08CB  CALL	0x8CB
(0053)         g_timer[timer].cb = NULL;
    043D E084      LDI	R24,4
    043E 9F80      MUL	R24,R16
    043F 940E0859  CALL	0x859
    0441 8231      STD	Z+1,R3
    0442 8220      STD	Z+0,R2
(0054)     }
(0055)     return;
    0443 9508      RET
_timer0_isr:
  running_timer_count  --> R20
  i                    --> R22
    0444 D262      RCALL	push_lset
    0445 D21A      RCALL	push_gset2
(0056) }
(0057) //timer spank.
(0058) #pragma interrupt_handler timer0_isr:10
(0059) void timer0_isr(void)
(0060) {
(0061)     static char time_pices = 0;
(0062)     ++time_pices;
    0446 9180007D  LDS	R24,time_pices
    0448 5F8F      SUBI	R24,0xFF
    0449 9380007D  STS	time_pices,R24
(0063)     //200ms.
(0064)     if(time_pices == 5)
    044B 3085      CPI	R24,5
    044C F009      BEQ	0x044E
    044D C04F      RJMP	0x049D
(0065)     {
(0066)         char running_timer_count = 0;
    044E 2744      CLR	R20
(0067)         char i;
(0068)         for(i=0;i<MAXTIMER;i++)
    044F 2766      CLR	R22
    0450 C043      RJMP	0x0494
(0069)         {
(0070)             if(g_timer[i].value>1)
    0451 E084      LDI	R24,4
    0452 9F86      MUL	R24,R22
    0453 940E0824  CALL	0x824
    0455 8020      LDD	R2,Z+0
    0456 8031      LDD	R3,Z+1
    0457 E081      LDI	R24,1
    0458 E090      LDI	R25,0
    0459 1582      CP	R24,R2
    045A 0593      CPC	R25,R3
    045B F478      BCC	0x046B
(0071)             {
(0072)                 --g_timer[i].value;
    045C E084      LDI	R24,4
    045D 9F86      MUL	R24,R22
    045E 0110      MOVW	R2,R0
    045F E38D      LDI	R24,0x3D
    0460 E091      LDI	R25,1
    0461 0E28      ADD	R2,R24
    0462 1E39      ADC	R3,R25
    0463 01F1      MOVW	R30,R2
    0464 8180      LDD	R24,Z+0
    0465 8191      LDD	R25,Z+1
    0466 9701      SBIW	R24,1
    0467 8391      STD	Z+1,R25
    0468 8380      STD	Z+0,R24
(0073)                 ++running_timer_count;
    0469 9543      INC	R20
(0074)             }
    046A C028      RJMP	0x0493
(0075)             //timer call back.
(0076)             else if(g_timer[i].value==1)
    046B E084      LDI	R24,4
    046C 9F86      MUL	R24,R22
    046D 940E0824  CALL	0x824
    046F 8180      LDD	R24,Z+0
    0470 8191      LDD	R25,Z+1
    0471 3081      CPI	R24,1
    0472 E0E0      LDI	R30,0
    0473 079E      CPC	R25,R30
    0474 F4F1      BNE	0x0493
(0077)             {
(0078)                 if(g_timer[i].cb)
    0475 E084      LDI	R24,4
    0476 9F86      MUL	R24,R22
    0477 01F0      MOVW	R30,R0
    0478 E38F      LDI	R24,0x3F
    0479 E091      LDI	R25,1
    047A 0FE8      ADD	R30,R24
    047B 1FF9      ADC	R31,R25
    047C 8020      LDD	R2,Z+0
    047D 8031      LDD	R3,Z+1
    047E 2022      TST	R2
    047F F411      BNE	0x0482
    0480 2033      TST	R3
    0481 F059      BEQ	0x048D
(0079)                 {
(0080)                     //disable cpu timer.
(0081)                     t0_stop();
    0482 DF86      RCALL	_t0_stop
(0082)                     (g_timer[i].cb)(i);
    0483 2F06      MOV	R16,R22
    0484 E084      LDI	R24,4
    0485 9F86      MUL	R24,R22
    0486 940E0859  CALL	0x859
    0488 81A0      LDD	R26,Z+0
    0489 81B1      LDD	R27,Z+1
    048A 01FD      MOVW	R30,R26
    048B D1ED      RCALL	xicall
(0083)                     //enable cpu timer.
(0084)                     t0_start();
    048C DF78      RCALL	_t0_start
(0085)                 }
(0086)                 g_timer[i].value = 0;
    048D E084      LDI	R24,4
    048E 9F86      MUL	R24,R22
    048F 940E0824  CALL	0x824
    0491 940E08CB  CALL	0x8CB
    0493 9563      INC	R22
    0494 3064      CPI	R22,4
    0495 F408      BCC	0x0497
    0496 CFBA      RJMP	0x0451
(0087)             }
(0088)         }
(0089)         time_pices = 0;
    0497 2422      CLR	R2
    0498 9220007D  STS	time_pices,R2
(0090)         //if no timer running, stop cpu timer.
(0091)         if(!running_timer_count) t0_stop();
    049A 2344      TST	R20
    049B F409      BNE	0x049D
    049C DF6C      RCALL	_t0_stop
(0092)     }
(0093)     return;
    049D D1B4      RCALL	pop_gset2
    049E D21B      RCALL	pop_lset
    049F 9518      RETI
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\log.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "log.h"
(0004) 
(0005) void log(char type, unsigned char index, unsigned long id_code, unsigned long pswdH, unsigned long pswdL)
(0006) {
_log:
  pswdL                --> Y+12
  pswdH                --> Y+8
  id_code              --> Y+4
  index                --> Y+2
  type                 --> Y+0
    04A0 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\locker.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "locker.h"
(0004) 
(0005) void locker_init(void)
(0006) {
_locker_init:
    04A1 9508      RET
(0007) 
(0008) }
(0009) void locker_unlock(void)
(0010) {
_locker_unlock:
    04A2 9508      RET
(0011) 
(0012) }
(0013) 
(0014) void locker_lock(void)
(0015) {
FILE: <library>
_locker_lock:
    04A3 9508      RET
__print:
    04A4 D149      RCALL	push_arg4
    04A5 D1B4      RCALL	push_gset5
    04A6 972A      SBIW	R28,0xA
    04A7 2400      CLR	R0
    04A8 2411      CLR	R1
    04A9 821F      STD	Y+7,R1
    04AA 820E      STD	Y+6,R0
    04AB C12D      RJMP	0x05D9
    04AC 89EE      LDD	R30,Y+22
    04AD 89FF      LDD	R31,Y+23
    04AE 8180      LDD	R24,Z+0
    04AF 3285      CPI	R24,0x25
    04B0 F039      BEQ	0x04B8
    04B1 8100      LDD	R16,Z+0
    04B2 89EC      LDD	R30,Y+20
    04B3 89FD      LDD	R31,Y+21
    04B4 D1C4      RCALL	xicall
    04B5 940E081E  CALL	0x81E
    04B7 C11F      RJMP	0x05D7
    04B8 24EE      CLR	R14
    04B9 24FF      CLR	R15
    04BA E44D      LDI	R20,0x4D
    04BB E051      LDI	R21,1
    04BC E260      LDI	R22,0x20
    04BD 940E0889  CALL	0x889
    04BF 2FE8      MOV	R30,R24
    04C0 2FF9      MOV	R31,R25
    04C1 8020      LDD	R2,Z+0
    04C2 2433      CLR	R3
    04C3 823D      STD	Y+5,R3
    04C4 822C      STD	Y+4,R2
    04C5 2D82      MOV	R24,R2
    04C6 2D93      MOV	R25,R3
    04C7 3588      CPI	R24,0x58
    04C8 E0E0      LDI	R30,0
    04C9 079E      CPC	R25,R30
    04CA F409      BNE	0x04CC
    04CB C077      RJMP	0x0543
    04CC E588      LDI	R24,0x58
    04CD 1582      CP	R24,R2
    04CE 0593      CPC	R25,R3
    04CF F0A4      BLT	0x04E4
    04D0 818C      LDD	R24,Y+4
    04D1 819D      LDD	R25,Y+5
    04D2 3485      CPI	R24,0x45
    04D3 E0E0      LDI	R30,0
    04D4 079E      CPC	R25,R30
    04D5 F409      BNE	0x04D7
    04D6 C0FB      RJMP	0x05D2
    04D7 3485      CPI	R24,0x45
    04D8 E0E0      LDI	R30,0
    04D9 079E      CPC	R25,R30
    04DA F40C      BGE	0x04DC
    04DB C043      RJMP	0x051F
    04DC 818C      LDD	R24,Y+4
    04DD 819D      LDD	R25,Y+5
    04DE 3583      CPI	R24,0x53
    04DF E0E0      LDI	R30,0
    04E0 079E      CPC	R25,R30
    04E1 F409      BNE	0x04E3
    04E2 C0A8      RJMP	0x058B
    04E3 C03B      RJMP	0x051F
    04E4 818C      LDD	R24,Y+4
    04E5 819D      LDD	R25,Y+5
    04E6 368F      CPI	R24,0x6F
    04E7 E0E0      LDI	R30,0
    04E8 079E      CPC	R25,R30
    04E9 F409      BNE	0x04EB
    04EA C058      RJMP	0x0543
    04EB E68F      LDI	R24,0x6F
    04EC E090      LDI	R25,0
    04ED 802C      LDD	R2,Y+4
    04EE 803D      LDD	R3,Y+5
    04EF 1582      CP	R24,R2
    04F0 0593      CPC	R25,R3
    04F1 F0DC      BLT	0x050D
    04F2 818C      LDD	R24,Y+4
    04F3 819D      LDD	R25,Y+5
    04F4 3683      CPI	R24,0x63
    04F5 E0E0      LDI	R30,0
    04F6 079E      CPC	R25,R30
    04F7 F409      BNE	0x04F9
    04F8 C086      RJMP	0x057F
    04F9 3684      CPI	R24,0x64
    04FA E0E0      LDI	R30,0
    04FB 079E      CPC	R25,R30
    04FC F409      BNE	0x04FE
    04FD C02A      RJMP	0x0528
    04FE 3685      CPI	R24,0x65
    04FF E0E0      LDI	R30,0
    0500 079E      CPC	R25,R30
    0501 F409      BNE	0x0503
    0502 C0CF      RJMP	0x05D2
    0503 3686      CPI	R24,0x66
    0504 E0E0      LDI	R30,0
    0505 079E      CPC	R25,R30
    0506 F409      BNE	0x0508
    0507 C0CA      RJMP	0x05D2
    0508 3689      CPI	R24,0x69
    0509 E0E0      LDI	R30,0
    050A 079E      CPC	R25,R30
    050B F0E1      BEQ	0x0528
    050C C012      RJMP	0x051F
    050D 818C      LDD	R24,Y+4
    050E 819D      LDD	R25,Y+5
    050F 3783      CPI	R24,0x73
    0510 E0E0      LDI	R30,0
    0511 079E      CPC	R25,R30
    0512 F409      BNE	0x0514
    0513 C098      RJMP	0x05AC
    0514 3785      CPI	R24,0x75
    0515 E0E0      LDI	R30,0
    0516 079E      CPC	R25,R30
    0517 F409      BNE	0x0519
    0518 C02A      RJMP	0x0543
    0519 3788      CPI	R24,0x78
    051A E0E0      LDI	R30,0
    051B 079E      CPC	R25,R30
    051C F409      BNE	0x051E
    051D C025      RJMP	0x0543
    051E C000      RJMP	0x051F
    051F 89EE      LDD	R30,Y+22
    0520 89FF      LDD	R31,Y+23
    0521 8100      LDD	R16,Z+0
    0522 89EC      LDD	R30,Y+20
    0523 89FD      LDD	R31,Y+21
    0524 D154      RCALL	xicall
    0525 940E081E  CALL	0x81E
    0527 C0AF      RJMP	0x05D7
    0528 940E0815  CALL	0x815
    052A 940E08D5  CALL	0x8D5
    052C 2D82      MOV	R24,R2
    052D 2D93      MOV	R25,R3
    052E 3080      CPI	R24,0
    052F E0E0      LDI	R30,0
    0530 079E      CPC	R25,R30
    0531 F464      BGE	0x053E
    0532 2D8E      MOV	R24,R14
    0533 2D9F      MOV	R25,R15
    0534 6088      ORI	R24,0x8
    0535 2EE8      MOV	R14,R24
    0536 2EF9      MOV	R15,R25
    0537 E26D      LDI	R22,0x2D
    0538 2D82      MOV	R24,R2
    0539 2D93      MOV	R25,R3
    053A 940E08B7  CALL	0x8B7
    053C 8799      STD	Y+9,R25
    053D 8788      STD	Y+8,R24
    053E E08A      LDI	R24,0xA
    053F 940E084C  CALL	0x84C
    0541 D1C5      RCALL	_itoa
    0542 C039      RJMP	0x057C
    0543 940E0815  CALL	0x815
    0545 940E08D5  CALL	0x8D5
    0547 89EE      LDD	R30,Y+22
    0548 89FF      LDD	R31,Y+23
    0549 8180      LDD	R24,Z+0
    054A 3785      CPI	R24,0x75
    054B F451      BNE	0x0556
    054C E08A      LDI	R24,0xA
    054D E090      LDI	R25,0
    054E 8399      STD	Y+1,R25
    054F 8388      STD	Y+0,R24
    0550 2D22      MOV	R18,R2
    0551 2D33      MOV	R19,R3
    0552 2F04      MOV	R16,R20
    0553 2F15      MOV	R17,R21
    0554 D1F2      RCALL	_utoa
    0555 C026      RJMP	0x057C
    0556 89EE      LDD	R30,Y+22
    0557 89FF      LDD	R31,Y+23
    0558 8180      LDD	R24,Z+0
    0559 368F      CPI	R24,0x6F
    055A F429      BNE	0x0560
    055B E088      LDI	R24,0x8
    055C 940E084C  CALL	0x84C
    055E D1E8      RCALL	_utoa
    055F C01C      RJMP	0x057C
    0560 E180      LDI	R24,0x10
    0561 940E084C  CALL	0x84C
    0563 D1E3      RCALL	_utoa
    0564 89EE      LDD	R30,Y+22
    0565 89FF      LDD	R31,Y+23
    0566 8180      LDD	R24,Z+0
    0567 3588      CPI	R24,0x58
    0568 F499      BNE	0x057C
    0569 940E089E  CALL	0x89E
    056B C00D      RJMP	0x0579
    056C 2DEC      MOV	R30,R12
    056D 2DFD      MOV	R31,R13
    056E 8100      LDD	R16,Z+0
    056F 2711      CLR	R17
    0570 D213      RCALL	_toupper
    0571 2DEC      MOV	R30,R12
    0572 2DFD      MOV	R31,R13
    0573 8300      STD	Z+0,R16
    0574 2D8C      MOV	R24,R12
    0575 2D9D      MOV	R25,R13
    0576 9601      ADIW	R24,1
    0577 2EC8      MOV	R12,R24
    0578 2ED9      MOV	R13,R25
    0579 940E0894  CALL	0x894
    057B F781      BNE	0x056C
    057C 940E089E  CALL	0x89E
    057E C039      RJMP	0x05B8
    057F 940E0815  CALL	0x815
    0581 8020      LDD	R2,Z+0
    0582 8031      LDD	R3,Z+1
    0583 822A      STD	Y+2,R2
    0584 2D02      MOV	R16,R2
    0585 89EC      LDD	R30,Y+20
    0586 89FD      LDD	R31,Y+21
    0587 D0F1      RCALL	xicall
    0588 940E081E  CALL	0x81E
    058A C04C      RJMP	0x05D7
    058B 940E0815  CALL	0x815
    058D 80A0      LDD	R10,Z+0
    058E 80B1      LDD	R11,Z+1
    058F 326D      CPI	R22,0x2D
    0590 F4A9      BNE	0x05A6
    0591 E20D      LDI	R16,0x2D
    0592 89EC      LDD	R30,Y+20
    0593 89FD      LDD	R31,Y+21
    0594 D0E4      RCALL	xicall
    0595 940E081E  CALL	0x81E
    0597 C00E      RJMP	0x05A6
    0598 2DEA      MOV	R30,R10
    0599 2DFB      MOV	R31,R11
    059A 95C8      LPM
    059B 2D00      MOV	R16,R0
    059C 89EC      LDD	R30,Y+20
    059D 89FD      LDD	R31,Y+21
    059E D0DA      RCALL	xicall
    059F 940E081E  CALL	0x81E
    05A1 2D8A      MOV	R24,R10
    05A2 2D9B      MOV	R25,R11
    05A3 9601      ADIW	R24,1
    05A4 2EA8      MOV	R10,R24
    05A5 2EB9      MOV	R11,R25
    05A6 2DEA      MOV	R30,R10
    05A7 2DFB      MOV	R31,R11
    05A8 95C8      LPM
    05A9 2000      TST	R0
    05AA F769      BNE	0x0598
    05AB C02B      RJMP	0x05D7
    05AC 940E0815  CALL	0x815
    05AE 80C0      LDD	R12,Z+0
    05AF 80D1      LDD	R13,Z+1
    05B0 20CC      TST	R12
    05B1 F431      BNE	0x05B8
    05B2 20DD      TST	R13
    05B3 F421      BNE	0x05B8
    05B4 EE81      LDI	R24,0xE1
    05B5 E090      LDI	R25,0
    05B6 2EC8      MOV	R12,R24
    05B7 2ED9      MOV	R13,R25
    05B8 326D      CPI	R22,0x2D
    05B9 F4A1      BNE	0x05CE
    05BA E20D      LDI	R16,0x2D
    05BB 89EC      LDD	R30,Y+20
    05BC 89FD      LDD	R31,Y+21
    05BD D0BB      RCALL	xicall
    05BE 940E081E  CALL	0x81E
    05C0 C00D      RJMP	0x05CE
    05C1 2DEC      MOV	R30,R12
    05C2 2DFD      MOV	R31,R13
    05C3 8100      LDD	R16,Z+0
    05C4 89EC      LDD	R30,Y+20
    05C5 89FD      LDD	R31,Y+21
    05C6 D0B2      RCALL	xicall
    05C7 940E081E  CALL	0x81E
    05C9 2D8C      MOV	R24,R12
    05CA 2D9D      MOV	R25,R13
    05CB 9601      ADIW	R24,1
    05CC 2EC8      MOV	R12,R24
    05CD 2ED9      MOV	R13,R25
    05CE 940E0894  CALL	0x894
    05D0 F781      BNE	0x05C1
    05D1 C005      RJMP	0x05D7
    05D2 E78E      LDI	R24,0x7E
    05D3 E090      LDI	R25,0
    05D4 2EC8      MOV	R12,R24
    05D5 2ED9      MOV	R13,R25
    05D6 CFE1      RJMP	0x05B8
    05D7 940E0889  CALL	0x889
    05D9 89EE      LDD	R30,Y+22
    05DA 89FF      LDD	R31,Y+23
    05DB 8020      LDD	R2,Z+0
    05DC 2022      TST	R2
    05DD F009      BEQ	0x05DF
    05DE CECD      RJMP	0x04AC
    05DF 810E      LDD	R16,Y+6
    05E0 811F      LDD	R17,Y+7
    05E1 962A      ADIW	R28,0xA
    05E2 D075      RCALL	pop_gset5
    05E3 9624      ADIW	R28,4
    05E4 9508      RET
_strcpy:
    05E5 2FA0      MOV	R26,R16
    05E6 2FB1      MOV	R27,R17
    05E7 2FE2      MOV	R30,R18
    05E8 2FF3      MOV	R31,R19
    05E9 9001      LD	R0,Z+
    05EA 920D      ST	R0,X+
    05EB 2000      TST	R0
    05EC F7E1      BNE	0x05E9
    05ED 9508      RET
push_arg4:
    05EE 940E08A8  CALL	0x8A8
push_arg2:
    05F0 9508      RET
mod16s:
    05F1 9468      BSET	6
    05F2 92DA      ST	R13,-Y
    05F3 2ED1      MOV	R13,R17
    05F4 C004      RJMP	0x05F9
div16s:
    05F5 94E8      BCLR	6
    05F6 92DA      ST	R13,-Y
    05F7 2ED1      MOV	R13,R17
    05F8 26D3      EOR	R13,R19
    05F9 FF17      SBRS	R17,7
    05FA C002      RJMP	0x05FD
    05FB 940E088F  CALL	0x88F
    05FD FF37      SBRS	R19,7
    05FE C004      RJMP	0x0603
    05FF 9530      COM	R19
    0600 9520      COM	R18
    0601 5F2F      SUBI	R18,0xFF
    0602 4F3F      SBCI	R19,0xFF
    0603 D009      RCALL	xdiv16u
    0604 FED7      SBRS	R13,7
    0605 C002      RJMP	0x0608
    0606 940E088F  CALL	0x88F
    0608 90D9      LD	R13,Y+
    0609 9508      RET
mod16u:
    060A 9468      BSET	6
    060B C001      RJMP	xdiv16u
div16u:
    060C 94E8      BCLR	6
xdiv16u:
    060D 92EA      ST	R14,-Y
    060E 92FA      ST	R15,-Y
    060F 938A      ST	R24,-Y
    0610 24EE      CLR	R14
    0611 24FF      CLR	R15
    0612 E180      LDI	R24,0x10
    0613 0F00      LSL	R16
    0614 1F11      ROL	R17
    0615 1CEE      ROL	R14
    0616 1CFF      ROL	R15
    0617 16E2      CP	R14,R18
    0618 06F3      CPC	R15,R19
    0619 F018      BCS	0x061D
    061A 1AE2      SUB	R14,R18
    061B 0AF3      SBC	R15,R19
    061C 9503      INC	R16
    061D 958A      DEC	R24
    061E F7A1      BNE	0x0613
    061F F416      BRTC	0x0622
    0620 2D0E      MOV	R16,R14
    0621 2D1F      MOV	R17,R15
    0622 9189      LD	R24,Y+
    0623 90F9      LD	R15,Y+
    0624 90E9      LD	R14,Y+
    0625 9508      RET
empy32s:
empy32u:
    0626 D05B      RCALL	long_prolog
    0627 927F      PUSH	R7
    0628 D072      RCALL	tstzero1
    0629 F131      BEQ	0x0650
    062A 2477      CLR	R7
    062B D075      RCALL	tstzero2
    062C F419      BNE	0x0630
    062D 018C      MOVW	R16,R24
    062E 019D      MOVW	R18,R26
    062F C020      RJMP	0x0650
    0630 9F08      MUL	R16,R24
    0631 2CB0      MOV	R11,R0
    0632 2CA1      MOV	R10,R1
    0633 9F28      MUL	R18,R24
    0634 2C90      MOV	R9,R0
    0635 2C81      MOV	R8,R1
    0636 9F18      MUL	R17,R24
    0637 0CA0      ADD	R10,R0
    0638 1C91      ADC	R9,R1
    0639 1C87      ADC	R8,R7
    063A 9F09      MUL	R16,R25
    063B 0CA0      ADD	R10,R0
    063C 1C91      ADC	R9,R1
    063D 1C87      ADC	R8,R7
    063E 9F19      MUL	R17,R25
    063F 0C90      ADD	R9,R0
    0640 1C81      ADC	R8,R1
    0641 9F0A      MUL	R16,R26
    0642 0C90      ADD	R9,R0
    0643 1C81      ADC	R8,R1
    0644 9F38      MUL	R19,R24
    0645 0C80      ADD	R8,R0
    0646 9F29      MUL	R18,R25
    0647 0C80      ADD	R8,R0
    0648 9F1A      MUL	R17,R26
    0649 0C80      ADD	R8,R0
    064A 9F0B      MUL	R16,R27
    064B 0C80      ADD	R8,R0
    064C 2D0B      MOV	R16,R11
    064D 2D1A      MOV	R17,R10
    064E 2D29      MOV	R18,R9
    064F 2D38      MOV	R19,R8
    0650 907F      POP	R7
    0651 C03E      RJMP	long_epilog
pop_gset2:
    0652 E0E2      LDI	R30,2
    0653 C012      RJMP	pop
pop_gset3:
    0654 E0E4      LDI	R30,4
    0655 C010      RJMP	pop
pop_gset4:
    0656 E0E8      LDI	R30,0x8
    0657 C00E      RJMP	pop
pop_gset5:
    0658 27EE      CLR	R30
    0659 C00C      RJMP	pop
push_gset5:
    065A 92FA      ST	R15,-Y
    065B 92EA      ST	R14,-Y
push_gset4:
    065C 92DA      ST	R13,-Y
    065D 92CA      ST	R12,-Y
push_gset3:
    065E 92BA      ST	R11,-Y
    065F 92AA      ST	R10,-Y
push_gset2:
    0660 937A      ST	R23,-Y
    0661 936A      ST	R22,-Y
push_gset1:
    0662 935A      ST	R21,-Y
    0663 934A      ST	R20,-Y
    0664 9508      RET
pop_gset1:
    0665 E0E1      LDI	R30,1
pop:
    0666 9149      LD	R20,Y+
    0667 9159      LD	R21,Y+
    0668 FDE0      SBRC	R30,0
    0669 9508      RET
    066A 9169      LD	R22,Y+
    066B 9179      LD	R23,Y+
    066C FDE1      SBRC	R30,1
    066D 9508      RET
    066E 90A9      LD	R10,Y+
    066F 90B9      LD	R11,Y+
    0670 FDE2      SBRC	R30,2
    0671 9508      RET
    0672 90C9      LD	R12,Y+
    0673 90D9      LD	R13,Y+
    0674 FDE3      SBRC	R30,3
    0675 9508      RET
    0676 90E9      LD	R14,Y+
    0677 90F9      LD	R15,Y+
    0678 9508      RET
xicall:
    0679 920A      ST	R0,-Y
    067A 95C8      LPM
    067B 920A      ST	R0,-Y
    067C 9631      ADIW	R30,1
    067D 95C8      LPM
    067E 2DF0      MOV	R31,R0
    067F 91E9      LD	R30,Y+
    0680 9009      LD	R0,Y+
    0681 9409      IJMP
long_prolog:
    0682 928A      ST	R8,-Y
    0683 929A      ST	R9,-Y
    0684 92AA      ST	R10,-Y
    0685 92BA      ST	R11,-Y
    0686 93EA      ST	R30,-Y
    0687 938A      ST	R24,-Y
    0688 939A      ST	R25,-Y
    0689 93AA      ST	R26,-Y
    068A 93BA      ST	R27,-Y
    068B 8589      LDD	R24,Y+9
    068C 859A      LDD	R25,Y+10
    068D 85AB      LDD	R26,Y+11
    068E 85BC      LDD	R27,Y+12
    068F 9508      RET
long_epilog:
    0690 91B9      LD	R27,Y+
    0691 91A9      LD	R26,Y+
    0692 9199      LD	R25,Y+
    0693 9189      LD	R24,Y+
    0694 91E9      LD	R30,Y+
    0695 90B9      LD	R11,Y+
    0696 90A9      LD	R10,Y+
    0697 9099      LD	R9,Y+
    0698 9089      LD	R8,Y+
    0699 9624      ADIW	R28,4
    069A 9508      RET
tstzero1:
    069B 27EE      CLR	R30
    069C 2BE0      OR	R30,R16
    069D 2BE1      OR	R30,R17
    069E 2BE2      OR	R30,R18
    069F 2BE3      OR	R30,R19
    06A0 9508      RET
tstzero2:
    06A1 27EE      CLR	R30
    06A2 2BE8      OR	R30,R24
    06A3 2BE9      OR	R30,R25
    06A4 2BEA      OR	R30,R26
    06A5 2BEB      OR	R30,R27
    06A6 9508      RET
push_lset:
    06A7 93FA      ST	R31,-Y
    06A8 93EA      ST	R30,-Y
    06A9 93BA      ST	R27,-Y
    06AA 93AA      ST	R26,-Y
    06AB 939A      ST	R25,-Y
    06AC 938A      ST	R24,-Y
    06AD 940E08A8  CALL	0x8A8
    06AF 929A      ST	R9,-Y
    06B0 928A      ST	R8,-Y
    06B1 927A      ST	R7,-Y
    06B2 926A      ST	R6,-Y
    06B3 940E08B2  CALL	0x8B2
    06B5 921A      ST	R1,-Y
    06B6 920A      ST	R0,-Y
    06B7 B60F      IN	R0,0x3F
    06B8 920A      ST	R0,-Y
    06B9 9508      RET
pop_lset:
    06BA 9009      LD	R0,Y+
    06BB BE0F      OUT	0x3F,R0
    06BC 9009      LD	R0,Y+
    06BD 9019      LD	R1,Y+
    06BE 9029      LD	R2,Y+
    06BF 9039      LD	R3,Y+
    06C0 9049      LD	R4,Y+
    06C1 9059      LD	R5,Y+
    06C2 9069      LD	R6,Y+
    06C3 9079      LD	R7,Y+
    06C4 9089      LD	R8,Y+
    06C5 9099      LD	R9,Y+
    06C6 9109      LD	R16,Y+
    06C7 9119      LD	R17,Y+
    06C8 9129      LD	R18,Y+
    06C9 9139      LD	R19,Y+
    06CA 9189      LD	R24,Y+
    06CB 9199      LD	R25,Y+
    06CC 91A9      LD	R26,Y+
    06CD 91B9      LD	R27,Y+
    06CE 91E9      LD	R30,Y+
    06CF 91F9      LD	R31,Y+
    06D0 9508      RET
asgnblk:
    06D1 93AA      ST	R26,-Y
    06D2 93BA      ST	R27,-Y
    06D3 93EA      ST	R30,-Y
    06D4 93FA      ST	R31,-Y
    06D5 920A      ST	R0,-Y
    06D6 81AF      LDD	R26,Y+7
    06D7 85B8      LDD	R27,Y+8
    06D8 81ED      LDD	R30,Y+5
    06D9 81FE      LDD	R31,Y+6
    06DA 3000      CPI	R16,0
    06DB 0701      CPC	R16,R17
    06DC F029      BEQ	0x06E2
    06DD 9001      LD	R0,Z+
    06DE 920D      ST	R0,X+
    06DF 5001      SUBI	R16,1
    06E0 4010      SBCI	R17,0
    06E1 CFF8      RJMP	0x06DA
    06E2 9009      LD	R0,Y+
    06E3 91F9      LD	R31,Y+
    06E4 91E9      LD	R30,Y+
    06E5 91B9      LD	R27,Y+
    06E6 91A9      LD	R26,Y+
    06E7 9624      ADIW	R28,4
    06E8 9508      RET
_putchar:
    06E9 DF78      RCALL	push_gset1
    06EA 2F40      MOV	R20,R16
    06EB 90200166  LDS	R2,_textmode
    06ED 90300167  LDS	R3,_textmode+1
    06EF 2022      TST	R2
    06F0 F411      BNE	0x06F3
    06F1 2033      TST	R3
    06F2 F021      BEQ	0x06F7
    06F3 304A      CPI	R20,0xA
    06F4 F411      BNE	0x06F7
    06F5 E00D      LDI	R16,0xD
    06F6 DFF2      RCALL	_putchar
    06F7 9B5D      SBIS	0x0B,5
    06F8 CFFE      RJMP	0x06F7
    06F9 B94C      OUT	0x0C,R20
    06FA 2F04      MOV	R16,R20
    06FB 2711      CLR	R17
    06FC DF68      RCALL	pop_gset1
    06FD 9508      RET
__va_start:
    06FE 2F82      MOV	R24,R18
    06FF 2F93      MOV	R25,R19
    0700 9601      ADIW	R24,1
    0701 7F8E      ANDI	R24,0xFE
    0702 0F80      ADD	R24,R16
    0703 1F91      ADC	R25,R17
    0704 2F08      MOV	R16,R24
    0705 2F19      MOV	R17,R25
    0706 9508      RET
_itoa:
    0707 DF52      RCALL	push_gset5
    0708 2EC2      MOV	R12,R18
    0709 2ED3      MOV	R13,R19
    070A 2F40      MOV	R20,R16
    070B 2F51      MOV	R21,R17
    070C 97A2      SBIW	R28,0x22
    070D A4AC      LDD	R10,Y+44
    070E A4BD      LDD	R11,Y+45
    070F 2D8C      MOV	R24,R12
    0710 2D9D      MOV	R25,R13
    0711 3080      CPI	R24,0
    0712 E0E0      LDI	R30,0
    0713 079E      CPC	R25,R30
    0714 F434      BGE	0x071B
    0715 E061      LDI	R22,1
    0716 940E08B7  CALL	0x8B7
    0718 2EC8      MOV	R12,R24
    0719 2ED9      MOV	R13,R25
    071A C001      RJMP	0x071C
    071B 2766      CLR	R22
    071C 2422      CLR	R2
    071D A229      STD	Y+33,R2
    071E 2F8C      MOV	R24,R28
    071F 2F9D      MOV	R25,R29
    0720 9681      ADIW	R24,0x21
    0721 2EE8      MOV	R14,R24
    0722 2EF9      MOV	R15,R25
    0723 940E0874  CALL	0x874
    0725 940E08C1  CALL	0x8C1
    0727 DEC9      RCALL	mod16s
    0728 2FE0      MOV	R30,R16
    0729 2FF1      MOV	R31,R17
    072A EF83      LDI	R24,0xF3
    072B E090      LDI	R25,0
    072C 940E087C  CALL	0x87C
    072E 940E08C1  CALL	0x8C1
    0730 DEC4      RCALL	div16s
    0731 2EC0      MOV	R12,R16
    0732 2ED1      MOV	R13,R17
    0733 20CC      TST	R12
    0734 F771      BNE	0x0723
    0735 20DD      TST	R13
    0736 F761      BNE	0x0723
    0737 2366      TST	R22
    0738 F031      BEQ	0x073F
    0739 940E0874  CALL	0x874
    073B E28D      LDI	R24,0x2D
    073C 2DE2      MOV	R30,R2
    073D 2DF3      MOV	R31,R3
    073E 8380      STD	Z+0,R24
    073F 2D2E      MOV	R18,R14
    0740 2D3F      MOV	R19,R15
    0741 2F04      MOV	R16,R20
    0742 2F15      MOV	R17,R21
    0743 DEA1      RCALL	_strcpy
    0744 96A2      ADIW	R28,0x22
    0745 DF12      RCALL	pop_gset5
    0746 9508      RET
_utoa:
    0747 DF14      RCALL	push_gset4
    0748 2EA2      MOV	R10,R18
    0749 2EB3      MOV	R11,R19
    074A 2EC0      MOV	R12,R16
    074B 2ED1      MOV	R13,R17
    074C 97A2      SBIW	R28,0x22
    074D A56A      LDD	R22,Y+42
    074E A57B      LDD	R23,Y+43
    074F 2422      CLR	R2
    0750 A229      STD	Y+33,R2
    0751 2F4C      MOV	R20,R28
    0752 2F5D      MOV	R21,R29
    0753 5D4F      SUBI	R20,0xDF
    0754 4F5F      SBCI	R21,0xFF
    0755 2F84      MOV	R24,R20
    0756 2F95      MOV	R25,R21
    0757 9701      SBIW	R24,1
    0758 2E28      MOV	R2,R24
    0759 2E39      MOV	R3,R25
    075A 2F48      MOV	R20,R24
    075B 2F59      MOV	R21,R25
    075C 940E08A3  CALL	0x8A3
    075E DEAB      RCALL	mod16u
    075F 2FE0      MOV	R30,R16
    0760 2FF1      MOV	R31,R17
    0761 E188      LDI	R24,0x18
    0762 E091      LDI	R25,1
    0763 940E087C  CALL	0x87C
    0765 940E08A3  CALL	0x8A3
    0767 DEA4      RCALL	div16u
    0768 2EA0      MOV	R10,R16
    0769 2EB1      MOV	R11,R17
    076A 20AA      TST	R10
    076B F749      BNE	0x0755
    076C 20BB      TST	R11
    076D F739      BNE	0x0755
    076E 2F24      MOV	R18,R20
    076F 2F35      MOV	R19,R21
    0770 2D0C      MOV	R16,R12
    0771 2D1D      MOV	R17,R13
    0772 DE72      RCALL	_strcpy
    0773 96A2      ADIW	R28,0x22
    0774 DEE1      RCALL	pop_gset4
    0775 9508      RET
_islower:
    0776 E58D      LDI	R24,0x5D
    0777 E090      LDI	R25,0
    0778 2E20      MOV	R2,R16
    0779 2E31      MOV	R3,R17
    077A 0E28      ADD	R2,R24
    077B 1E39      ADC	R3,R25
    077C 2DE2      MOV	R30,R2
    077D 2DF3      MOV	R31,R3
    077E 95C8      LPM
    077F 2D00      MOV	R16,R0
    0780 2711      CLR	R17
    0781 7002      ANDI	R16,2
    0782 7010      ANDI	R17,0
    0783 9508      RET
_toupper:
    0784 DEDD      RCALL	push_gset1
    0785 2F40      MOV	R20,R16
    0786 2F51      MOV	R21,R17
    0787 2F04      MOV	R16,R20
    0788 2F15      MOV	R17,R21
    0789 DFEC      RCALL	_islower
    078A 3000      CPI	R16,0
    078B 0701      CPC	R16,R17
    078C F039      BEQ	0x0794
    078D 2F04      MOV	R16,R20
    078E 2F15      MOV	R17,R21
    078F 5601      SUBI	R16,0x61
    0790 4010      SBCI	R17,0
    0791 5B0F      SUBI	R16,0xBF
    0792 4F1F      SBCI	R17,0xFF
    0793 C002      RJMP	0x0796
    0794 2F04      MOV	R16,R20
    0795 2F15      MOV	R17,R21
    0796 DECE      RCALL	pop_gset1
    0797 9508      RET
_printf:
    0798 DE55      RCALL	push_arg4
    0799 DEC8      RCALL	push_gset1
    079A 9722      SBIW	R28,2
    079B E022      LDI	R18,2
    079C E030      LDI	R19,0
    079D 2F0C      MOV	R16,R28
    079E 2F1D      MOV	R17,R29
    079F 5F0C      SUBI	R16,0xFC
    07A0 4F1F      SBCI	R17,0xFF
    07A1 DF5C      RCALL	__va_start
    07A2 2F40      MOV	R20,R16
    07A3 2F51      MOV	R21,R17
    07A4 8359      STD	Y+1,R21
    07A5 8348      STD	Y+0,R20
    07A6 812C      LDD	R18,Y+4
    07A7 813D      LDD	R19,Y+5
    07A8 E50A      LDI	R16,0x5A
    07A9 E010      LDI	R17,0
    07AA DCF9      RCALL	__print
    07AB 2F40      MOV	R20,R16
    07AC 2F51      MOV	R21,R17
    07AD 9622      ADIW	R28,2
    07AE DEB6      RCALL	pop_gset1
    07AF 9624      ADIW	R28,4
    07B0 9508      RET
<created procedures>:
    07B1 9040006D  LDS	R4,id_code+2
    07B3 9050006E  LDS	R5,id_code+3
    07B5 9020006B  LDS	R2,id_code
    07B7 9030006C  LDS	R3,id_code+1
    07B9 0C22      LSL	R2
    07BA 1C33      ROL	R3
    07BB 1C44      ROL	R4
    07BC 1C55      ROL	R5
    07BD 9230006C  STS	id_code+1,R3
    07BF 9220006B  STS	id_code,R2
    07C1 9250006E  STS	id_code+3,R5
    07C3 9240006D  STS	id_code+2,R4
    07C5 9508      RET
    07C6 8628      STD	Y+8,R2
    07C7 8639      STD	Y+9,R3
    07C8 864A      STD	Y+10,R4
    07C9 865B      STD	Y+11,R5
    07CA 90400077  LDS	R4,passwordH+2
    07CC 90500078  LDS	R5,passwordH+3
    07CE 90200075  LDS	R2,passwordH
    07D0 90300076  LDS	R3,passwordH+1
    07D2 822C      STD	Y+4,R2
    07D3 823D      STD	Y+5,R3
    07D4 824E      STD	Y+6,R4
    07D5 825F      STD	Y+7,R5
    07D6 9508      RET
    07D7 9230006C  STS	id_code+1,R3
    07D9 9220006B  STS	id_code,R2
    07DB 9250006E  STS	id_code+3,R5
    07DD 9240006D  STS	id_code+2,R4
    07DF 9508      RET
    07E0 E040      LDI	R20,0
    07E1 E050      LDI	R21,0
    07E2 E060      LDI	R22,0
    07E3 E070      LDI	R23,0
    07E4 8748      STD	Y+8,R20
    07E5 8759      STD	Y+9,R21
    07E6 876A      STD	Y+10,R22
    07E7 877B      STD	Y+11,R23
    07E8 E040      LDI	R20,0
    07E9 E050      LDI	R21,0
    07EA E060      LDI	R22,0
    07EB E070      LDI	R23,0
    07EC 834C      STD	Y+4,R20
    07ED 835D      STD	Y+5,R21
    07EE 836E      STD	Y+6,R22
    07EF 837F      STD	Y+7,R23
    07F0 01FE      MOVW	R30,R28
    07F1 A820      LDD	R2,Z+48
    07F2 A831      LDD	R3,Z+49
    07F3 A842      LDD	R4,Z+50
    07F4 A853      LDD	R5,Z+51
    07F5 8228      STD	Y+0,R2
    07F6 8239      STD	Y+1,R3
    07F7 824A      STD	Y+2,R4
    07F8 825B      STD	Y+3,R5
    07F9 9508      RET
    07FA 9040006D  LDS	R4,id_code+2
    07FC 9050006E  LDS	R5,id_code+3
    07FE 9020006B  LDS	R2,id_code
    0800 9030006C  LDS	R3,id_code+1
    0802 9508      RET
    0803 90400077  LDS	R4,passwordH+2
    0805 90500078  LDS	R5,passwordH+3
    0807 90200075  LDS	R2,passwordH
    0809 90300076  LDS	R3,passwordH+1
    080B 9508      RET
    080C 9040007B  LDS	R4,passwordL+2
    080E 9050007C  LDS	R5,passwordL+3
    0810 90200079  LDS	R2,passwordL
    0812 9030007A  LDS	R3,passwordL+1
    0814 9508      RET
    0815 8D88      LDD	R24,Y+24
    0816 8D99      LDD	R25,Y+25
    0817 9602      ADIW	R24,2
    0818 8F99      STD	Y+25,R25
    0819 8F88      STD	Y+24,R24
    081A 2FE8      MOV	R30,R24
    081B 2FF9      MOV	R31,R25
    081C 9732      SBIW	R30,2
    081D 9508      RET
    081E 818E      LDD	R24,Y+6
    081F 819F      LDD	R25,Y+7
    0820 9601      ADIW	R24,1
    0821 839F      STD	Y+7,R25
    0822 838E      STD	Y+6,R24
    0823 9508      RET
    0824 01F0      MOVW	R30,R0
    0825 E38D      LDI	R24,0x3D
    0826 E091      LDI	R25,1
    0827 0FE8      ADD	R30,R24
    0828 1FF9      ADC	R31,R25
    0829 9508      RET
    082A B382      IN	R24,0x12
    082B 7E8F      ANDI	R24,0xEF
    082C BB82      OUT	0x12,R24
    082D E604      LDI	R16,0x64
    082E E010      LDI	R17,0
    082F 9508      RET
    0830 01FE      MOVW	R30,R28
    0831 A820      LDD	R2,Z+48
    0832 A831      LDD	R3,Z+49
    0833 A842      LDD	R4,Z+50
    0834 A853      LDD	R5,Z+51
    0835 9508      RET
    0836 E040      LDI	R20,0
    0837 E050      LDI	R21,0
    0838 E060      LDI	R22,0
    0839 E070      LDI	R23,0
    083A 9508      RET
    083B E041      LDI	R20,1
    083C E050      LDI	R21,0
    083D E060      LDI	R22,0
    083E E070      LDI	R23,0
    083F 9508      RET
    0840 01FE      MOVW	R30,R28
    0841 8C22      LDD	R2,Z+26
    0842 8C33      LDD	R3,Z+27
    0843 8C44      LDD	R4,Z+28
    0844 8C55      LDD	R5,Z+29
    0845 8228      STD	Y+0,R2
    0846 8239      STD	Y+1,R3
    0847 824A      STD	Y+2,R4
    0848 825B      STD	Y+3,R5
    0849 91200073  LDS	R18,current_index
    084B 9508      RET
    084C E090      LDI	R25,0
    084D 8399      STD	Y+1,R25
    084E 8388      STD	Y+0,R24
    084F 8528      LDD	R18,Y+8
    0850 8539      LDD	R19,Y+9
    0851 2F04      MOV	R16,R20
    0852 2F15      MOV	R17,R21
    0853 9508      RET
    0854 1462      CP	R6,R2
    0855 0473      CPC	R7,R3
    0856 0484      CPC	R8,R4
    0857 0495      CPC	R9,R5
    0858 9508      RET
    0859 01F0      MOVW	R30,R0
    085A E38F      LDI	R24,0x3F
    085B E091      LDI	R25,1
    085C 0FE8      ADD	R30,R24
    085D 1FF9      ADC	R31,R25
    085E 9508      RET
    085F 91800071  LDS	R24,read_count
    0861 5F8F      SUBI	R24,0xFF
    0862 93800071  STS	read_count,R24
    0864 9508      RET
    0865 9350007A  STS	passwordL+1,R21
    0867 93400079  STS	passwordL,R20
    0869 9370007C  STS	passwordL+3,R23
    086B 9360007B  STS	passwordL+2,R22
    086D 9508      RET
    086E 91800074  LDS	R24,input_err_count
    0870 5F8F      SUBI	R24,0xFF
    0871 93800074  STS	input_err_count,R24
    0873 9508      RET
    0874 2D8E      MOV	R24,R14
    0875 2D9F      MOV	R25,R15
    0876 9701      SBIW	R24,1
    0877 2E28      MOV	R2,R24
    0878 2E39      MOV	R3,R25
    0879 2EE8      MOV	R14,R24
    087A 2EF9      MOV	R15,R25
    087B 9508      RET
    087C 0FE8      ADD	R30,R24
    087D 1FF9      ADC	R31,R25
    087E 8040      LDD	R4,Z+0
    087F 2DE2      MOV	R30,R2
    0880 2DF3      MOV	R31,R3
    0881 8240      STD	Z+0,R4
    0882 9508      RET
    0883 E090      LDI	R25,0
    0884 93900070  STS	id_reader_flags+1,R25
    0886 9380006F  STS	id_reader_flags,R24
    0888 9508      RET
    0889 898E      LDD	R24,Y+22
    088A 899F      LDD	R25,Y+23
    088B 9601      ADIW	R24,1
    088C 8B9F      STD	Y+23,R25
    088D 8B8E      STD	Y+22,R24
    088E 9508      RET
    088F 9510      COM	R17
    0890 9500      COM	R16
    0891 5F0F      SUBI	R16,0xFF
    0892 4F1F      SBCI	R17,0xFF
    0893 9508      RET
    0894 2DEC      MOV	R30,R12
    0895 2DFD      MOV	R31,R13
    0896 8020      LDD	R2,Z+0
    0897 2022      TST	R2
    0898 9508      RET
    0899 1624      CP	R2,R20
    089A 0635      CPC	R3,R21
    089B 0646      CPC	R4,R22
    089C 0657      CPC	R5,R23
    089D 9508      RET
    089E E48D      LDI	R24,0x4D
    089F E091      LDI	R25,1
    08A0 2EC8      MOV	R12,R24
    08A1 2ED9      MOV	R13,R25
    08A2 9508      RET
    08A3 2F26      MOV	R18,R22
    08A4 2F37      MOV	R19,R23
    08A5 2D0A      MOV	R16,R10
    08A6 2D1B      MOV	R17,R11
    08A7 9508      RET
    08A8 933A      ST	R19,-Y
    08A9 932A      ST	R18,-Y
    08AA 931A      ST	R17,-Y
    08AB 930A      ST	R16,-Y
    08AC 9508      RET
    08AD 2D2C      MOV	R18,R12
    08AE 018E      MOVW	R16,R28
    08AF 5F04      SUBI	R16,0xF4
    08B0 4F1F      SBCI	R17,0xFF
    08B1 9508      RET
    08B2 925A      ST	R5,-Y
    08B3 924A      ST	R4,-Y
    08B4 923A      ST	R3,-Y
    08B5 922A      ST	R2,-Y
    08B6 9508      RET
    08B7 9580      COM	R24
    08B8 9590      COM	R25
    08B9 5F8F      SUBI	R24,0xFF
    08BA 4F9F      SBCI	R25,0xFF
    08BB 9508      RET
    08BC 2224      AND	R2,R20
    08BD 2235      AND	R3,R21
    08BE 2246      AND	R4,R22
    08BF 2257      AND	R5,R23
    08C0 9508      RET
    08C1 2D2A      MOV	R18,R10
    08C2 2D3B      MOV	R19,R11
    08C3 2D0C      MOV	R16,R12
    08C4 2D1D      MOV	R17,R13
    08C5 9508      RET
    08C6 8348      STD	Y+0,R20
    08C7 8359      STD	Y+1,R21
    08C8 836A      STD	Y+2,R22
    08C9 837B      STD	Y+3,R23
    08CA 9508      RET
    08CB 2422      CLR	R2
    08CC 2433      CLR	R3
    08CD 8231      STD	Z+1,R3
    08CE 8220      STD	Z+0,R2
    08CF 9508      RET
    08D0 E04A      LDI	R20,0xA
    08D1 E050      LDI	R21,0
    08D2 E060      LDI	R22,0
    08D3 E070      LDI	R23,0
    08D4 9508      RET
    08D5 8020      LDD	R2,Z+0
    08D6 8031      LDD	R3,Z+1
    08D7 8639      STD	Y+9,R3
    08D8 8628      STD	Y+8,R2
    08D9 9508      RET
    08DA E586      LDI	R24,0x56
    08DB E090      LDI	R25,0
    08DC 8399      STD	Y+1,R25
    08DD 8388      STD	Y+0,R24
    08DE 9508      RET
