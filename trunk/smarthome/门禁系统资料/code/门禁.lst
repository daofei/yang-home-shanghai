__start:
__text_start:
    0137 E5CF      LDI	R28,0x5F
    0138 E0D4      LDI	R29,4
    0139 BFCD      OUT	0x3D,R28
    013A BFDE      OUT	0x3E,R29
    013B 51C0      SUBI	R28,0x10
    013C 40D0      SBCI	R29,0
    013D EA0A      LDI	R16,0xAA
    013E 8308      STD	Y+0,R16
    013F 2400      CLR	R0
    0140 E7E0      LDI	R30,0x70
    0141 E0F1      LDI	R31,1
    0142 E011      LDI	R17,1
    0143 39EB      CPI	R30,0x9B
    0144 07F1      CPC	R31,R17
    0145 F011      BEQ	0x0148
    0146 9201      ST	R0,Z+
    0147 CFFB      RJMP	0x0143
    0148 8300      STD	Z+0,R16
    0149 E5ED      LDI	R30,0x5D
    014A E0F1      LDI	R31,1
    014B E6A0      LDI	R26,0x60
    014C E0B0      LDI	R27,0
    014D E012      LDI	R17,2
    014E 36ED      CPI	R30,0x6D
    014F 07F1      CPC	R31,R17
    0150 F021      BEQ	0x0155
    0151 95C8      LPM
    0152 9631      ADIW	R30,1
    0153 920D      ST	R0,X+
    0154 CFF9      RJMP	0x014E
    0155 D00E      RCALL	_main
_exit:
    0156 CFFF      RJMP	_exit
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\uart.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "uart.h"
(0005) 
(0006) //uart0 init. for printf.
(0007) void uart0_init(void)
(0008) {
(0009)     UCSRB = 0x00;                //禁止UART发送和接收
_uart0_init:
    0157 2422      CLR	R2
    0158 B82A      OUT	0x0A,R2
(0010)     UCSRA = 0x02;               //倍速
    0159 E082      LDI	R24,2
    015A B98B      OUT	0x0B,R24
(0011)     UCSRC = 0x06;                //8位数据
    015B E086      LDI	R24,6
    015C BD80      OUT	0x20,R24
(0012)     UBRRL = 0x67;                 //9600bps
    015D E687      LDI	R24,0x67
    015E B989      OUT	0x09,R24
(0013)     UBRRH = 0x00;
    015F BC20      OUT	0x20,R2
(0014)     UCSRB = 0x18;
    0160 E188      LDI	R24,0x18
    0161 B98A      OUT	0x0A,R24
    0162 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\init.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) void port_init(void)
(0005) {
_port_init:
    0163 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\main.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) 
(0005) #include<iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include "init.h"
(0009) #include "uart.h"
(0010) #include "wg26.h"
(0011) #include "util.h"
(0012) #include "tips.h"
(0013) #include "timer.h"
(0014) 
(0015) int main(void)
(0016) {
(0017)     port_init();
_main:
    0164 DFFE      RCALL	_port_init
(0018)     uart0_init();
    0165 DFF1      RCALL	_uart0_init
(0019)     init_interrupt();
    0166 D010      RCALL	_init_interrupt
(0020)     tips_port_init();
    0167 D0D5      RCALL	_tips_port_init
(0021)     timer_init();
    0168 D28B      RCALL	_timer_init
(0022)     printf("running...");
    0169 E600      LDI	R16,0x60
    016A E010      LDI	R17,0
    016B 940E078C  CALL	_printf
(0023)     //uart0_send_string("uart send...\n");
(0024)     PORTB = 0xff;
    016D EF8F      LDI	R24,0xFF
    016E BB88      OUT	0x18,R24
    016F C003      RJMP	0x0173
(0025)     while(1)
(0026)     {
(0027)         delay_ms(200);
    0170 EC08      LDI	R16,0xC8
    0171 E010      LDI	R17,0
    0172 D0B7      RCALL	_delay_ms
    0173 CFFC      RJMP	0x0170
(0028)     }
(0029)     return 0;
    0174 2700      CLR	R16
    0175 2711      CLR	R17
    0176 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\wg26.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "password.h"
(0004) #include "timer.h"
(0005) 
(0006) //pd2 input wg26 d0, pd3 input wg26 pd3.
(0007) //wg26 d0 is 0, d1 is 1.
(0008) void init_interrupt(void)
(0009) {
(0010)     //pd2,pd3 input mode.
(0011)     DDRD &= 0xf3;
_init_interrupt:
    0177 B381      IN	R24,0x11
    0178 7F83      ANDI	R24,0xF3
    0179 BB81      OUT	0x11,R24
(0012)     //上拉。
(0013)     PORTD |= 0x0c;
    017A B382      IN	R24,0x12
    017B 608C      ORI	R24,0xC
    017C BB82      OUT	0x12,R24
(0014)     //enable interrupt.
(0015)     SREG |= 0x80;
    017D 9478      BSET	7
(0016)     //int1 int0 enable.
(0017)     GICR |= 0xc0;
    017E B78B      IN	R24,0x3B
    017F 6C80      ORI	R24,0xC0
    0180 BF8B      OUT	0x3B,R24
(0018)     //int1 int0 fall edge.
(0019)     MCUCR |= 0x0a;
    0181 B785      IN	R24,0x35
    0182 608A      ORI	R24,0xA
    0183 BF85      OUT	0x35,R24
(0020)     return;
    0184 9508      RET
(0021) }
(0022) //diable reader.
(0023) static void disable_reader(void)
(0024) {
(0025)     GICR &= 0x3f;
_disable_reader:
    0185 B78B      IN	R24,0x3B
    0186 738F      ANDI	R24,0x3F
    0187 BF8B      OUT	0x3B,R24
(0026)     return;
    0188 9508      RET
(0027) }
(0028) //enable reader.
(0029) static void enable_reader(void)
(0030) {
(0031)     GICR |= 0xc0;
_enable_reader:
    0189 B78B      IN	R24,0x3B
    018A 6C80      ORI	R24,0xC0
    018B BF8B      OUT	0x3B,R24
(0032)     return;
    018C 9508      RET
_id_reader_check:
  id_code              --> Y+0
    018D D456      RCALL	push_arg4
(0033) }
(0034) 
(0035) //id card id.
(0036) static unsigned long id_code = 0;
(0037) //read flags.
(0038) static unsigned int id_reader_flags = 0;
(0039) //read count.
(0040) static char read_count = 0;
(0041) //define reader flags.
(0042) #define IDREADERFLAG_WAITING 0x0000
(0043) #define IDREADERFLAG_READING 0x0001
(0044) #define IDREADERFLAG_READED 0x0002
(0045) //id code check.
(0046) static char id_reader_check(unsigned long id_code)
(0047) {
(0048)     return 0;
    018E 2700      CLR	R16
    018F 9624      ADIW	R28,4
    0190 9508      RET
_read_time_out:
  timer                --> R10
    0191 D4C2      RCALL	push_gset3
    0192 2EA0      MOV	R10,R16
    0193 9722      SBIW	R28,2
(0049) }
(0050) 
(0051) //read timeout.
(0052) static void read_time_out(char timer)
(0053) {
(0054)     if(timer == IDREADERTIMEOUTTIMER)
    0194 20AA      TST	R10
    0195 F009      BEQ	0x0197
    0196 C038      RJMP	0x01CF
(0055)     {
(0056)         //disable reader.
(0057)         disable_reader();
    0197 DFED      RCALL	_disable_reader
(0058)         id_reader_flags = IDREADERFLAG_READED;
    0198 E082      LDI	R24,2
    0199 940E0857  CALL	0x857
(0059)         //read ok.
(0060)         if(read_count>5) //id card.
    019B E085      LDI	R24,5
    019C 90200071  LDS	R2,read_count
    019E 1582      CP	R24,R2
    019F F508      BCC	0x01C1
(0061)         {
(0062)             if(!id_reader_check(id_code))
    01A0 9120006D  LDS	R18,id_code+2
    01A2 9130006E  LDS	R19,id_code+3
    01A4 9100006B  LDS	R16,id_code
    01A6 9110006C  LDS	R17,id_code+1
    01A8 DFE4      RCALL	_id_reader_check
    01A9 2300      TST	R16
    01AA F4E9      BNE	0x01C8
(0063)             {
(0064)                 id_code &= 0x01fffffe;
    01AB EF4E      LDI	R20,0xFE
    01AC EF5F      LDI	R21,0xFF
    01AD EF6F      LDI	R22,0xFF
    01AE E071      LDI	R23,1
    01AF 940E07C3  CALL	0x7C3
    01B1 940E0880  CALL	0x880
    01B3 940E07BA  CALL	0x7BA
(0065)                 id_code >>= 1;
    01B5 9456      LSR	R5
    01B6 9447      ROR	R4
    01B7 9437      ROR	R3
    01B8 9427      ROR	R2
    01B9 940E07BA  CALL	0x7BA
(0066)                 password_handle(IDREADEDIDCARD, id_code);
    01BB 8248      STD	Y+0,R4
    01BC 8259      STD	Y+1,R5
    01BD 0191      MOVW	R18,R2
    01BE 2700      CLR	R16
    01BF D102      RCALL	_password_handle
(0067)             }
(0068)         }
    01C0 C007      RJMP	0x01C8
(0069)         else //keypad input.
(0070)             password_handle(IDREADEDKEYPAD, id_code);
    01C1 940E07C3  CALL	0x7C3
    01C3 8248      STD	Y+0,R4
    01C4 8259      STD	Y+1,R5
    01C5 0191      MOVW	R18,R2
    01C6 E001      LDI	R16,1
    01C7 D0FA      RCALL	_password_handle
(0071)         //enable reader.
(0072)         enable_reader();
    01C8 DFC0      RCALL	_enable_reader
(0073)         id_reader_flags = IDREADERFLAG_WAITING;
    01C9 2422      CLR	R2
    01CA 2433      CLR	R3
    01CB 92300070  STS	id_reader_flags+1,R3
    01CD 9220006F  STS	id_reader_flags,R2
(0074)     }
(0075)     return;
    01CF 9622      ADIW	R28,2
    01D0 D479      RCALL	pop_gset3
    01D1 9508      RET
_set_id_reading_status:
    01D2 D483      RCALL	push_gset2
    01D3 9722      SBIW	R28,2
(0076) }
(0077) //set status.
(0078) static void set_id_reading_status(void)
(0079) {
(0080)     if(id_reader_flags!=IDREADERFLAG_READING)
    01D4 9180006F  LDS	R24,id_reader_flags
    01D6 91900070  LDS	R25,id_reader_flags+1
    01D8 3081      CPI	R24,1
    01D9 E0E0      LDI	R30,0
    01DA 079E      CPC	R25,R30
    01DB F0A9      BEQ	0x01F1
(0081)     {
(0082)         id_reader_flags = IDREADERFLAG_READING;
    01DC E081      LDI	R24,1
    01DD 940E0857  CALL	0x857
    01DF 940E0821  CALL	0x821
(0083)         id_code = 0;
    01E1 9350006C  STS	id_code+1,R21
    01E3 9340006B  STS	id_code,R20
    01E5 9370006E  STS	id_code+3,R23
    01E7 9360006D  STS	id_code+2,R22
(0084)         //1*200ms.
(0085)         set_timer(IDREADERTIMEOUTTIMER, 1, read_time_out);
    01E9 E584      LDI	R24,0x54
    01EA E090      LDI	R25,0
    01EB 8399      STD	Y+1,R25
    01EC 8388      STD	Y+0,R24
    01ED E021      LDI	R18,1
    01EE E030      LDI	R19,0
    01EF 2700      CLR	R16
    01F0 D212      RCALL	_set_timer
(0086)     }
(0087)     return;
    01F1 9622      ADIW	R28,2
    01F2 D455      RCALL	pop_gset2
    01F3 9508      RET
_int0_isr:
    01F4 D4A8      RCALL	push_lset
    01F5 D460      RCALL	push_gset2
(0088) }
(0089) //pull id card id and keypad input.
(0090) #pragma interrupt_handler int0_isr:2
(0091) void int0_isr(void)
(0092) {
(0093)     set_id_reading_status();
    01F6 DFDB      RCALL	_set_id_reading_status
(0094)     if(!(PIND&0x08))
    01F7 9983      SBIC	0x10,3
    01F8 C00D      RJMP	0x0206
    01F9 940E07A5  CALL	<created procedures>
    01FB 940E084C  CALL	0x84C
(0095)     {
(0096)         id_code <<= 1;
(0097)         id_code |= 1;
    01FD 2A24      OR	R2,R20
    01FE 2A35      OR	R3,R21
    01FF 2A46      OR	R4,R22
    0200 2A57      OR	R5,R23
    0201 940E07BA  CALL	0x7BA
    0203 940E081B  CALL	0x81B
(0098)         ++read_count;
(0099)     }
    0205 C006      RJMP	0x020C
(0100)     else if(!(PIND&0x04))
    0206 9982      SBIC	0x10,2
    0207 C004      RJMP	0x020C
    0208 940E07A5  CALL	<created procedures>
    020A 940E081B  CALL	0x81B
(0101)     {
(0102)         id_code <<= 1;
(0103)         ++read_count;
(0104)     }
(0105)     return;
    020C D43B      RCALL	pop_gset2
    020D D4A2      RCALL	pop_lset
    020E 9518      RETI
_int1_isr:
    020F D48D      RCALL	push_lset
    0210 D445      RCALL	push_gset2
(0106) }
(0107) #pragma interrupt_handler int1_isr:2
(0108) void int1_isr(void)
(0109) {
(0110)     set_id_reading_status();
    0211 DFC0      RCALL	_set_id_reading_status
(0111)     if(!(PIND&0x08))
    0212 9983      SBIC	0x10,3
    0213 C00D      RJMP	0x0221
    0214 940E07A5  CALL	<created procedures>
    0216 940E084C  CALL	0x84C
(0112)     {
(0113)         id_code <<= 1;
(0114)         id_code |= 1;
    0218 2A24      OR	R2,R20
    0219 2A35      OR	R3,R21
    021A 2A46      OR	R4,R22
    021B 2A57      OR	R5,R23
    021C 940E07BA  CALL	0x7BA
    021E 940E081B  CALL	0x81B
(0115)         ++read_count;
(0116)     }
    0220 C006      RJMP	0x0227
(0117)     else if(!(PIND&0x04))
    0221 9982      SBIC	0x10,2
    0222 C004      RJMP	0x0227
    0223 940E07A5  CALL	<created procedures>
    0225 940E081B  CALL	0x81B
(0118)     {
(0119)         id_code <<= 1;
(0120)         ++read_count;
(0121)     }
(0122)     return;
    0227 D420      RCALL	pop_gset2
    0228 D487      RCALL	pop_lset
    0229 9518      RETI
_delay_ms:
  i                    --> R20
  j                    --> R22
  ms                   --> R16
    022A D42B      RCALL	push_gset2
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\util.c
(0001) #include <stdio.h>
(0002) #include <string.h>
(0003) #include <stdlib.h>
(0004) 
(0005) #include "util.h"
(0006) 
(0007) void delay_ms(int ms)
(0008) {
(0009)     int i,j;
(0010)     for(i=0;i<ms;i++)
    022B 2744      CLR	R20
    022C 2755      CLR	R21
    022D C00A      RJMP	0x0238
(0011)     {
(0012)         for(j=0;j<1140;j++)
    022E 2766      CLR	R22
    022F 2777      CLR	R23
    0230 5F6F      SUBI	R22,0xFF
    0231 4F7F      SBCI	R23,0xFF
    0232 3764      CPI	R22,0x74
    0233 E0E4      LDI	R30,4
    0234 077E      CPC	R23,R30
    0235 F3D4      BLT	0x0230
    0236 5F4F      SUBI	R20,0xFF
    0237 4F5F      SBCI	R21,0xFF
    0238 1740      CP	R20,R16
    0239 0751      CPC	R21,R17
    023A F39C      BLT	0x022E
    023B D40C      RCALL	pop_gset2
    023C 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\tips.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "tips.h"
(0005) #include "util.h"
(0006) 
(0007) #define BEEP_ON (PORTD&=0xef)
(0008) #define BEEP_OFF (PORTD|=0x10)
(0009) #define LED_ON (PORTD&=0xdf)
(0010) #define LED_OFF (PORTD|=0x20)
(0011) 
(0012) //pd4 beep,pd5 led.
(0013) void tips_port_init(void)
(0014) {
(0015)     //PIND4 & PIND5 OUTPUT AND pull-up resistors.
(0016)     PORTD |= 0x30;
_tips_port_init:
    023D B382      IN	R24,0x12
    023E 6380      ORI	R24,0x30
    023F BB82      OUT	0x12,R24
(0017)     DDRD |= 0x30;
    0240 B381      IN	R24,0x11
    0241 6380      ORI	R24,0x30
    0242 BB81      OUT	0x11,R24
(0018)     return;
    0243 9508      RET
(0019) }
(0020) //led on.
(0021) void tips_led_on(void)
(0022) {
(0023)     LED_ON;
_tips_led_on:
    0244 B382      IN	R24,0x12
    0245 7D8F      ANDI	R24,0xDF
    0246 BB82      OUT	0x12,R24
(0024)     return;
    0247 9508      RET
(0025) }
(0026) //led off.
(0027) void tips_led_off(void)
(0028) {
(0029)     LED_OFF;
_tips_led_off:
    0248 9A95      SBI	0x12,5
(0030)     return;
    0249 9508      RET
(0031) }
(0032) //beep on.
(0033) void tips_beep_on(void)
(0034) {
(0035)     BEEP_ON;
_tips_beep_on:
    024A B382      IN	R24,0x12
    024B 7E8F      ANDI	R24,0xEF
    024C BB82      OUT	0x12,R24
(0036)     return;
    024D 9508      RET
(0037) }
(0038) //beep off.
(0039) void tips_beep_off(void)
(0040) {
(0041)     BEEP_OFF;
_tips_beep_off:
    024E 9A94      SBI	0x12,4
(0042)     return;
    024F 9508      RET
(0043) }
(0044) //__------__ 6 pices.pice per 0.4 seconds.
(0045) void tips_ok(void)
(0046) {
(0047)     LED_ON;
_tips_ok:
    0250 B382      IN	R24,0x12
    0251 7D8F      ANDI	R24,0xDF
    0252 BB82      OUT	0x12,R24
(0048)     BEEP_ON;
    0253 B382      IN	R24,0x12
    0254 7E8F      ANDI	R24,0xEF
    0255 BB82      OUT	0x12,R24
(0049)     //2.4 seconds.
(0050)     delay_ms(400);
    0256 E900      LDI	R16,0x90
    0257 E011      LDI	R17,1
    0258 DFD1      RCALL	_delay_ms
(0051)     LED_OFF;
    0259 9A95      SBI	0x12,5
(0052)     BEEP_OFF;
    025A 9A94      SBI	0x12,4
(0053)     return;
    025B 9508      RET
(0054) }
(0055) //_-_-___-_-_
(0056) void tips_err(void)
(0057) {
(0058)     BEEP_ON;
_tips_err:
    025C 940E0800  CALL	0x800
(0059)     delay_ms(100);
    025E DFCB      RCALL	_delay_ms
(0060)     BEEP_OFF;
    025F 9A94      SBI	0x12,4
(0061)     delay_ms(100);
    0260 E604      LDI	R16,0x64
    0261 E010      LDI	R17,0
    0262 DFC7      RCALL	_delay_ms
    0263 940E0800  CALL	0x800
(0062)     BEEP_ON;
(0063)     delay_ms(100);
    0265 DFC4      RCALL	_delay_ms
(0064)     BEEP_OFF;
    0266 9A94      SBI	0x12,4
(0065)  
(0066)     delay_ms(200);
    0267 EC08      LDI	R16,0xC8
    0268 E010      LDI	R17,0
    0269 DFC0      RCALL	_delay_ms
    026A 940E0800  CALL	0x800
(0067)  
(0068)     BEEP_ON;
(0069)     delay_ms(100);
    026C DFBD      RCALL	_delay_ms
(0070)     BEEP_OFF;
    026D 9A94      SBI	0x12,4
(0071)     delay_ms(100);
    026E E604      LDI	R16,0x64
    026F E010      LDI	R17,0
    0270 DFB9      RCALL	_delay_ms
    0271 940E0800  CALL	0x800
(0072)     BEEP_ON;
(0073)     delay_ms(100);
    0273 DFB6      RCALL	_delay_ms
(0074)     BEEP_OFF;
    0274 9A94      SBI	0x12,4
(0075)     return;
    0275 9508      RET
(0076) }
(0077) //_----_-_-_
(0078) void tips_id_ok(void)
(0079) {
(0080)     BEEP_ON;
_tips_id_ok:
    0276 B382      IN	R24,0x12
    0277 7E8F      ANDI	R24,0xEF
    0278 BB82      OUT	0x12,R24
(0081)     delay_ms(200);
    0279 EC08      LDI	R16,0xC8
    027A E010      LDI	R17,0
    027B DFAE      RCALL	_delay_ms
(0082)     BEEP_OFF;
    027C 9A94      SBI	0x12,4
(0083)     delay_ms(200);
    027D EC08      LDI	R16,0xC8
    027E E010      LDI	R17,0
    027F DFAA      RCALL	_delay_ms
    0280 940E0800  CALL	0x800
(0084) 
(0085)     BEEP_ON;
(0086)     delay_ms(100);
    0282 DFA7      RCALL	_delay_ms
(0087)     BEEP_OFF;
    0283 9A94      SBI	0x12,4
(0088)     delay_ms(100);
    0284 E604      LDI	R16,0x64
    0285 E010      LDI	R17,0
    0286 DFA3      RCALL	_delay_ms
    0287 940E0800  CALL	0x800
(0089)     BEEP_ON;
(0090)     delay_ms(100);
    0289 DFA0      RCALL	_delay_ms
(0091)     BEEP_OFF;
    028A 9A94      SBI	0x12,4
(0092)     return;
    028B 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\password.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) 
(0004) #include<iom16v.h>
(0005) #include <macros.h>
(0006) 
(0007) #include "log.h"
(0008) #include "locker.h"
(0009) #include "tips.h"
(0010) #include "timer.h"
(0011) #include "password.h"
(0012) 
(0013) 
(0014) unsigned char readPasswordItemNum(void)
(0015) {
(0016) 
(0017)     return 0;
_readPasswordItemNum:
    028C 2700      CLR	R16
    028D 9508      RET
_readPasswordItem:
  item                 --> Y+0
  index                --> R22
    028E D3C7      RCALL	push_gset2
    028F 2F62      MOV	R22,R18
    0290 01A8      MOVW	R20,R16
    0291 9729      SBIW	R28,0x9
(0018) }
(0019) passwordItem_t readPasswordItem(unsigned char index)
(0020) {
(0021)     passwordItem_t item;
(0022)     return item;
    0292 01CE      MOVW	R24,R28
    0293 E009      LDI	R16,0x9
    0294 E010      LDI	R17,0
    0295 935A      ST	R21,-Y
    0296 934A      ST	R20,-Y
    0297 939A      ST	R25,-Y
    0298 938A      ST	R24,-Y
    0299 D42D      RCALL	asgnblk
    029A 9629      ADIW	R28,0x9
    029B D3AC      RCALL	pop_gset2
    029C 9508      RET
(0023) }
(0024) unsigned char insertPasswordItem(passwordItem_t item)
(0025) {
(0026)     return 0;
_insertPasswordItem:
  item                 --> R16
    029D 2700      CLR	R16
    029E 9508      RET
(0027) }
(0028) //maybe change the index.
(0029) void deletePasswordItem(unsigned char index)
(0030) {
(0031)     return;
_deletePasswordItem:
  index                --> Y+0
    029F 9508      RET
_clear_pswd_status:
    02A0 D3B5      RCALL	push_gset2
    02A1 940E084C  CALL	0x84C
(0032) }
(0033) 
(0034) #define PASSWORDREADIDCARDUNKOWN    0
(0035) #define PASSWORDREADIDCARDOK                1
(0036) #define PASSWORDREADIDANDPSWDOK         2
(0037) 
(0038) static unsigned char password_read_flags = 0;
(0039) static unsigned char current_index = 0;
(0040) static unsigned char input_err_count = 0;
(0041) 
(0042) //You input xxx then password is 1xxx.
(0043) static unsigned long password = 1;
(0044) 
(0045) static void clear_pswd_status(void)
(0046) {
(0047)     //clear last password input.
(0048)     password = 1;
    02A3 93500076  STS	password+1,R21
    02A5 93400075  STS	password,R20
    02A7 93700078  STS	password+3,R23
    02A9 93600077  STS	password+2,R22
(0049)     tips_led_off();
    02AB DF9C      RCALL	_tips_led_off
(0050)     password_read_flags = PASSWORDREADIDCARDUNKOWN;
    02AC 2422      CLR	R2
    02AD 92200072  STS	password_read_flags,R2
(0051)     current_index = 0;
    02AF 92200073  STS	current_index,R2
(0052)     stop_timer(PASSWORDTIMEOUTTIMER);
    02B1 E001      LDI	R16,1
    02B2 D170      RCALL	_stop_timer
(0053)     return;
    02B3 D394      RCALL	pop_gset2
    02B4 9508      RET
(0054) }
(0055) 
(0056) //cannot input timeout.
(0057) static void cannot_input_time_out(char timer)
(0058) {
(0059)     if(timer==PASSWORDTIMEOUTTIMER)
_cannot_input_time_out:
  timer                --> R16
    02B5 3001      CPI	R16,1
    02B6 F419      BNE	0x02BA
(0060)         input_err_count = 0;
    02B7 2422      CLR	R2
    02B8 92200074  STS	input_err_count,R2
(0061)     return;
    02BA 9508      RET
_input_time_out:
  timer                --> R20
    02BB D39C      RCALL	push_gset1
    02BC 2F40      MOV	R20,R16
(0062) }
(0063) 
(0064) //input timeout.
(0065) static void input_time_out(char timer)
(0066) {
(0067)     if(timer==PASSWORDTIMEOUTTIMER)
    02BD 3041      CPI	R20,1
    02BE F409      BNE	0x02C0
(0068)         clear_pswd_status();
    02BF DFE0      RCALL	_clear_pswd_status
(0069)     return;
    02C0 D39A      RCALL	pop_gset1
    02C1 9508      RET
_password_handle:
  current_item         --> Y+17
  pswd_item_num        --> R10
  i                    --> R12
  item                 --> Y+8
  code                 --> Y+36
  type                 --> R14
    02C2 933A      ST	R19,-Y
    02C3 932A      ST	R18,-Y
    02C4 D38B      RCALL	push_gset5
    02C5 2EE0      MOV	R14,R16
    02C6 976A      SBIW	R28,0x1A
(0070) }
(0071) 
(0072) void password_handle(char type, unsigned long code)
(0073) {
(0074)     unsigned char pswd_item_num = 0;
    02C7 24AA      CLR	R10
(0075)     unsigned char i;
(0076)     passwordItem_t item;
(0077) 
(0078)     //if input error count is too large.
(0079)     if(input_err_count>5)
    02C8 E085      LDI	R24,5
    02C9 90200074  LDS	R2,input_err_count
    02CB 1582      CP	R24,R2
    02CC F458      BCC	0x02D8
(0080)     {
(0081)         clear_pswd_status();
    02CD DFD2      RCALL	_clear_pswd_status
(0082)         tips_err();
    02CE DF8D      RCALL	_tips_err
(0083)         //set time out. 200ms*5*60
(0084)         set_timer(PASSWORDTIMEOUTTIMER, 300, cannot_input_time_out);
    02CF E588      LDI	R24,0x58
    02D0 E090      LDI	R25,0
    02D1 8399      STD	Y+1,R25
    02D2 8388      STD	Y+0,R24
    02D3 E22C      LDI	R18,0x2C
    02D4 E031      LDI	R19,1
    02D5 E001      LDI	R16,1
    02D6 D12C      RCALL	_set_timer
(0085)         return;
    02D7 C118      RJMP	0x03F0
(0086)     }
(0087)  
(0088)     //read a card.
(0089)     if(type==IDREADEDIDCARD)
    02D8 20EE      TST	R14
    02D9 F009      BEQ	0x02DB
    02DA C058      RJMP	0x0333
(0090)     {
(0091)         printf("ID Card:%d", code);
    02DB 940E07D5  CALL	0x7D5
    02DD 8248      STD	Y+0,R4
    02DE 8259      STD	Y+1,R5
    02DF 0191      MOVW	R18,R2
    02E0 EA05      LDI	R16,0xA5
    02E1 E010      LDI	R17,0
    02E2 D4A9      RCALL	_printf
(0092)         clear_pswd_status();
    02E3 DFBC      RCALL	_clear_pswd_status
(0093)         //read paswd item num.
(0094)         pswd_item_num = readPasswordItemNum();
    02E4 DFA7      RCALL	_readPasswordItemNum
    02E5 2EA0      MOV	R10,R16
(0095)         //loop find it.
(0096)         for(i=0;i<pswd_item_num;++i)
    02E6 24CC      CLR	R12
    02E7 C036      RJMP	0x031E
(0097)         {
(0098)             //read a item.
(0099)             item = readPasswordItem(i);
    02E8 940E087B  CALL	0x87B
    02EA DFA3      RCALL	_readPasswordItem
(0100)             //if item need id card, and is this id card.
(0101)             if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
    02EB 8428      LDD	R2,Y+8
    02EC FE20      SBRS	R2,0
    02ED C02F      RJMP	0x031D
    02EE 940E07D5  CALL	0x7D5
    02F0 01FE      MOVW	R30,R28
    02F1 8461      LDD	R6,Z+9
    02F2 8472      LDD	R7,Z+10
    02F3 8483      LDD	R8,Z+11
    02F4 8494      LDD	R9,Z+12
    02F5 940E0847  CALL	0x847
    02F7 F529      BNE	0x031D
(0102)             {
(0103)                 //need paswd.
(0104)                 if(item.flags&PASSWORDFLAGS_PASSWORD)
    02F8 8428      LDD	R2,Y+8
    02F9 FE21      SBRS	R2,1
    02FA C00E      RJMP	0x0309
(0105)                 {
(0106)                     //id card ok, but need password.
(0107)                     tips_id_ok();
    02FB DF7A      RCALL	_tips_id_ok
(0108)                     //id card ok, but not input password, led on.
(0109)                     tips_led_on();
    02FC DF47      RCALL	_tips_led_on
(0110)                     current_index = i;
    02FD 92C00073  STS	current_index,R12
(0111)                     password_read_flags = PASSWORDREADIDCARDOK;
    02FF E081      LDI	R24,1
    0300 93800072  STS	password_read_flags,R24
    0302 940E088A  CALL	0x88A
(0112)                     //set time out. 200ms*5*30
(0113)                     set_timer(PASSWORDTIMEOUTTIMER, 150, input_time_out);
    0304 E926      LDI	R18,0x96
    0305 E030      LDI	R19,0
    0306 E001      LDI	R16,1
    0307 D0FB      RCALL	_set_timer
(0114)                 }
    0308 C0E7      RJMP	0x03F0
(0115)                 else //only id card.
(0116)                 {
(0117)                     //record log
(0118)                     log(LOGTYPEIDOK, i, code, 0);
    0309 940E0821  CALL	0x821
    030B 834C      STD	Y+4,R20
    030C 835D      STD	Y+5,R21
    030D 836E      STD	Y+6,R22
    030E 837F      STD	Y+7,R23
    030F 940E07D5  CALL	0x7D5
    0311 940E082C  CALL	0x82C
    0313 2D2C      MOV	R18,R12
    0314 E001      LDI	R16,1
    0315 D180      RCALL	_log
(0119)                     //clear pswd statuc.
(0120)                     clear_pswd_status();
    0316 DF89      RCALL	_clear_pswd_status
(0121)                     tips_ok();
    0317 DF38      RCALL	_tips_ok
(0122)                     locker_unlock();
    0318 D17F      RCALL	_locker_unlock
(0123)                     //error count clear.
(0124)                     input_err_count = 0;
    0319 2422      CLR	R2
    031A 92200074  STS	input_err_count,R2
(0125)                 } //else
(0126)                 return;
    031C C0D3      RJMP	0x03F0
    031D 94C3      INC	R12
    031E 14CA      CP	R12,R10
    031F F408      BCC	0x0321
    0320 CFC7      RJMP	0x02E8
(0127)             }  //if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
(0128)         }	  //for(i=0;i<pswd_item_num;++i)
(0129)         //unkown id card.
(0130)         log(LOGTYPEIDERR, 0, code, 0);
    0321 940E0821  CALL	0x821
    0323 834C      STD	Y+4,R20
    0324 835D      STD	Y+5,R21
    0325 836E      STD	Y+6,R22
    0326 837F      STD	Y+7,R23
    0327 940E07D5  CALL	0x7D5
    0329 940E082C  CALL	0x82C
    032B 2722      CLR	R18
    032C E002      LDI	R16,2
    032D D168      RCALL	_log
(0131)         //clear password.
(0132)         clear_pswd_status();
    032E DF71      RCALL	_clear_pswd_status
(0133)         //error password and log.
(0134)         tips_err();
    032F DF2C      RCALL	_tips_err
    0330 940E0831  CALL	0x831
(0135)         //error count ++
(0136)         ++input_err_count;
(0137)         return;
    0332 C0BD      RJMP	0x03F0
(0138)     }	  //if(type==IDREADEDIDCARD)
(0139)     else if(type==IDREADEDKEYPAD) // read a keypad input.
    0333 2D8E      MOV	R24,R14
    0334 3081      CPI	R24,1
    0335 F009      BEQ	0x0337
    0336 C0B9      RJMP	0x03F0
(0140)     {
(0141)         code &= 0x0000000f;
    0337 E04F      LDI	R20,0xF
    0338 E050      LDI	R21,0
    0339 E060      LDI	R22,0
    033A E070      LDI	R23,0
    033B 940E07D5  CALL	0x7D5
    033D 940E0880  CALL	0x880
    033F 01FE      MOVW	R30,R28
    0340 A224      STD	Z+36,R2
    0341 A235      STD	Z+37,R3
    0342 A246      STD	Z+38,R4
    0343 A257      STD	Z+39,R5
    0344 940E088F  CALL	0x88F
    0346 940E07D5  CALL	0x7D5
    0348 940E0885  CALL	0x885
(0142)         if(code == 0x0000000a)  //*
    034A F429      BNE	0x0350
(0143)         {
(0144)             printf("Press *");
    034B E90D      LDI	R16,0x9D
    034C E010      LDI	R17,0
    034D D43E      RCALL	_printf
(0145)             //clear password.
(0146)             clear_pswd_status();
    034E DF51      RCALL	_clear_pswd_status
(0147)         }
    034F C0A0      RJMP	0x03F0
(0148)         else if(code == 0x0000000b) //#
    0350 E04B      LDI	R20,0xB
    0351 E050      LDI	R21,0
    0352 E060      LDI	R22,0
    0353 E070      LDI	R23,0
    0354 940E07D5  CALL	0x7D5
    0356 940E0885  CALL	0x885
    0358 F009      BEQ	0x035A
    0359 C065      RJMP	0x03BF
(0149)         {
(0150)             printf("Press #");
    035A E905      LDI	R16,0x95
    035B E010      LDI	R17,0
    035C D42F      RCALL	_printf
    035D 940E07CC  CALL	0x7CC
(0151)             //handle password.
(0152)             printf("Ok.pswd:%d", password);
    035F 8248      STD	Y+0,R4
    0360 8259      STD	Y+1,R5
    0361 0191      MOVW	R18,R2
    0362 E80A      LDI	R16,0x8A
    0363 E010      LDI	R17,0
    0364 D427      RCALL	_printf
(0153)             //need id card password.
(0154)             if(password_read_flags==PASSWORDREADIDCARDOK)
    0365 91800072  LDS	R24,password_read_flags
    0367 3081      CPI	R24,1
    0368 F009      BEQ	0x036A
    0369 C026      RJMP	0x0390
(0155)             {
(0156)                 passwordItem_t current_item = readPasswordItem(current_index);
    036A 91200073  LDS	R18,current_index
    036C 018E      MOVW	R16,R28
    036D 5E0F      SUBI	R16,0xEF
    036E 4F1F      SBCI	R17,0xFF
    036F DF1E      RCALL	_readPasswordItem
    0370 940E07CC  CALL	0x7CC
(0157)                 //password is ok.
(0158)                 if(current_item.password==password)
    0372 01FE      MOVW	R30,R28
    0373 8866      LDD	R6,Z+22
    0374 8877      LDD	R7,Z+23
    0375 8C80      LDD	R8,Z+24
    0376 8C91      LDD	R9,Z+25
    0377 940E0847  CALL	0x847
    0379 F459      BNE	0x0385
    037A 940E07F0  CALL	0x7F0
(0159)                 {
(0160)                     log(LOGTYPEIDANDPSWDOK, current_index, current_item.idCard, password);
    037C E003      LDI	R16,3
    037D D118      RCALL	_log
(0161)                     //clear password status.
(0162)                     clear_pswd_status();
    037E DF21      RCALL	_clear_pswd_status
(0163)                     //unlock and write log.
(0164)                     tips_ok();
    037F DED0      RCALL	_tips_ok
(0165)                     locker_unlock();
    0380 D117      RCALL	_locker_unlock
(0166)                     //error count clear.
(0167)                     input_err_count = 0;
    0381 2422      CLR	R2
    0382 92200074  STS	input_err_count,R2
(0168)                 }
    0384 C06B      RJMP	0x03F0
(0169)                 else //password is error.
(0170)                 {
(0171)                     log(LOGTYPEIDANDPSWDERR, current_index, current_item.idCard, password);
    0385 940E07CC  CALL	0x7CC
    0387 940E07F0  CALL	0x7F0
    0389 E004      LDI	R16,4
    038A D10B      RCALL	_log
(0172)                     //clear password.
(0173)                     clear_pswd_status();
    038B DF14      RCALL	_clear_pswd_status
(0174)                     //error password and log.
(0175)                     tips_err();
    038C DECF      RCALL	_tips_err
    038D 940E0831  CALL	0x831
(0176)                     //error count ++.
(0177)                     ++input_err_count;
(0178)                 }
(0179)             }
    038F C060      RJMP	0x03F0
(0180)             else //only password.
(0181)             {
(0182)                 //read paswd item num.
(0183)                 pswd_item_num = readPasswordItemNum();
    0390 DEFB      RCALL	_readPasswordItemNum
    0391 2EA0      MOV	R10,R16
(0184)                 //loop find it.
(0185)                 for(i=0;i<pswd_item_num;++i)
    0392 24CC      CLR	R12
    0393 C01D      RJMP	0x03B1
(0186)                 {
(0187)                     //read a item.
(0188)                     item = readPasswordItem(i);
    0394 940E087B  CALL	0x87B
    0396 DEF7      RCALL	_readPasswordItem
(0189)                     //if item need id card, and is this id card.
(0190)                     if((item.flags==PASSWORDFLAGS_PASSWORD)&&(item.password==password))
    0397 8588      LDD	R24,Y+8
    0398 3082      CPI	R24,2
    0399 F4B1      BNE	0x03B0
    039A 940E07CC  CALL	0x7CC
    039C 01FE      MOVW	R30,R28
    039D 8465      LDD	R6,Z+13
    039E 8476      LDD	R7,Z+14
    039F 8487      LDD	R8,Z+15
    03A0 8890      LDD	R9,Z+16
    03A1 940E0847  CALL	0x847
    03A3 F461      BNE	0x03B0
    03A4 940E0806  CALL	0x806
(0191)                     {
(0192)                         log(LOGTYPEPSWDOK, i, 0, password);
    03A6 2D2C      MOV	R18,R12
    03A7 E005      LDI	R16,5
    03A8 D0ED      RCALL	_log
(0193)                         //clear password.
(0194)                         clear_pswd_status();
    03A9 DEF6      RCALL	_clear_pswd_status
(0195)                         //password is right. unlock and log.
(0196)                         tips_ok();
    03AA DEA5      RCALL	_tips_ok
(0197)                         locker_unlock();
    03AB D0EC      RCALL	_locker_unlock
(0198)                         //error count clear.
(0199)                         input_err_count = 0;
    03AC 2422      CLR	R2
    03AD 92200074  STS	input_err_count,R2
(0200)                         return;
    03AF C040      RJMP	0x03F0
    03B0 94C3      INC	R12
    03B1 14CA      CP	R12,R10
    03B2 F308      BCS	0x0394
    03B3 940E07CC  CALL	0x7CC
    03B5 940E0806  CALL	0x806
(0201)                     }
(0202)                 }
(0203)                 //password is error.
(0204)                 log(LOGTYPEPSWDERR, 0, 0, password);
    03B7 2722      CLR	R18
    03B8 E006      LDI	R16,6
    03B9 D0DC      RCALL	_log
(0205)                 //clear password.
(0206)                 clear_pswd_status();
    03BA DEE5      RCALL	_clear_pswd_status
(0207)                 //password is error, and log.
(0208)                 tips_err();
    03BB DEA0      RCALL	_tips_err
    03BC 940E0831  CALL	0x831
(0209)                 //error count++.
(0210)                 ++input_err_count;
(0211)                 return;
    03BE C031      RJMP	0x03F0
(0212)             }
(0213)         }
(0214)         else
(0215)         {
(0216)             printf("Press %d", code);
    03BF 940E07D5  CALL	0x7D5
    03C1 8248      STD	Y+0,R4
    03C2 8259      STD	Y+1,R5
    03C3 0191      MOVW	R18,R2
    03C4 E801      LDI	R16,0x81
    03C5 E010      LDI	R17,0
    03C6 D3C5      RCALL	_printf
(0217)             tips_led_on();
    03C7 DE7C      RCALL	_tips_led_on
    03C8 940E088A  CALL	0x88A
(0218)             //set time out. 200ms*5*30
(0219)             set_timer(PASSWORDTIMEOUTTIMER, 30000, input_time_out);
    03CA E320      LDI	R18,0x30
    03CB E735      LDI	R19,0x75
    03CC E001      LDI	R16,1
    03CD D035      RCALL	_set_timer
    03CE 940E07CC  CALL	0x7CC
    03D0 940E088F  CALL	0x88F
    03D2 940E0862  CALL	0x862
(0220)             password = password*10 + code;
    03D4 018A      MOVW	R16,R20
    03D5 019B      MOVW	R18,R22
    03D6 D245      RCALL	empy32s
    03D7 0118      MOVW	R2,R16
    03D8 0129      MOVW	R4,R18
    03D9 01FE      MOVW	R30,R28
    03DA A064      LDD	R6,Z+36
    03DB A075      LDD	R7,Z+37
    03DC A086      LDD	R8,Z+38
    03DD A097      LDD	R9,Z+39
    03DE 0C26      ADD	R2,R6
    03DF 1C37      ADC	R3,R7
    03E0 1C48      ADC	R4,R8
    03E1 1C59      ADC	R5,R9
    03E2 92300076  STS	password+1,R3
    03E4 92200075  STS	password,R2
    03E6 92500078  STS	password+3,R5
    03E8 92400077  STS	password+2,R4
(0221)             printf("pswd:%d", password);
    03EA 8248      STD	Y+0,R4
    03EB 8259      STD	Y+1,R5
    03EC 0191      MOVW	R18,R2
    03ED E709      LDI	R16,0x79
    03EE E010      LDI	R17,0
    03EF D39C      RCALL	_printf
(0222)         }
(0223)     }
(0224)     return;
    03F0 966A      ADIW	R28,0x1A
    03F1 D25C      RCALL	pop_gset5
    03F2 9622      ADIW	R28,2
    03F3 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\timer.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) 
(0005) #include<iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include "timer.h"
(0009) 
(0010) void timer_init(void)
(0011) {
(0012)     //enable interrupt.
(0013)     SREG |= 0x80;
_timer_init:
    03F4 9478      BSET	7
(0014)     //timer0 normal mode.ck/1024.
(0015)     TCCR0 |= 0x05;
    03F5 B783      IN	R24,0x33
    03F6 6085      ORI	R24,5
    03F7 BF83      OUT	0x33,R24
(0016)     //init TCNT0.
(0017)     TCNT0 = 0;
    03F8 2422      CLR	R2
    03F9 BE22      OUT	0x32,R2
(0018)     //TIMSK
(0019)     //TIMSK |= 0x01;
(0020)     return; 
    03FA 9508      RET
(0021) }
(0022) //cpu timer0 start
(0023) static void t0_start(void)
(0024) {
(0025)     TIMSK |= 0x01;
_t0_start:
    03FB B789      IN	R24,0x39
    03FC 6081      ORI	R24,1
    03FD BF89      OUT	0x39,R24
(0026)     return;
    03FE 9508      RET
(0027) }
(0028) //cpu timer0 stop
(0029) static void t0_stop(void)
(0030) {
(0031)     TIMSK &= 0xfe;
_t0_stop:
    03FF B789      IN	R24,0x39
    0400 7F8E      ANDI	R24,0xFE
    0401 BF89      OUT	0x39,R24
(0032)     return;
    0402 9508      RET
_set_timer:
  cb                   --> Y+4
  value                --> R22
  timer                --> R20
    0403 D252      RCALL	push_gset2
    0404 01B9      MOVW	R22,R18
    0405 2F40      MOV	R20,R16
(0033) }
(0034) //
(0035) static timer_t g_timer[MAXTIMER];
(0036) //set timer and start timer. set value 0, need wait a cpu timer pice.
(0037) void set_timer(char timer, int value, timerCB cb)
(0038) {
(0039)     //value=0, stoped timer.
(0040)     g_timer[timer].value = value+1;
    0406 E084      LDI	R24,4
    0407 9F84      MUL	R24,R20
    0408 940E07E4  CALL	0x7E4
    040A 01CB      MOVW	R24,R22
    040B 9601      ADIW	R24,1
    040C 8391      STD	Z+1,R25
    040D 8380      STD	Z+0,R24
(0041)     g_timer[timer].cb = cb;
    040E E084      LDI	R24,4
    040F 9F84      MUL	R24,R20
    0410 940E0826  CALL	0x826
    0412 800C      LDD	R0,Y+4
    0413 801D      LDD	R1,Y+5
    0414 8211      STD	Z+1,R1
    0415 8200      STD	Z+0,R0
(0042)     if(g_timer[timer].value)
    0416 E084      LDI	R24,4
    0417 9F84      MUL	R24,R20
    0418 940E07E4  CALL	0x7E4
    041A 8020      LDD	R2,Z+0
    041B 8031      LDD	R3,Z+1
    041C 2022      TST	R2
    041D F411      BNE	0x0420
    041E 2033      TST	R3
    041F F009      BEQ	0x0421
(0043)         t0_start();
    0420 DFDA      RCALL	_t0_start
(0044)     return;
    0421 D226      RCALL	pop_gset2
    0422 9508      RET
(0045) }
(0046) //stop timer and clean timer.
(0047) void stop_timer(char timer)
(0048) {
(0049)     if(g_timer[timer].value)
_stop_timer:
  timer                --> R16
    0423 E084      LDI	R24,4
    0424 9F80      MUL	R24,R16
    0425 940E07E4  CALL	0x7E4
    0427 8020      LDD	R2,Z+0
    0428 8031      LDD	R3,Z+1
    0429 2022      TST	R2
    042A F411      BNE	0x042D
    042B 2033      TST	R3
    042C F061      BEQ	0x0439
(0050)     {
(0051)         //stop this timer.
(0052)         g_timer[timer].value = 0;
    042D E084      LDI	R24,4
    042E 9F80      MUL	R24,R16
    042F 940E07E4  CALL	0x7E4
    0431 940E0876  CALL	0x876
(0053)         g_timer[timer].cb = NULL;
    0433 E084      LDI	R24,4
    0434 9F80      MUL	R24,R16
    0435 940E0826  CALL	0x826
    0437 8231      STD	Z+1,R3
    0438 8220      STD	Z+0,R2
(0054)     }
(0055)     return;
    0439 9508      RET
_timer0_isr:
  running_timer_count  --> R20
  i                    --> R22
    043A D262      RCALL	push_lset
    043B D21A      RCALL	push_gset2
(0056) }
(0057) //timer spank.
(0058) #pragma interrupt_handler timer0_isr:10
(0059) void timer0_isr(void)
(0060) {
(0061)     static char time_pices = 0;
(0062)     ++time_pices;
    043C 918000B0  LDS	R24,time_pices
    043E 5F8F      SUBI	R24,0xFF
    043F 938000B0  STS	time_pices,R24
(0063)     //200ms.
(0064)     if(time_pices == 5)
    0441 3085      CPI	R24,5
    0442 F009      BEQ	0x0444
    0443 C04F      RJMP	0x0493
(0065)     {
(0066)         char running_timer_count = 0;
    0444 2744      CLR	R20
(0067)         char i;
(0068)         for(i=0;i<MAXTIMER;i++)
    0445 2766      CLR	R22
    0446 C043      RJMP	0x048A
(0069)         {
(0070)             if(g_timer[i].value>1)
    0447 E084      LDI	R24,4
    0448 9F86      MUL	R24,R22
    0449 940E07E4  CALL	0x7E4
    044B 8020      LDD	R2,Z+0
    044C 8031      LDD	R3,Z+1
    044D E081      LDI	R24,1
    044E E090      LDI	R25,0
    044F 1582      CP	R24,R2
    0450 0593      CPC	R25,R3
    0451 F478      BCC	0x0461
(0071)             {
(0072)                 --g_timer[i].value;
    0452 E084      LDI	R24,4
    0453 9F86      MUL	R24,R22
    0454 0110      MOVW	R2,R0
    0455 E780      LDI	R24,0x70
    0456 E091      LDI	R25,1
    0457 0E28      ADD	R2,R24
    0458 1E39      ADC	R3,R25
    0459 01F1      MOVW	R30,R2
    045A 8180      LDD	R24,Z+0
    045B 8191      LDD	R25,Z+1
    045C 9701      SBIW	R24,1
    045D 8391      STD	Z+1,R25
    045E 8380      STD	Z+0,R24
(0073)                 ++running_timer_count;
    045F 9543      INC	R20
(0074)             }
    0460 C028      RJMP	0x0489
(0075)             //timer call back.
(0076)             else if(g_timer[i].value==1)
    0461 E084      LDI	R24,4
    0462 9F86      MUL	R24,R22
    0463 940E07E4  CALL	0x7E4
    0465 8180      LDD	R24,Z+0
    0466 8191      LDD	R25,Z+1
    0467 3081      CPI	R24,1
    0468 E0E0      LDI	R30,0
    0469 079E      CPC	R25,R30
    046A F4F1      BNE	0x0489
(0077)             {
(0078)                 if(g_timer[i].cb)
    046B E084      LDI	R24,4
    046C 9F86      MUL	R24,R22
    046D 01F0      MOVW	R30,R0
    046E E782      LDI	R24,0x72
    046F E091      LDI	R25,1
    0470 0FE8      ADD	R30,R24
    0471 1FF9      ADC	R31,R25
    0472 8020      LDD	R2,Z+0
    0473 8031      LDD	R3,Z+1
    0474 2022      TST	R2
    0475 F411      BNE	0x0478
    0476 2033      TST	R3
    0477 F059      BEQ	0x0483
(0079)                 {
(0080)                     //disable cpu timer.
(0081)                     t0_stop();
    0478 DF86      RCALL	_t0_stop
(0082)                     (g_timer[i].cb)(i);
    0479 2F06      MOV	R16,R22
    047A E084      LDI	R24,4
    047B 9F86      MUL	R24,R22
    047C 940E0826  CALL	0x826
    047E 81A0      LDD	R26,Z+0
    047F 81B1      LDD	R27,Z+1
    0480 01FD      MOVW	R30,R26
    0481 D1ED      RCALL	xicall
(0083)                     //enable cpu timer.
(0084)                     t0_start();
    0482 DF78      RCALL	_t0_start
(0085)                 }
(0086)                 g_timer[i].value = 0;
    0483 E084      LDI	R24,4
    0484 9F86      MUL	R24,R22
    0485 940E07E4  CALL	0x7E4
    0487 940E0876  CALL	0x876
    0489 9563      INC	R22
    048A 3064      CPI	R22,4
    048B F408      BCC	0x048D
    048C CFBA      RJMP	0x0447
(0087)             }
(0088)         }
(0089)         time_pices = 0;
    048D 2422      CLR	R2
    048E 922000B0  STS	time_pices,R2
(0090)         //if no timer running, stop cpu timer.
(0091)         if(!running_timer_count) t0_stop();
    0490 2344      TST	R20
    0491 F409      BNE	0x0493
    0492 DF6C      RCALL	_t0_stop
(0092)     }
(0093)     return;
    0493 D1B4      RCALL	pop_gset2
    0494 D21B      RCALL	pop_lset
    0495 9518      RETI
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\log.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "log.h"
(0004) 
(0005) void log(char type, unsigned char index, unsigned long id_code, unsigned long pswd)
(0006) {
_log:
  pswd                 --> Y+8
  id_code              --> Y+4
  index                --> Y+2
  type                 --> Y+0
    0496 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\locker.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "locker.h"
(0004) 
(0005) void locker_init(void)
(0006) {
_locker_init:
    0497 9508      RET
(0007) 
(0008) }
(0009) void locker_unlock(void)
(0010) {
_locker_unlock:
    0498 9508      RET
(0011) 
(0012) }
(0013) 
(0014) void locker_lock(void)
(0015) {
FILE: <library>
_locker_lock:
    0499 9508      RET
__print:
    049A D149      RCALL	push_arg4
    049B D1B4      RCALL	push_gset5
    049C 972A      SBIW	R28,0xA
    049D 2400      CLR	R0
    049E 2411      CLR	R1
    049F 821F      STD	Y+7,R1
    04A0 820E      STD	Y+6,R0
    04A1 C12D      RJMP	0x05CF
    04A2 89EE      LDD	R30,Y+22
    04A3 89FF      LDD	R31,Y+23
    04A4 8180      LDD	R24,Z+0
    04A5 3285      CPI	R24,0x25
    04A6 F039      BEQ	0x04AE
    04A7 8100      LDD	R16,Z+0
    04A8 89EC      LDD	R30,Y+20
    04A9 89FD      LDD	R31,Y+21
    04AA D1C4      RCALL	xicall
    04AB 940E07EA  CALL	0x7EA
    04AD C11F      RJMP	0x05CD
    04AE 24EE      CLR	R14
    04AF 24FF      CLR	R15
    04B0 E840      LDI	R20,0x80
    04B1 E051      LDI	R21,1
    04B2 E260      LDI	R22,0x20
    04B3 940E0851  CALL	0x851
    04B5 2FE8      MOV	R30,R24
    04B6 2FF9      MOV	R31,R25
    04B7 8020      LDD	R2,Z+0
    04B8 2433      CLR	R3
    04B9 823D      STD	Y+5,R3
    04BA 822C      STD	Y+4,R2
    04BB 2D82      MOV	R24,R2
    04BC 2D93      MOV	R25,R3
    04BD 3588      CPI	R24,0x58
    04BE E0E0      LDI	R30,0
    04BF 079E      CPC	R25,R30
    04C0 F409      BNE	0x04C2
    04C1 C077      RJMP	0x0539
    04C2 E588      LDI	R24,0x58
    04C3 1582      CP	R24,R2
    04C4 0593      CPC	R25,R3
    04C5 F0A4      BLT	0x04DA
    04C6 818C      LDD	R24,Y+4
    04C7 819D      LDD	R25,Y+5
    04C8 3485      CPI	R24,0x45
    04C9 E0E0      LDI	R30,0
    04CA 079E      CPC	R25,R30
    04CB F409      BNE	0x04CD
    04CC C0FB      RJMP	0x05C8
    04CD 3485      CPI	R24,0x45
    04CE E0E0      LDI	R30,0
    04CF 079E      CPC	R25,R30
    04D0 F40C      BGE	0x04D2
    04D1 C043      RJMP	0x0515
    04D2 818C      LDD	R24,Y+4
    04D3 819D      LDD	R25,Y+5
    04D4 3583      CPI	R24,0x53
    04D5 E0E0      LDI	R30,0
    04D6 079E      CPC	R25,R30
    04D7 F409      BNE	0x04D9
    04D8 C0A8      RJMP	0x0581
    04D9 C03B      RJMP	0x0515
    04DA 818C      LDD	R24,Y+4
    04DB 819D      LDD	R25,Y+5
    04DC 368F      CPI	R24,0x6F
    04DD E0E0      LDI	R30,0
    04DE 079E      CPC	R25,R30
    04DF F409      BNE	0x04E1
    04E0 C058      RJMP	0x0539
    04E1 E68F      LDI	R24,0x6F
    04E2 E090      LDI	R25,0
    04E3 802C      LDD	R2,Y+4
    04E4 803D      LDD	R3,Y+5
    04E5 1582      CP	R24,R2
    04E6 0593      CPC	R25,R3
    04E7 F0DC      BLT	0x0503
    04E8 818C      LDD	R24,Y+4
    04E9 819D      LDD	R25,Y+5
    04EA 3683      CPI	R24,0x63
    04EB E0E0      LDI	R30,0
    04EC 079E      CPC	R25,R30
    04ED F409      BNE	0x04EF
    04EE C086      RJMP	0x0575
    04EF 3684      CPI	R24,0x64
    04F0 E0E0      LDI	R30,0
    04F1 079E      CPC	R25,R30
    04F2 F409      BNE	0x04F4
    04F3 C02A      RJMP	0x051E
    04F4 3685      CPI	R24,0x65
    04F5 E0E0      LDI	R30,0
    04F6 079E      CPC	R25,R30
    04F7 F409      BNE	0x04F9
    04F8 C0CF      RJMP	0x05C8
    04F9 3686      CPI	R24,0x66
    04FA E0E0      LDI	R30,0
    04FB 079E      CPC	R25,R30
    04FC F409      BNE	0x04FE
    04FD C0CA      RJMP	0x05C8
    04FE 3689      CPI	R24,0x69
    04FF E0E0      LDI	R30,0
    0500 079E      CPC	R25,R30
    0501 F0E1      BEQ	0x051E
    0502 C012      RJMP	0x0515
    0503 818C      LDD	R24,Y+4
    0504 819D      LDD	R25,Y+5
    0505 3783      CPI	R24,0x73
    0506 E0E0      LDI	R30,0
    0507 079E      CPC	R25,R30
    0508 F409      BNE	0x050A
    0509 C098      RJMP	0x05A2
    050A 3785      CPI	R24,0x75
    050B E0E0      LDI	R30,0
    050C 079E      CPC	R25,R30
    050D F409      BNE	0x050F
    050E C02A      RJMP	0x0539
    050F 3788      CPI	R24,0x78
    0510 E0E0      LDI	R30,0
    0511 079E      CPC	R25,R30
    0512 F409      BNE	0x0514
    0513 C025      RJMP	0x0539
    0514 C000      RJMP	0x0515
    0515 89EE      LDD	R30,Y+22
    0516 89FF      LDD	R31,Y+23
    0517 8100      LDD	R16,Z+0
    0518 89EC      LDD	R30,Y+20
    0519 89FD      LDD	R31,Y+21
    051A D154      RCALL	xicall
    051B 940E07EA  CALL	0x7EA
    051D C0AF      RJMP	0x05CD
    051E 940E07DB  CALL	0x7DB
    0520 940E0894  CALL	0x894
    0522 2D82      MOV	R24,R2
    0523 2D93      MOV	R25,R3
    0524 3080      CPI	R24,0
    0525 E0E0      LDI	R30,0
    0526 079E      CPC	R25,R30
    0527 F464      BGE	0x0534
    0528 2D8E      MOV	R24,R14
    0529 2D9F      MOV	R25,R15
    052A 6088      ORI	R24,0x8
    052B 2EE8      MOV	R14,R24
    052C 2EF9      MOV	R15,R25
    052D E26D      LDI	R22,0x2D
    052E 2D82      MOV	R24,R2
    052F 2D93      MOV	R25,R3
    0530 940E0867  CALL	0x867
    0532 8799      STD	Y+9,R25
    0533 8788      STD	Y+8,R24
    0534 E08A      LDI	R24,0xA
    0535 940E0813  CALL	0x813
    0537 D1C5      RCALL	_itoa
    0538 C039      RJMP	0x0572
    0539 940E07DB  CALL	0x7DB
    053B 940E0894  CALL	0x894
    053D 89EE      LDD	R30,Y+22
    053E 89FF      LDD	R31,Y+23
    053F 8180      LDD	R24,Z+0
    0540 3785      CPI	R24,0x75
    0541 F451      BNE	0x054C
    0542 E08A      LDI	R24,0xA
    0543 E090      LDI	R25,0
    0544 8399      STD	Y+1,R25
    0545 8388      STD	Y+0,R24
    0546 2D22      MOV	R18,R2
    0547 2D33      MOV	R19,R3
    0548 2F04      MOV	R16,R20
    0549 2F15      MOV	R17,R21
    054A D1F1      RCALL	_utoa
    054B C026      RJMP	0x0572
    054C 89EE      LDD	R30,Y+22
    054D 89FF      LDD	R31,Y+23
    054E 8180      LDD	R24,Z+0
    054F 368F      CPI	R24,0x6F
    0550 F429      BNE	0x0556
    0551 E088      LDI	R24,0x8
    0552 940E0813  CALL	0x813
    0554 D1E7      RCALL	_utoa
    0555 C01C      RJMP	0x0572
    0556 E180      LDI	R24,0x10
    0557 940E0813  CALL	0x813
    0559 D1E2      RCALL	_utoa
    055A 89EE      LDD	R30,Y+22
    055B 89FF      LDD	R31,Y+23
    055C 8180      LDD	R24,Z+0
    055D 3588      CPI	R24,0x58
    055E F499      BNE	0x0572
    055F 940E089E  CALL	0x89E
    0561 C00D      RJMP	0x056F
    0562 2DEC      MOV	R30,R12
    0563 2DFD      MOV	R31,R13
    0564 8100      LDD	R16,Z+0
    0565 2711      CLR	R17
    0566 D211      RCALL	_toupper
    0567 2DEC      MOV	R30,R12
    0568 2DFD      MOV	R31,R13
    0569 8300      STD	Z+0,R16
    056A 2D8C      MOV	R24,R12
    056B 2D9D      MOV	R25,R13
    056C 9601      ADIW	R24,1
    056D 2EC8      MOV	R12,R24
    056E 2ED9      MOV	R13,R25
    056F 940E0899  CALL	0x899
    0571 F781      BNE	0x0562
    0572 940E089E  CALL	0x89E
    0574 C039      RJMP	0x05AE
    0575 940E07DB  CALL	0x7DB
    0577 8020      LDD	R2,Z+0
    0578 8031      LDD	R3,Z+1
    0579 822A      STD	Y+2,R2
    057A 2D02      MOV	R16,R2
    057B 89EC      LDD	R30,Y+20
    057C 89FD      LDD	R31,Y+21
    057D D0F1      RCALL	xicall
    057E 940E07EA  CALL	0x7EA
    0580 C04C      RJMP	0x05CD
    0581 940E07DB  CALL	0x7DB
    0583 80A0      LDD	R10,Z+0
    0584 80B1      LDD	R11,Z+1
    0585 326D      CPI	R22,0x2D
    0586 F4A9      BNE	0x059C
    0587 E20D      LDI	R16,0x2D
    0588 89EC      LDD	R30,Y+20
    0589 89FD      LDD	R31,Y+21
    058A D0E4      RCALL	xicall
    058B 940E07EA  CALL	0x7EA
    058D C00E      RJMP	0x059C
    058E 2DEA      MOV	R30,R10
    058F 2DFB      MOV	R31,R11
    0590 95C8      LPM
    0591 2D00      MOV	R16,R0
    0592 89EC      LDD	R30,Y+20
    0593 89FD      LDD	R31,Y+21
    0594 D0DA      RCALL	xicall
    0595 940E07EA  CALL	0x7EA
    0597 2D8A      MOV	R24,R10
    0598 2D9B      MOV	R25,R11
    0599 9601      ADIW	R24,1
    059A 2EA8      MOV	R10,R24
    059B 2EB9      MOV	R11,R25
    059C 2DEA      MOV	R30,R10
    059D 2DFB      MOV	R31,R11
    059E 95C8      LPM
    059F 2000      TST	R0
    05A0 F769      BNE	0x058E
    05A1 C02B      RJMP	0x05CD
    05A2 940E07DB  CALL	0x7DB
    05A4 80C0      LDD	R12,Z+0
    05A5 80D1      LDD	R13,Z+1
    05A6 20CC      TST	R12
    05A7 F431      BNE	0x05AE
    05A8 20DD      TST	R13
    05A9 F421      BNE	0x05AE
    05AA E184      LDI	R24,0x14
    05AB E091      LDI	R25,1
    05AC 2EC8      MOV	R12,R24
    05AD 2ED9      MOV	R13,R25
    05AE 326D      CPI	R22,0x2D
    05AF F4A1      BNE	0x05C4
    05B0 E20D      LDI	R16,0x2D
    05B1 89EC      LDD	R30,Y+20
    05B2 89FD      LDD	R31,Y+21
    05B3 D0BB      RCALL	xicall
    05B4 940E07EA  CALL	0x7EA
    05B6 C00D      RJMP	0x05C4
    05B7 2DEC      MOV	R30,R12
    05B8 2DFD      MOV	R31,R13
    05B9 8100      LDD	R16,Z+0
    05BA 89EC      LDD	R30,Y+20
    05BB 89FD      LDD	R31,Y+21
    05BC D0B2      RCALL	xicall
    05BD 940E07EA  CALL	0x7EA
    05BF 2D8C      MOV	R24,R12
    05C0 2D9D      MOV	R25,R13
    05C1 9601      ADIW	R24,1
    05C2 2EC8      MOV	R12,R24
    05C3 2ED9      MOV	R13,R25
    05C4 940E0899  CALL	0x899
    05C6 F781      BNE	0x05B7
    05C7 C005      RJMP	0x05CD
    05C8 EB81      LDI	R24,0xB1
    05C9 E090      LDI	R25,0
    05CA 2EC8      MOV	R12,R24
    05CB 2ED9      MOV	R13,R25
    05CC CFE1      RJMP	0x05AE
    05CD 940E0851  CALL	0x851
    05CF 89EE      LDD	R30,Y+22
    05D0 89FF      LDD	R31,Y+23
    05D1 8020      LDD	R2,Z+0
    05D2 2022      TST	R2
    05D3 F009      BEQ	0x05D5
    05D4 CECD      RJMP	0x04A2
    05D5 810E      LDD	R16,Y+6
    05D6 811F      LDD	R17,Y+7
    05D7 962A      ADIW	R28,0xA
    05D8 D075      RCALL	pop_gset5
    05D9 9624      ADIW	R28,4
    05DA 9508      RET
_strcpy:
    05DB 2FA0      MOV	R26,R16
    05DC 2FB1      MOV	R27,R17
    05DD 2FE2      MOV	R30,R18
    05DE 2FF3      MOV	R31,R19
    05DF 9001      LD	R0,Z+
    05E0 920D      ST	R0,X+
    05E1 2000      TST	R0
    05E2 F7E1      BNE	0x05DF
    05E3 9508      RET
push_arg4:
    05E4 940E08A3  CALL	0x8A3
push_arg2:
    05E6 9508      RET
mod16s:
    05E7 9468      BSET	6
    05E8 92DA      ST	R13,-Y
    05E9 2ED1      MOV	R13,R17
    05EA C004      RJMP	0x05EF
div16s:
    05EB 94E8      BCLR	6
    05EC 92DA      ST	R13,-Y
    05ED 2ED1      MOV	R13,R17
    05EE 26D3      EOR	R13,R19
    05EF FF17      SBRS	R17,7
    05F0 C002      RJMP	0x05F3
    05F1 940E085D  CALL	0x85D
    05F3 FF37      SBRS	R19,7
    05F4 C004      RJMP	0x05F9
    05F5 9530      COM	R19
    05F6 9520      COM	R18
    05F7 5F2F      SUBI	R18,0xFF
    05F8 4F3F      SBCI	R19,0xFF
    05F9 D009      RCALL	xdiv16u
    05FA FED7      SBRS	R13,7
    05FB C002      RJMP	0x05FE
    05FC 940E085D  CALL	0x85D
    05FE 90D9      LD	R13,Y+
    05FF 9508      RET
mod16u:
    0600 9468      BSET	6
    0601 C001      RJMP	xdiv16u
div16u:
    0602 94E8      BCLR	6
xdiv16u:
    0603 92EA      ST	R14,-Y
    0604 92FA      ST	R15,-Y
    0605 938A      ST	R24,-Y
    0606 24EE      CLR	R14
    0607 24FF      CLR	R15
    0608 E180      LDI	R24,0x10
    0609 0F00      LSL	R16
    060A 1F11      ROL	R17
    060B 1CEE      ROL	R14
    060C 1CFF      ROL	R15
    060D 16E2      CP	R14,R18
    060E 06F3      CPC	R15,R19
    060F F018      BCS	0x0613
    0610 1AE2      SUB	R14,R18
    0611 0AF3      SBC	R15,R19
    0612 9503      INC	R16
    0613 958A      DEC	R24
    0614 F7A1      BNE	0x0609
    0615 F416      BRTC	0x0618
    0616 2D0E      MOV	R16,R14
    0617 2D1F      MOV	R17,R15
    0618 9189      LD	R24,Y+
    0619 90F9      LD	R15,Y+
    061A 90E9      LD	R14,Y+
    061B 9508      RET
empy32s:
empy32u:
    061C D05B      RCALL	long_prolog
    061D 927F      PUSH	R7
    061E D072      RCALL	tstzero1
    061F F131      BEQ	0x0646
    0620 2477      CLR	R7
    0621 D075      RCALL	tstzero2
    0622 F419      BNE	0x0626
    0623 018C      MOVW	R16,R24
    0624 019D      MOVW	R18,R26
    0625 C020      RJMP	0x0646
    0626 9F08      MUL	R16,R24
    0627 2CB0      MOV	R11,R0
    0628 2CA1      MOV	R10,R1
    0629 9F28      MUL	R18,R24
    062A 2C90      MOV	R9,R0
    062B 2C81      MOV	R8,R1
    062C 9F18      MUL	R17,R24
    062D 0CA0      ADD	R10,R0
    062E 1C91      ADC	R9,R1
    062F 1C87      ADC	R8,R7
    0630 9F09      MUL	R16,R25
    0631 0CA0      ADD	R10,R0
    0632 1C91      ADC	R9,R1
    0633 1C87      ADC	R8,R7
    0634 9F19      MUL	R17,R25
    0635 0C90      ADD	R9,R0
    0636 1C81      ADC	R8,R1
    0637 9F0A      MUL	R16,R26
    0638 0C90      ADD	R9,R0
    0639 1C81      ADC	R8,R1
    063A 9F38      MUL	R19,R24
    063B 0C80      ADD	R8,R0
    063C 9F29      MUL	R18,R25
    063D 0C80      ADD	R8,R0
    063E 9F1A      MUL	R17,R26
    063F 0C80      ADD	R8,R0
    0640 9F0B      MUL	R16,R27
    0641 0C80      ADD	R8,R0
    0642 2D0B      MOV	R16,R11
    0643 2D1A      MOV	R17,R10
    0644 2D29      MOV	R18,R9
    0645 2D38      MOV	R19,R8
    0646 907F      POP	R7
    0647 C03E      RJMP	long_epilog
pop_gset2:
    0648 E0E2      LDI	R30,2
    0649 C012      RJMP	pop
pop_gset3:
    064A E0E4      LDI	R30,4
    064B C010      RJMP	pop
pop_gset4:
    064C E0E8      LDI	R30,0x8
    064D C00E      RJMP	pop
pop_gset5:
    064E 27EE      CLR	R30
    064F C00C      RJMP	pop
push_gset5:
    0650 92FA      ST	R15,-Y
    0651 92EA      ST	R14,-Y
push_gset4:
    0652 92DA      ST	R13,-Y
    0653 92CA      ST	R12,-Y
push_gset3:
    0654 92BA      ST	R11,-Y
    0655 92AA      ST	R10,-Y
push_gset2:
    0656 937A      ST	R23,-Y
    0657 936A      ST	R22,-Y
push_gset1:
    0658 935A      ST	R21,-Y
    0659 934A      ST	R20,-Y
    065A 9508      RET
pop_gset1:
    065B E0E1      LDI	R30,1
pop:
    065C 9149      LD	R20,Y+
    065D 9159      LD	R21,Y+
    065E FDE0      SBRC	R30,0
    065F 9508      RET
    0660 9169      LD	R22,Y+
    0661 9179      LD	R23,Y+
    0662 FDE1      SBRC	R30,1
    0663 9508      RET
    0664 90A9      LD	R10,Y+
    0665 90B9      LD	R11,Y+
    0666 FDE2      SBRC	R30,2
    0667 9508      RET
    0668 90C9      LD	R12,Y+
    0669 90D9      LD	R13,Y+
    066A FDE3      SBRC	R30,3
    066B 9508      RET
    066C 90E9      LD	R14,Y+
    066D 90F9      LD	R15,Y+
    066E 9508      RET
xicall:
    066F 920A      ST	R0,-Y
    0670 95C8      LPM
    0671 920A      ST	R0,-Y
    0672 9631      ADIW	R30,1
    0673 95C8      LPM
    0674 2DF0      MOV	R31,R0
    0675 91E9      LD	R30,Y+
    0676 9009      LD	R0,Y+
    0677 9409      IJMP
long_prolog:
    0678 928A      ST	R8,-Y
    0679 929A      ST	R9,-Y
    067A 92AA      ST	R10,-Y
    067B 92BA      ST	R11,-Y
    067C 93EA      ST	R30,-Y
    067D 938A      ST	R24,-Y
    067E 939A      ST	R25,-Y
    067F 93AA      ST	R26,-Y
    0680 93BA      ST	R27,-Y
    0681 8589      LDD	R24,Y+9
    0682 859A      LDD	R25,Y+10
    0683 85AB      LDD	R26,Y+11
    0684 85BC      LDD	R27,Y+12
    0685 9508      RET
long_epilog:
    0686 91B9      LD	R27,Y+
    0687 91A9      LD	R26,Y+
    0688 9199      LD	R25,Y+
    0689 9189      LD	R24,Y+
    068A 91E9      LD	R30,Y+
    068B 90B9      LD	R11,Y+
    068C 90A9      LD	R10,Y+
    068D 9099      LD	R9,Y+
    068E 9089      LD	R8,Y+
    068F 9624      ADIW	R28,4
    0690 9508      RET
tstzero1:
    0691 27EE      CLR	R30
    0692 2BE0      OR	R30,R16
    0693 2BE1      OR	R30,R17
    0694 2BE2      OR	R30,R18
    0695 2BE3      OR	R30,R19
    0696 9508      RET
tstzero2:
    0697 27EE      CLR	R30
    0698 2BE8      OR	R30,R24
    0699 2BE9      OR	R30,R25
    069A 2BEA      OR	R30,R26
    069B 2BEB      OR	R30,R27
    069C 9508      RET
push_lset:
    069D 93FA      ST	R31,-Y
    069E 93EA      ST	R30,-Y
    069F 93BA      ST	R27,-Y
    06A0 93AA      ST	R26,-Y
    06A1 939A      ST	R25,-Y
    06A2 938A      ST	R24,-Y
    06A3 940E08A3  CALL	0x8A3
    06A5 929A      ST	R9,-Y
    06A6 928A      ST	R8,-Y
    06A7 927A      ST	R7,-Y
    06A8 926A      ST	R6,-Y
    06A9 940E0862  CALL	0x862
    06AB 921A      ST	R1,-Y
    06AC 920A      ST	R0,-Y
    06AD B60F      IN	R0,0x3F
    06AE 920A      ST	R0,-Y
    06AF 9508      RET
pop_lset:
    06B0 9009      LD	R0,Y+
    06B1 BE0F      OUT	0x3F,R0
    06B2 9009      LD	R0,Y+
    06B3 9019      LD	R1,Y+
    06B4 9029      LD	R2,Y+
    06B5 9039      LD	R3,Y+
    06B6 9049      LD	R4,Y+
    06B7 9059      LD	R5,Y+
    06B8 9069      LD	R6,Y+
    06B9 9079      LD	R7,Y+
    06BA 9089      LD	R8,Y+
    06BB 9099      LD	R9,Y+
    06BC 9109      LD	R16,Y+
    06BD 9119      LD	R17,Y+
    06BE 9129      LD	R18,Y+
    06BF 9139      LD	R19,Y+
    06C0 9189      LD	R24,Y+
    06C1 9199      LD	R25,Y+
    06C2 91A9      LD	R26,Y+
    06C3 91B9      LD	R27,Y+
    06C4 91E9      LD	R30,Y+
    06C5 91F9      LD	R31,Y+
    06C6 9508      RET
asgnblk:
    06C7 93AA      ST	R26,-Y
    06C8 93BA      ST	R27,-Y
    06C9 93EA      ST	R30,-Y
    06CA 93FA      ST	R31,-Y
    06CB 920A      ST	R0,-Y
    06CC 81AF      LDD	R26,Y+7
    06CD 85B8      LDD	R27,Y+8
    06CE 81ED      LDD	R30,Y+5
    06CF 81FE      LDD	R31,Y+6
    06D0 3000      CPI	R16,0
    06D1 0701      CPC	R16,R17
    06D2 F029      BEQ	0x06D8
    06D3 9001      LD	R0,Z+
    06D4 920D      ST	R0,X+
    06D5 5001      SUBI	R16,1
    06D6 4010      SBCI	R17,0
    06D7 CFF8      RJMP	0x06D0
    06D8 9009      LD	R0,Y+
    06D9 91F9      LD	R31,Y+
    06DA 91E9      LD	R30,Y+
    06DB 91B9      LD	R27,Y+
    06DC 91A9      LD	R26,Y+
    06DD 9624      ADIW	R28,4
    06DE 9508      RET
_putchar:
    06DF DF78      RCALL	push_gset1
    06E0 2F40      MOV	R20,R16
    06E1 90200199  LDS	R2,_textmode
    06E3 9030019A  LDS	R3,_textmode+1
    06E5 2022      TST	R2
    06E6 F411      BNE	0x06E9
    06E7 2033      TST	R3
    06E8 F021      BEQ	0x06ED
    06E9 304A      CPI	R20,0xA
    06EA F411      BNE	0x06ED
    06EB E00D      LDI	R16,0xD
    06EC DFF2      RCALL	_putchar
    06ED 9B5D      SBIS	0x0B,5
    06EE CFFE      RJMP	0x06ED
    06EF B94C      OUT	0x0C,R20
    06F0 2F04      MOV	R16,R20
    06F1 2711      CLR	R17
    06F2 DF68      RCALL	pop_gset1
    06F3 9508      RET
__va_start:
    06F4 2F82      MOV	R24,R18
    06F5 2F93      MOV	R25,R19
    06F6 9601      ADIW	R24,1
    06F7 7F8E      ANDI	R24,0xFE
    06F8 0F80      ADD	R24,R16
    06F9 1F91      ADC	R25,R17
    06FA 2F08      MOV	R16,R24
    06FB 2F19      MOV	R17,R25
    06FC 9508      RET
_itoa:
    06FD DF52      RCALL	push_gset5
    06FE 2EC2      MOV	R12,R18
    06FF 2ED3      MOV	R13,R19
    0700 2F40      MOV	R20,R16
    0701 2F51      MOV	R21,R17
    0702 97A2      SBIW	R28,0x22
    0703 A4AC      LDD	R10,Y+44
    0704 A4BD      LDD	R11,Y+45
    0705 2D8C      MOV	R24,R12
    0706 2D9D      MOV	R25,R13
    0707 3080      CPI	R24,0
    0708 E0E0      LDI	R30,0
    0709 079E      CPC	R25,R30
    070A F434      BGE	0x0711
    070B E061      LDI	R22,1
    070C 940E0867  CALL	0x867
    070E 2EC8      MOV	R12,R24
    070F 2ED9      MOV	R13,R25
    0710 C001      RJMP	0x0712
    0711 2766      CLR	R22
    0712 2422      CLR	R2
    0713 A229      STD	Y+33,R2
    0714 2F8C      MOV	R24,R28
    0715 2F9D      MOV	R25,R29
    0716 9681      ADIW	R24,0x21
    0717 2EE8      MOV	R14,R24
    0718 2EF9      MOV	R15,R25
    0719 940E0837  CALL	0x837
    071B 940E086C  CALL	0x86C
    071D DEC9      RCALL	mod16s
    071E 2FE0      MOV	R30,R16
    071F 2FF1      MOV	R31,R17
    0720 E286      LDI	R24,0x26
    0721 940E083F  CALL	0x83F
    0723 940E086C  CALL	0x86C
    0725 DEC5      RCALL	div16s
    0726 2EC0      MOV	R12,R16
    0727 2ED1      MOV	R13,R17
    0728 20CC      TST	R12
    0729 F779      BNE	0x0719
    072A 20DD      TST	R13
    072B F769      BNE	0x0719
    072C 2366      TST	R22
    072D F031      BEQ	0x0734
    072E 940E0837  CALL	0x837
    0730 E28D      LDI	R24,0x2D
    0731 2DE2      MOV	R30,R2
    0732 2DF3      MOV	R31,R3
    0733 8380      STD	Z+0,R24
    0734 2D2E      MOV	R18,R14
    0735 2D3F      MOV	R19,R15
    0736 2F04      MOV	R16,R20
    0737 2F15      MOV	R17,R21
    0738 DEA2      RCALL	_strcpy
    0739 96A2      ADIW	R28,0x22
    073A DF13      RCALL	pop_gset5
    073B 9508      RET
_utoa:
    073C DF15      RCALL	push_gset4
    073D 2EA2      MOV	R10,R18
    073E 2EB3      MOV	R11,R19
    073F 2EC0      MOV	R12,R16
    0740 2ED1      MOV	R13,R17
    0741 97A2      SBIW	R28,0x22
    0742 A56A      LDD	R22,Y+42
    0743 A57B      LDD	R23,Y+43
    0744 2422      CLR	R2
    0745 A229      STD	Y+33,R2
    0746 2F4C      MOV	R20,R28
    0747 2F5D      MOV	R21,R29
    0748 5D4F      SUBI	R20,0xDF
    0749 4F5F      SBCI	R21,0xFF
    074A 2F84      MOV	R24,R20
    074B 2F95      MOV	R25,R21
    074C 9701      SBIW	R24,1
    074D 2E28      MOV	R2,R24
    074E 2E39      MOV	R3,R25
    074F 2F48      MOV	R20,R24
    0750 2F59      MOV	R21,R25
    0751 940E0871  CALL	0x871
    0753 DEAC      RCALL	mod16u
    0754 2FE0      MOV	R30,R16
    0755 2FF1      MOV	R31,R17
    0756 E48B      LDI	R24,0x4B
    0757 940E083F  CALL	0x83F
    0759 940E0871  CALL	0x871
    075B DEA6      RCALL	div16u
    075C 2EA0      MOV	R10,R16
    075D 2EB1      MOV	R11,R17
    075E 20AA      TST	R10
    075F F751      BNE	0x074A
    0760 20BB      TST	R11
    0761 F741      BNE	0x074A
    0762 2F24      MOV	R18,R20
    0763 2F35      MOV	R19,R21
    0764 2D0C      MOV	R16,R12
    0765 2D1D      MOV	R17,R13
    0766 DE74      RCALL	_strcpy
    0767 96A2      ADIW	R28,0x22
    0768 DEE3      RCALL	pop_gset4
    0769 9508      RET
_islower:
    076A E58D      LDI	R24,0x5D
    076B E090      LDI	R25,0
    076C 2E20      MOV	R2,R16
    076D 2E31      MOV	R3,R17
    076E 0E28      ADD	R2,R24
    076F 1E39      ADC	R3,R25
    0770 2DE2      MOV	R30,R2
    0771 2DF3      MOV	R31,R3
    0772 95C8      LPM
    0773 2D00      MOV	R16,R0
    0774 2711      CLR	R17
    0775 7002      ANDI	R16,2
    0776 7010      ANDI	R17,0
    0777 9508      RET
_toupper:
    0778 DEDF      RCALL	push_gset1
    0779 2F40      MOV	R20,R16
    077A 2F51      MOV	R21,R17
    077B 2F04      MOV	R16,R20
    077C 2F15      MOV	R17,R21
    077D DFEC      RCALL	_islower
    077E 3000      CPI	R16,0
    077F 0701      CPC	R16,R17
    0780 F039      BEQ	0x0788
    0781 2F04      MOV	R16,R20
    0782 2F15      MOV	R17,R21
    0783 5601      SUBI	R16,0x61
    0784 4010      SBCI	R17,0
    0785 5B0F      SUBI	R16,0xBF
    0786 4F1F      SBCI	R17,0xFF
    0787 C002      RJMP	0x078A
    0788 2F04      MOV	R16,R20
    0789 2F15      MOV	R17,R21
    078A DED0      RCALL	pop_gset1
    078B 9508      RET
_printf:
    078C DE57      RCALL	push_arg4
    078D DECA      RCALL	push_gset1
    078E 9722      SBIW	R28,2
    078F E022      LDI	R18,2
    0790 E030      LDI	R19,0
    0791 2F0C      MOV	R16,R28
    0792 2F1D      MOV	R17,R29
    0793 5F0C      SUBI	R16,0xFC
    0794 4F1F      SBCI	R17,0xFF
    0795 DF5E      RCALL	__va_start
    0796 2F40      MOV	R20,R16
    0797 2F51      MOV	R21,R17
    0798 8359      STD	Y+1,R21
    0799 8348      STD	Y+0,R20
    079A 812C      LDD	R18,Y+4
    079B 813D      LDD	R19,Y+5
    079C E50A      LDI	R16,0x5A
    079D E010      LDI	R17,0
    079E DCFB      RCALL	__print
    079F 2F40      MOV	R20,R16
    07A0 2F51      MOV	R21,R17
    07A1 9622      ADIW	R28,2
    07A2 DEB8      RCALL	pop_gset1
    07A3 9624      ADIW	R28,4
    07A4 9508      RET
<created procedures>:
    07A5 9040006D  LDS	R4,id_code+2
    07A7 9050006E  LDS	R5,id_code+3
    07A9 9020006B  LDS	R2,id_code
    07AB 9030006C  LDS	R3,id_code+1
    07AD 0C22      LSL	R2
    07AE 1C33      ROL	R3
    07AF 1C44      ROL	R4
    07B0 1C55      ROL	R5
    07B1 9230006C  STS	id_code+1,R3
    07B3 9220006B  STS	id_code,R2
    07B5 9250006E  STS	id_code+3,R5
    07B7 9240006D  STS	id_code+2,R4
    07B9 9508      RET
    07BA 9230006C  STS	id_code+1,R3
    07BC 9220006B  STS	id_code,R2
    07BE 9250006E  STS	id_code+3,R5
    07C0 9240006D  STS	id_code+2,R4
    07C2 9508      RET
    07C3 9040006D  LDS	R4,id_code+2
    07C5 9050006E  LDS	R5,id_code+3
    07C7 9020006B  LDS	R2,id_code
    07C9 9030006C  LDS	R3,id_code+1
    07CB 9508      RET
    07CC 90400077  LDS	R4,password+2
    07CE 90500078  LDS	R5,password+3
    07D0 90200075  LDS	R2,password
    07D2 90300076  LDS	R3,password+1
    07D4 9508      RET
    07D5 01FE      MOVW	R30,R28
    07D6 A024      LDD	R2,Z+36
    07D7 A035      LDD	R3,Z+37
    07D8 A046      LDD	R4,Z+38
    07D9 A057      LDD	R5,Z+39
    07DA 9508      RET
    07DB 8D88      LDD	R24,Y+24
    07DC 8D99      LDD	R25,Y+25
    07DD 9602      ADIW	R24,2
    07DE 8F99      STD	Y+25,R25
    07DF 8F88      STD	Y+24,R24
    07E0 2FE8      MOV	R30,R24
    07E1 2FF9      MOV	R31,R25
    07E2 9732      SBIW	R30,2
    07E3 9508      RET
    07E4 01F0      MOVW	R30,R0
    07E5 E780      LDI	R24,0x70
    07E6 E091      LDI	R25,1
    07E7 0FE8      ADD	R30,R24
    07E8 1FF9      ADC	R31,R25
    07E9 9508      RET
    07EA 818E      LDD	R24,Y+6
    07EB 819F      LDD	R25,Y+7
    07EC 9601      ADIW	R24,1
    07ED 839F      STD	Y+7,R25
    07EE 838E      STD	Y+6,R24
    07EF 9508      RET
    07F0 822C      STD	Y+4,R2
    07F1 823D      STD	Y+5,R3
    07F2 824E      STD	Y+6,R4
    07F3 825F      STD	Y+7,R5
    07F4 01FE      MOVW	R30,R28
    07F5 8822      LDD	R2,Z+18
    07F6 8833      LDD	R3,Z+19
    07F7 8844      LDD	R4,Z+20
    07F8 8855      LDD	R5,Z+21
    07F9 8228      STD	Y+0,R2
    07FA 8239      STD	Y+1,R3
    07FB 824A      STD	Y+2,R4
    07FC 825B      STD	Y+3,R5
    07FD 91200073  LDS	R18,current_index
    07FF 9508      RET
    0800 B382      IN	R24,0x12
    0801 7E8F      ANDI	R24,0xEF
    0802 BB82      OUT	0x12,R24
    0803 E604      LDI	R16,0x64
    0804 E010      LDI	R17,0
    0805 9508      RET
    0806 822C      STD	Y+4,R2
    0807 823D      STD	Y+5,R3
    0808 824E      STD	Y+6,R4
    0809 825F      STD	Y+7,R5
    080A E040      LDI	R20,0
    080B E050      LDI	R21,0
    080C E060      LDI	R22,0
    080D E070      LDI	R23,0
    080E 8348      STD	Y+0,R20
    080F 8359      STD	Y+1,R21
    0810 836A      STD	Y+2,R22
    0811 837B      STD	Y+3,R23
    0812 9508      RET
    0813 E090      LDI	R25,0
    0814 8399      STD	Y+1,R25
    0815 8388      STD	Y+0,R24
    0816 8528      LDD	R18,Y+8
    0817 8539      LDD	R19,Y+9
    0818 2F04      MOV	R16,R20
    0819 2F15      MOV	R17,R21
    081A 9508      RET
    081B 91800071  LDS	R24,read_count
    081D 5F8F      SUBI	R24,0xFF
    081E 93800071  STS	read_count,R24
    0820 9508      RET
    0821 E040      LDI	R20,0
    0822 E050      LDI	R21,0
    0823 E060      LDI	R22,0
    0824 E070      LDI	R23,0
    0825 9508      RET
    0826 01F0      MOVW	R30,R0
    0827 E782      LDI	R24,0x72
    0828 E091      LDI	R25,1
    0829 0FE8      ADD	R30,R24
    082A 1FF9      ADC	R31,R25
    082B 9508      RET
    082C 8228      STD	Y+0,R2
    082D 8239      STD	Y+1,R3
    082E 824A      STD	Y+2,R4
    082F 825B      STD	Y+3,R5
    0830 9508      RET
    0831 91800074  LDS	R24,input_err_count
    0833 5F8F      SUBI	R24,0xFF
    0834 93800074  STS	input_err_count,R24
    0836 9508      RET
    0837 2D8E      MOV	R24,R14
    0838 2D9F      MOV	R25,R15
    0839 9701      SBIW	R24,1
    083A 2E28      MOV	R2,R24
    083B 2E39      MOV	R3,R25
    083C 2EE8      MOV	R14,R24
    083D 2EF9      MOV	R15,R25
    083E 9508      RET
    083F E091      LDI	R25,1
    0840 0FE8      ADD	R30,R24
    0841 1FF9      ADC	R31,R25
    0842 8040      LDD	R4,Z+0
    0843 2DE2      MOV	R30,R2
    0844 2DF3      MOV	R31,R3
    0845 8240      STD	Z+0,R4
    0846 9508      RET
    0847 1462      CP	R6,R2
    0848 0473      CPC	R7,R3
    0849 0484      CPC	R8,R4
    084A 0495      CPC	R9,R5
    084B 9508      RET
    084C E041      LDI	R20,1
    084D E050      LDI	R21,0
    084E E060      LDI	R22,0
    084F E070      LDI	R23,0
    0850 9508      RET
    0851 898E      LDD	R24,Y+22
    0852 899F      LDD	R25,Y+23
    0853 9601      ADIW	R24,1
    0854 8B9F      STD	Y+23,R25
    0855 8B8E      STD	Y+22,R24
    0856 9508      RET
    0857 E090      LDI	R25,0
    0858 93900070  STS	id_reader_flags+1,R25
    085A 9380006F  STS	id_reader_flags,R24
    085C 9508      RET
    085D 9510      COM	R17
    085E 9500      COM	R16
    085F 5F0F      SUBI	R16,0xFF
    0860 4F1F      SBCI	R17,0xFF
    0861 9508      RET
    0862 925A      ST	R5,-Y
    0863 924A      ST	R4,-Y
    0864 923A      ST	R3,-Y
    0865 922A      ST	R2,-Y
    0866 9508      RET
    0867 9580      COM	R24
    0868 9590      COM	R25
    0869 5F8F      SUBI	R24,0xFF
    086A 4F9F      SBCI	R25,0xFF
    086B 9508      RET
    086C 2D2A      MOV	R18,R10
    086D 2D3B      MOV	R19,R11
    086E 2D0C      MOV	R16,R12
    086F 2D1D      MOV	R17,R13
    0870 9508      RET
    0871 2F26      MOV	R18,R22
    0872 2F37      MOV	R19,R23
    0873 2D0A      MOV	R16,R10
    0874 2D1B      MOV	R17,R11
    0875 9508      RET
    0876 2422      CLR	R2
    0877 2433      CLR	R3
    0878 8231      STD	Z+1,R3
    0879 8220      STD	Z+0,R2
    087A 9508      RET
    087B 2D2C      MOV	R18,R12
    087C 018E      MOVW	R16,R28
    087D 5F08      SUBI	R16,0xF8
    087E 4F1F      SBCI	R17,0xFF
    087F 9508      RET
    0880 2224      AND	R2,R20
    0881 2235      AND	R3,R21
    0882 2246      AND	R4,R22
    0883 2257      AND	R5,R23
    0884 9508      RET
    0885 1624      CP	R2,R20
    0886 0635      CPC	R3,R21
    0887 0646      CPC	R4,R22
    0888 0657      CPC	R5,R23
    0889 9508      RET
    088A E586      LDI	R24,0x56
    088B E090      LDI	R25,0
    088C 8399      STD	Y+1,R25
    088D 8388      STD	Y+0,R24
    088E 9508      RET
    088F E04A      LDI	R20,0xA
    0890 E050      LDI	R21,0
    0891 E060      LDI	R22,0
    0892 E070      LDI	R23,0
    0893 9508      RET
    0894 8020      LDD	R2,Z+0
    0895 8031      LDD	R3,Z+1
    0896 8639      STD	Y+9,R3
    0897 8628      STD	Y+8,R2
    0898 9508      RET
    0899 2DEC      MOV	R30,R12
    089A 2DFD      MOV	R31,R13
    089B 8020      LDD	R2,Z+0
    089C 2022      TST	R2
    089D 9508      RET
    089E E880      LDI	R24,0x80
    089F E091      LDI	R25,1
    08A0 2EC8      MOV	R12,R24
    08A1 2ED9      MOV	R13,R25
    08A2 9508      RET
    08A3 933A      ST	R19,-Y
    08A4 932A      ST	R18,-Y
    08A5 931A      ST	R17,-Y
    08A6 930A      ST	R16,-Y
    08A7 9508      RET
