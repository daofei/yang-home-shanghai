__text_start:
__start:
    011F E5CF      LDI	R28,0x5F
    0120 E0D4      LDI	R29,4
    0121 BFCD      OUT	0x3D,R28
    0122 BFDE      OUT	0x3E,R29
    0123 51C0      SUBI	R28,0x10
    0124 40D0      SBCI	R29,0
    0125 EA0A      LDI	R16,0xAA
    0126 8308      STD	Y+0,R16
    0127 2400      CLR	R0
    0128 E3ED      LDI	R30,0x3D
    0129 E0F1      LDI	R31,1
    012A E011      LDI	R17,1
    012B 36E8      CPI	R30,0x68
    012C 07F1      CPC	R31,R17
    012D F011      BEQ	0x0130
    012E 9201      ST	R0,Z+
    012F CFFB      RJMP	0x012B
    0130 8300      STD	Z+0,R16
    0131 E6E1      LDI	R30,0x61
    0132 E0F1      LDI	R31,1
    0133 E6A0      LDI	R26,0x60
    0134 E0B0      LDI	R27,0
    0135 E012      LDI	R17,2
    0136 33EE      CPI	R30,0x3E
    0137 07F1      CPC	R31,R17
    0138 F021      BEQ	0x013D
    0139 95C8      LPM
    013A 9631      ADIW	R30,1
    013B 920D      ST	R0,X+
    013C CFF9      RJMP	0x0136
    013D D001      RCALL	_main
_exit:
    013E CFFF      RJMP	_exit
_main:
  in                   --> Y+4
  o                    --> Y+3
  door_minitor_count   --> R20
    013F 9725      SBIW	R28,5
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\main.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) 
(0005) #include<iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include "uart.h"
(0009) #include "wg26.h"
(0010) #include "util.h"
(0011) #include "tips.h"
(0012) #include "timer.h"
(0013) #include "ringandscreen.h"
(0014) #include "eeprom.h"
(0015) 
(0016) int main(void)
(0017) {
(0018)     unsigned int door_minitor_count = 0;
    0140 2744      CLR	R20
    0141 2755      CLR	R21
(0019)     char o = 0;
    0142 2422      CLR	R2
    0143 822B      STD	Y+3,R2
(0020)     char in = 0x5a;
    0144 E58A      LDI	R24,0x5A
    0145 838C      STD	Y+4,R24
(0021) 
(0022)     uart0_init();
    0146 940E06A0  CALL	_uart0_init
(0023)     init_interrupt();
    0148 D039      RCALL	_init_interrupt
(0024)     tips_port_init();
    0149 D112      RCALL	_tips_port_init
(0025)     timer_init();
    014A D34D      RCALL	_timer_init
(0026)     at24c256_init();
    014B D455      RCALL	_at24c256_init
(0027)     printf("running...");
    014C E600      LDI	R16,0x60
    014D E010      LDI	R17,0
    014E 940E09A0  CALL	_printf
    0150 C02C      RJMP	0x017D
(0028) 
(0029)     while(1)
(0030)     {
(0031)         //door open.
(0032)         if(check_door())
    0151 D447      RCALL	_check_door
    0152 2300      TST	R16
    0153 F059      BEQ	0x015F
(0033)         {
(0034)             door_minitor_count++;
    0154 5F4F      SUBI	R20,0xFF
    0155 4F5F      SBCI	R21,0xFF
(0035)             if(door_minitor_count>20)
    0156 E184      LDI	R24,0x14
    0157 E090      LDI	R25,0
    0158 1784      CP	R24,R20
    0159 0795      CPC	R25,R21
    015A F448      BCC	0x0164
(0036)             {
(0037)                 tips_err();
    015B D11C      RCALL	_tips_err
(0038)                 door_minitor_count = 0;
    015C 2744      CLR	R20
    015D 2755      CLR	R21
(0039)             }
(0040)         }
    015E C005      RJMP	0x0164
(0041)         else
(0042)         {
(0043)             if(door_minitor_count)
    015F 3040      CPI	R20,0
    0160 0745      CPC	R20,R21
    0161 F011      BEQ	0x0164
(0044)                 door_minitor_count = 0;
    0162 2744      CLR	R20
    0163 2755      CLR	R21
(0045)         }
(0046)         delay_ms(500);
    0164 EF04      LDI	R16,0xF4
    0165 E011      LDI	R17,1
    0166 D0E6      RCALL	_delay_ms
(0047)     rw24c256(&in, 1, 1, RW24C256WRITE);
    0167 2422      CLR	R2
    0168 822A      STD	Y+2,R2
    0169 E081      LDI	R24,1
    016A E090      LDI	R25,0
    016B 940E0AEC  CALL	0xAEC
    016D 5F0C      SUBI	R16,0xFC
    016E 4F1F      SBCI	R17,0xFF
    016F D44D      RCALL	_rw24c256
(0048)     //printf("writed.");
(0049)     delay_ms(5000);
    0170 E808      LDI	R16,0x88
    0171 E113      LDI	R17,0x13
    0172 D0DA      RCALL	_delay_ms
(0050)     rw24c256(&o, 1, 1, RW24C256READ);
    0173 E081      LDI	R24,1
    0174 838A      STD	Y+2,R24
    0175 2799      CLR	R25
    0176 8399      STD	Y+1,R25
    0177 8388      STD	Y+0,R24
    0178 E021      LDI	R18,1
    0179 018E      MOVW	R16,R28
    017A 5F0D      SUBI	R16,0xFD
    017B 4F1F      SBCI	R17,0xFF
    017C D440      RCALL	_rw24c256
    017D CFD3      RJMP	0x0151
(0051)     //printf("read :%d", o);
(0052) 
(0053)     }
(0054)     return 0;
    017E 2700      CLR	R16
    017F 2711      CLR	R17
    0180 9625      ADIW	R28,5
    0181 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\wg26.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "password.h"
(0004) #include "timer.h"
(0005) 
(0006) //pd2 input wg26 d0, pd3 input wg26 pd3.
(0007) //wg26 d0 is 0, d1 is 1.
(0008) void init_interrupt(void)
(0009) {
(0010)     //pd2,pd3 input mode.
(0011)     DDRD &= 0xf3;
_init_interrupt:
    0182 B381      IN	R24,0x11
    0183 7F83      ANDI	R24,0xF3
    0184 BB81      OUT	0x11,R24
(0012)     //上拉。
(0013)     PORTD |= 0x0c;
    0185 B382      IN	R24,0x12
    0186 608C      ORI	R24,0xC
    0187 BB82      OUT	0x12,R24
(0014)     //enable interrupt.
(0015)     SREG |= 0x80;
    0188 9478      BSET	7
(0016)     //int1 int0 enable.
(0017)     GICR |= 0xc0;
    0189 B78B      IN	R24,0x3B
    018A 6C80      ORI	R24,0xC0
    018B BF8B      OUT	0x3B,R24
(0018)     //int1 int0 fall edge.
(0019)     MCUCR |= 0x0a;
    018C B785      IN	R24,0x35
    018D 608A      ORI	R24,0xA
    018E BF85      OUT	0x35,R24
(0020)     return;
    018F 9508      RET
(0021) }
(0022) //diable reader.
(0023) static void disable_reader(void)
(0024) {
(0025)     GICR &= 0x3f;
_disable_reader:
    0190 B78B      IN	R24,0x3B
    0191 738F      ANDI	R24,0x3F
    0192 BF8B      OUT	0x3B,R24
(0026)     return;
    0193 9508      RET
(0027) }
(0028) //enable reader.
(0029) static void enable_reader(void)
(0030) {
(0031)     GICR |= 0xc0;
_enable_reader:
    0194 B78B      IN	R24,0x3B
    0195 6C80      ORI	R24,0xC0
    0196 BF8B      OUT	0x3B,R24
(0032)     return;
    0197 9508      RET
_id_reader_check:
  id_code              --> Y+0
    0198 940E07F6  CALL	push_arg4
(0033) }
(0034) 
(0035) //id card id.
(0036) static unsigned long id_code = 0;
(0037) //read flags.
(0038) static unsigned int id_reader_flags = 0;
(0039) //read count.
(0040) static char read_count = 0;
(0041) //define reader flags.
(0042) #define IDREADERFLAG_WAITING 0x0000
(0043) #define IDREADERFLAG_READING 0x0001
(0044) #define IDREADERFLAG_READED 0x0002
(0045) //id code check.
(0046) static char id_reader_check(unsigned long id_code)
(0047) {
(0048)     return 0;
    019A 2700      CLR	R16
    019B 9624      ADIW	R28,4
    019C 9508      RET
_read_time_out:
  timer                --> R10
    019D 940E0866  CALL	push_gset3
    019F 2EA0      MOV	R10,R16
    01A0 9722      SBIW	R28,2
(0049) }
(0050) 
(0051) //read timeout.
(0052) static void read_time_out(char timer)
(0053) {
(0054)     if(timer == IDREADERTIMEOUTTIMER)
    01A1 20AA      TST	R10
    01A2 F009      BEQ	0x01A4
    01A3 C03E      RJMP	0x01E2
(0055)     {
(0056)         //disable reader.
(0057)         disable_reader();
    01A4 DFEB      RCALL	_disable_reader
(0058)         id_reader_flags = IDREADERFLAG_READED;
    01A5 E082      LDI	R24,2
    01A6 940E0AF7  CALL	0xAF7
(0059)         //read ok.
(0060)         if(read_count==26) //id card.
    01A8 91800071  LDS	R24,read_count
    01AA 318A      CPI	R24,0x1A
    01AB F511      BNE	0x01CE
(0061)         {
(0062)             if(!id_reader_check(id_code))
    01AC 9120006D  LDS	R18,id_code+2
    01AE 9130006E  LDS	R19,id_code+3
    01B0 9100006B  LDS	R16,id_code
    01B2 9110006C  LDS	R17,id_code+1
    01B4 DFE3      RCALL	_id_reader_check
    01B5 2300      TST	R16
    01B6 F009      BEQ	0x01B8
    01B7 C021      RJMP	0x01D9
(0063)             {
(0064)                 id_code &= 0x01fffffe;
    01B8 EF4E      LDI	R20,0xFE
    01B9 EF5F      LDI	R21,0xFF
    01BA EF6F      LDI	R22,0xFF
    01BB E071      LDI	R23,1
    01BC 940E0A1A  CALL	0xA1A
    01BE 940E0B0D  CALL	0xB0D
    01C0 940E09DF  CALL	0x9DF
(0065)                 id_code >>= 1;
    01C2 9456      LSR	R5
    01C3 9447      ROR	R4
    01C4 9437      ROR	R3
    01C5 9427      ROR	R2
    01C6 940E09DF  CALL	0x9DF
(0066)                 password_handle(IDREADEDIDCARD, id_code);
    01C8 8248      STD	Y+0,R4
    01C9 8259      STD	Y+1,R5
    01CA 0191      MOVW	R18,R2
    01CB 2700      CLR	R16
    01CC D19C      RCALL	_password_handle
(0067)             }
(0068)         }
    01CD C00B      RJMP	0x01D9
(0069)         else if(read_count==4)//keypad input.
    01CE 91800071  LDS	R24,read_count
    01D0 3084      CPI	R24,4
    01D1 F439      BNE	0x01D9
    01D2 940E0A1A  CALL	0xA1A
(0070)         {
(0071)             password_handle(IDREADEDKEYPAD, id_code);
    01D4 8248      STD	Y+0,R4
    01D5 8259      STD	Y+1,R5
    01D6 0191      MOVW	R18,R2
    01D7 E001      LDI	R16,1
    01D8 D190      RCALL	_password_handle
(0072)         }
(0073)         //enable reader.
(0074)         enable_reader();
    01D9 DFBA      RCALL	_enable_reader
(0075)         id_reader_flags = IDREADERFLAG_WAITING;
    01DA 2422      CLR	R2
    01DB 2433      CLR	R3
    01DC 92300070  STS	id_reader_flags+1,R3
    01DE 9220006F  STS	id_reader_flags,R2
(0076)         read_count = 0;
    01E0 92200071  STS	read_count,R2
(0077)     }
(0078)     return;
    01E2 9622      ADIW	R28,2
    01E3 940E085C  CALL	pop_gset3
    01E5 9508      RET
_set_id_reading_status:
    01E6 940E0868  CALL	push_gset2
    01E8 9722      SBIW	R28,2
(0079) }
(0080) //set status.
(0081) static void set_id_reading_status(void)
(0082) {
(0083)     if(id_reader_flags!=IDREADERFLAG_READING)
    01E9 9180006F  LDS	R24,id_reader_flags
    01EB 91900070  LDS	R25,id_reader_flags+1
    01ED 3081      CPI	R24,1
    01EE E0E0      LDI	R30,0
    01EF 079E      CPC	R25,R30
    01F0 F0A9      BEQ	0x0206
(0084)     {
(0085)         id_reader_flags = IDREADERFLAG_READING;
    01F1 E081      LDI	R24,1
    01F2 940E0AF7  CALL	0xAF7
    01F4 940E0A23  CALL	0xA23
(0086)         id_code = 0;
    01F6 9350006C  STS	id_code+1,R21
    01F8 9340006B  STS	id_code,R20
    01FA 9370006E  STS	id_code+3,R23
    01FC 9360006D  STS	id_code+2,R22
(0087)         //1*200ms.
(0088)         set_timer(IDREADERTIMEOUTTIMER, 1, read_time_out);
    01FE E584      LDI	R24,0x54
    01FF E090      LDI	R25,0
    0200 8399      STD	Y+1,R25
    0201 8388      STD	Y+0,R24
    0202 E021      LDI	R18,1
    0203 E030      LDI	R19,0
    0204 2700      CLR	R16
    0205 D2A1      RCALL	_set_timer
(0089)     }
(0090)     return;
    0206 9622      ADIW	R28,2
    0207 940E085A  CALL	pop_gset2
    0209 9508      RET
_int0_isr:
    020A 940E0B3F  CALL	0xB3F
(0091) }
(0092) //pull id card id and keypad input.
(0093) #pragma interrupt_handler int0_isr:2
(0094) void int0_isr(void)
(0095) {
(0096)     set_id_reading_status();
    020C DFD9      RCALL	_set_id_reading_status
(0097)     if(!(PIND&0x08))
    020D 9983      SBIC	0x10,3
    020E C00D      RJMP	0x021C
    020F 940E09B9  CALL	<created procedures>
    0211 940E0A9F  CALL	0xA9F
(0098)     {
(0099)         id_code <<= 1;
(0100)         id_code |= 1;
    0213 2A24      OR	R2,R20
    0214 2A35      OR	R3,R21
    0215 2A46      OR	R4,R22
    0216 2A57      OR	R5,R23
    0217 940E09DF  CALL	0x9DF
    0219 940E0A99  CALL	0xA99
(0101)         ++read_count;
(0102)     }
    021B C006      RJMP	0x0222
(0103)     else if(!(PIND&0x04))
    021C 9982      SBIC	0x10,2
    021D C004      RJMP	0x0222
    021E 940E09B9  CALL	<created procedures>
    0220 940E0A99  CALL	0xA99
(0104)     {
(0105)         id_code <<= 1;
(0106)         ++read_count;
(0107)     }
(0108)     return;
    0222 940E085A  CALL	pop_gset2
    0224 940E08C2  CALL	pop_lset
    0226 9518      RETI
_int1_isr:
    0227 940E0B3F  CALL	0xB3F
(0109) }
(0110) #pragma interrupt_handler int1_isr:3
(0111) void int1_isr(void)
(0112) {
(0113)     set_id_reading_status();
    0229 DFBC      RCALL	_set_id_reading_status
(0114)     if(!(PIND&0x08))
    022A 9983      SBIC	0x10,3
    022B C00D      RJMP	0x0239
    022C 940E09B9  CALL	<created procedures>
    022E 940E0A9F  CALL	0xA9F
(0115)     {
(0116)         id_code <<= 1;
(0117)         id_code |= 1;
    0230 2A24      OR	R2,R20
    0231 2A35      OR	R3,R21
    0232 2A46      OR	R4,R22
    0233 2A57      OR	R5,R23
    0234 940E09DF  CALL	0x9DF
    0236 940E0A99  CALL	0xA99
(0118)         ++read_count;
(0119)     }
    0238 C006      RJMP	0x023F
(0120)     else if(!(PIND&0x04))
    0239 9982      SBIC	0x10,2
    023A C004      RJMP	0x023F
    023B 940E09B9  CALL	<created procedures>
    023D 940E0A99  CALL	0xA99
(0121)     {
(0122)         id_code <<= 1;
(0123)         ++read_count;
(0124)     }
(0125)     return;
    023F 940E085A  CALL	pop_gset2
    0241 940E08C2  CALL	pop_lset
    0243 9518      RETI
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\util.c
(0001) #include "util.h"
(0002) 
(0003) #define XTAL    8
(0004) void delay_1ms(void)
(0005) {
(0006)     int i;
(0007)     //XTAL*143-2 = 1142
(0008)     for(i=1;i<1142;i++);
_delay_1ms:
  i                    --> R16
    0244 E001      LDI	R16,1
    0245 E010      LDI	R17,0
    0246 5F0F      SUBI	R16,0xFF
    0247 4F1F      SBCI	R17,0xFF
    0248 3706      CPI	R16,0x76
    0249 E0E4      LDI	R30,4
    024A 071E      CPC	R17,R30
    024B F3D4      BLT	0x0246
    024C 9508      RET
_delay_ms:
  i                    --> R20
  ms                   --> R22
    024D 940E0868  CALL	push_gset2
    024F 01B8      MOVW	R22,R16
(0009) }
(0010) //=========================================
(0011) void delay_ms(int ms)
(0012) {
(0013)     int i=0;
    0250 2744      CLR	R20
    0251 2755      CLR	R21
    0252 C003      RJMP	0x0256
(0014)     while(i<ms)
(0015)     {
(0016)         delay_1ms();
    0253 DFF0      RCALL	_delay_1ms
(0017)         i++;
    0254 5F4F      SUBI	R20,0xFF
    0255 4F5F      SBCI	R21,0xFF
    0256 1746      CP	R20,R22
    0257 0757      CPC	R21,R23
    0258 F3D4      BLT	0x0253
    0259 940E085A  CALL	pop_gset2
    025B 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\tips.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "tips.h"
(0005) #include "util.h"
(0006) 
(0007) #define BEEP_ON (PORTD&=0xef)
(0008) #define BEEP_OFF (PORTD|=0x10)
(0009) #define LED_ON (PORTD&=0xdf)
(0010) #define LED_OFF (PORTD|=0x20)
(0011) 
(0012) //pd4 beep,pd5 led.
(0013) void tips_port_init(void)
(0014) {
(0015)     //PIND4 & PIND5 OUTPUT AND pull-up resistors.
(0016)     PORTD |= 0x30;
_tips_port_init:
    025C B382      IN	R24,0x12
    025D 6380      ORI	R24,0x30
    025E BB82      OUT	0x12,R24
(0017)     DDRD |= 0x30;
    025F B381      IN	R24,0x11
    0260 6380      ORI	R24,0x30
    0261 BB81      OUT	0x11,R24
(0018)     return;
    0262 9508      RET
(0019) }
(0020) //led on.
(0021) void tips_led_on(void)
(0022) {
(0023)     LED_ON;
_tips_led_on:
    0263 B382      IN	R24,0x12
    0264 7D8F      ANDI	R24,0xDF
    0265 BB82      OUT	0x12,R24
(0024)     return;
    0266 9508      RET
(0025) }
(0026) //led off.
(0027) void tips_led_off(void)
(0028) {
(0029)     LED_OFF;
_tips_led_off:
    0267 9A95      SBI	0x12,5
(0030)     return;
    0268 9508      RET
(0031) }
(0032) //beep on.
(0033) void tips_beep_on(void)
(0034) {
(0035)     BEEP_ON;
_tips_beep_on:
    0269 B382      IN	R24,0x12
    026A 7E8F      ANDI	R24,0xEF
    026B BB82      OUT	0x12,R24
(0036)     return;
    026C 9508      RET
(0037) }
(0038) //beep off.
(0039) void tips_beep_off(void)
(0040) {
(0041)     BEEP_OFF;
_tips_beep_off:
    026D 9A94      SBI	0x12,4
(0042)     return;
    026E 9508      RET
(0043) }
(0044) //__------__ 6 pices.pice per 0.4 seconds.
(0045) void tips_ok(void)
(0046) {
(0047)     LED_ON;
_tips_ok:
    026F B382      IN	R24,0x12
    0270 7D8F      ANDI	R24,0xDF
    0271 BB82      OUT	0x12,R24
    0272 940E0AB0  CALL	0xAB0
(0048)     BEEP_ON;
(0049)     //2.4 seconds.
(0050)     delay_ms(400);
    0274 DFD8      RCALL	_delay_ms
(0051)     LED_OFF;
    0275 9A95      SBI	0x12,5
(0052)     BEEP_OFF;
    0276 9A94      SBI	0x12,4
(0053)     return;
    0277 9508      RET
(0054) }
(0055) //_-_-___-_-_
(0056) void tips_err(void)
(0057) {
(0058)     BEEP_ON;
_tips_err:
    0278 940E0A62  CALL	0xA62
(0059)     delay_ms(100);
    027A DFD2      RCALL	_delay_ms
(0060)     BEEP_OFF;
    027B 9A94      SBI	0x12,4
(0061)     delay_ms(100);
    027C E604      LDI	R16,0x64
    027D E010      LDI	R17,0
    027E DFCE      RCALL	_delay_ms
    027F 940E0A62  CALL	0xA62
(0062)     BEEP_ON;
(0063)     delay_ms(100);
    0281 DFCB      RCALL	_delay_ms
(0064)     BEEP_OFF;
    0282 9A94      SBI	0x12,4
(0065)  
(0066)     delay_ms(200);
    0283 EC08      LDI	R16,0xC8
    0284 E010      LDI	R17,0
    0285 DFC7      RCALL	_delay_ms
    0286 940E0A62  CALL	0xA62
(0067)  
(0068)     BEEP_ON;
(0069)     delay_ms(100);
    0288 DFC4      RCALL	_delay_ms
(0070)     BEEP_OFF;
    0289 9A94      SBI	0x12,4
(0071)     delay_ms(100);
    028A E604      LDI	R16,0x64
    028B E010      LDI	R17,0
    028C DFC0      RCALL	_delay_ms
    028D 940E0A62  CALL	0xA62
(0072)     BEEP_ON;
(0073)     delay_ms(100);
    028F DFBD      RCALL	_delay_ms
(0074)     BEEP_OFF;
    0290 9A94      SBI	0x12,4
(0075)     return;
    0291 9508      RET
(0076) }
(0077) //_----_-_-_
(0078) void tips_id_ok(void)
(0079) {
(0080)     BEEP_ON;
_tips_id_ok:
    0292 B382      IN	R24,0x12
    0293 7E8F      ANDI	R24,0xEF
    0294 BB82      OUT	0x12,R24
(0081)     delay_ms(200);
    0295 EC08      LDI	R16,0xC8
    0296 E010      LDI	R17,0
    0297 DFB5      RCALL	_delay_ms
(0082)     BEEP_OFF;
    0298 9A94      SBI	0x12,4
(0083)     delay_ms(200);
    0299 EC08      LDI	R16,0xC8
    029A E010      LDI	R17,0
    029B DFB1      RCALL	_delay_ms
    029C 940E0A62  CALL	0xA62
(0084) 
(0085)     BEEP_ON;
(0086)     delay_ms(100);
    029E DFAE      RCALL	_delay_ms
(0087)     BEEP_OFF;
    029F 9A94      SBI	0x12,4
(0088)     delay_ms(100);
    02A0 E604      LDI	R16,0x64
    02A1 E010      LDI	R17,0
    02A2 DFAA      RCALL	_delay_ms
    02A3 940E0A62  CALL	0xA62
(0089)     BEEP_ON;
(0090)     delay_ms(100);
    02A5 DFA7      RCALL	_delay_ms
(0091)     BEEP_OFF;
    02A6 9A94      SBI	0x12,4
(0092)     return;
    02A7 9508      RET
(0093) }
(0094) //__------__-----__
(0095) void tips_ring_on(void)
(0096) {
(0097)     BEEP_ON;
_tips_ring_on:
    02A8 940E0AB0  CALL	0xAB0
(0098)     //2.4 seconds.
(0099)     delay_ms(400);
    02AA DFA2      RCALL	_delay_ms
(0100)     BEEP_OFF;
    02AB 9A94      SBI	0x12,4
(0101)     delay_ms(400);
    02AC E900      LDI	R16,0x90
    02AD E011      LDI	R17,1
    02AE DF9E      RCALL	_delay_ms
    02AF 940E0AB0  CALL	0xAB0
(0102)     BEEP_ON;
(0103)     //2.4 seconds.
(0104)     delay_ms(400);
    02B1 DF9B      RCALL	_delay_ms
(0105)     BEEP_OFF;
    02B2 9A94      SBI	0x12,4
(0106)     return;
    02B3 9508      RET
_readPasswordItemNum:
  num                  --> Y+3
    02B4 9724      SBIW	R28,4
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\password.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "log.h"
(0005) #include "locker.h"
(0006) #include "tips.h"
(0007) #include "timer.h"
(0008) #include "eeprom.h"
(0009) #include "password.h"
(0010) 
(0011) //eeprom 
(0012) //addr: 0 number.
(0013) 
(0014) // 1: flags
(0015) // 2,3,4,5: id Card.
(0016) // 6,7,8,9: password H
(0017) // 10,11,12,13 :password L
(0018) 
(0019) // 14: flags
(0020) // 15,16,17,18: id Card.
(0021) // 19,20,21,22: password H
(0022) // 23,24,25,26 :password L
(0023) 
(0024) unsigned char readPasswordItemNum(void)
(0025) {
(0026)     unsigned char num = 0;
    02B5 2422      CLR	R2
    02B6 822B      STD	Y+3,R2
(0027) 
(0028)     rw24c256(&num, 1, 0, RW24C256READ);
    02B7 E081      LDI	R24,1
    02B8 838A      STD	Y+2,R24
    02B9 940E0AD0  CALL	0xAD0
    02BB D301      RCALL	_rw24c256
(0029)     return num;
    02BC 810B      LDD	R16,Y+3
    02BD 9624      ADIW	R28,4
    02BE 9508      RET
_readPasswordItem:
  t                    --> Y+20
  item                 --> Y+7
  tmp                  --> Y+3
  index                --> R12
    02BF 940E0864  CALL	push_gset4
    02C1 2EC2      MOV	R12,R18
    02C2 0158      MOVW	R10,R16
    02C3 9765      SBIW	R28,0x15
(0030) }
(0031) 
(0032) passwordItem_t readPasswordItem(unsigned char index)
(0033) {
(0034)     passwordItem_t item;
(0035)     unsigned char t = 0;
    02C4 2422      CLR	R2
    02C5 8A2C      STD	Y+20,R2
    02C6 940E09E8  CALL	0x9E8
(0036)     unsigned long tmp = 0;
(0037) 
(0038)     rw24c256(&t, 1, index*13+1, RW24C256READ);
    02C8 9601      ADIW	R24,1
    02C9 940E0AEC  CALL	0xAEC
    02CB 5E0C      SUBI	R16,0xEC
    02CC 4F1F      SBCI	R17,0xFF
    02CD D2EF      RCALL	_rw24c256
(0039)     item.flags = t;
    02CE 882C      LDD	R2,Y+20
    02CF 822F      STD	Y+7,R2
    02D0 940E09E8  CALL	0x9E8
(0040) 
(0041)     tmp = 0;
(0042)     rw24c256((unsigned char*)&tmp, 4, index*13+2, RW24C256READ);
    02D2 9602      ADIW	R24,2
    02D3 940E0A3A  CALL	0xA3A
    02D5 D2E7      RCALL	_rw24c256
    02D6 940E0AA9  CALL	0xAA9
(0043)     item.idCard = tmp;
    02D8 8620      STD	Z+8,R2
    02D9 8631      STD	Z+9,R3
    02DA 8642      STD	Z+10,R4
    02DB 8653      STD	Z+11,R5
    02DC 940E09E8  CALL	0x9E8
(0044)     
(0045)     tmp = 0;
(0046)     rw24c256((unsigned char*)&tmp, 4, index*13+6, RW24C256READ);
    02DE 9606      ADIW	R24,6
    02DF 940E0A3A  CALL	0xA3A
    02E1 D2DB      RCALL	_rw24c256
    02E2 940E0AA9  CALL	0xAA9
(0047)     item.passwordH = tmp;
    02E4 8624      STD	Z+12,R2
    02E5 8635      STD	Z+13,R3
    02E6 8646      STD	Z+14,R4
    02E7 8657      STD	Z+15,R5
    02E8 940E09E8  CALL	0x9E8
(0048)     
(0049)     tmp = 0;
(0050)     rw24c256((unsigned char*)&tmp, 4, index*13+10, RW24C256READ);
    02EA 960A      ADIW	R24,0xA
    02EB 940E0A3A  CALL	0xA3A
    02ED D2CF      RCALL	_rw24c256
    02EE 940E0AA9  CALL	0xAA9
(0051)     item.passwordL = tmp;
    02F0 8A20      STD	Z+16,R2
    02F1 8A31      STD	Z+17,R3
    02F2 8A42      STD	Z+18,R4
    02F3 8A53      STD	Z+19,R5
(0052)     
(0053)     return item;
    02F4 01CE      MOVW	R24,R28
    02F5 9607      ADIW	R24,7
    02F6 E00D      LDI	R16,0xD
    02F7 E010      LDI	R17,0
    02F8 92BA      ST	R11,-Y
    02F9 92AA      ST	R10,-Y
    02FA 939A      ST	R25,-Y
    02FB 938A      ST	R24,-Y
    02FC 940E08D9  CALL	asgnblk
    02FE 9665      ADIW	R28,0x15
    02FF D55E      RCALL	pop_gset4
    0300 9508      RET
_insertPasswordItem:
  tmp                  --> Y+3
  item                 --> R12
  index                --> R10
    0301 D562      RCALL	push_gset4
    0302 0169      MOVW	R12,R18
    0303 2EA0      MOV	R10,R16
    0304 9727      SBIW	R28,7
    0305 940E0A23  CALL	0xA23
(0054) }
(0055) 
(0056) void insertPasswordItem(unsigned char index, passwordItem_t item)
(0057) {
(0058)     unsigned long tmp = 0;
    0307 01FE      MOVW	R30,R28
    0308 8343      STD	Z+3,R20
    0309 8354      STD	Z+4,R21
    030A 8365      STD	Z+5,R22
    030B 8376      STD	Z+6,R23
(0059) 
(0060)     rw24c256(&(item.flags), 1, index*13+1, RW24C256WRITE);
    030C 2422      CLR	R2
    030D 822A      STD	Y+2,R2
    030E E08D      LDI	R24,0xD
    030F 9D8A      MUL	R24,R10
    0310 01C0      MOVW	R24,R0
    0311 9601      ADIW	R24,1
    0312 8399      STD	Y+1,R25
    0313 8388      STD	Y+0,R24
    0314 E021      LDI	R18,1
    0315 0186      MOVW	R16,R12
    0316 D2A6      RCALL	_rw24c256
(0061) 
(0062)     tmp = item.idCard;
    0317 01F6      MOVW	R30,R12
    0318 8021      LDD	R2,Z+1
    0319 8032      LDD	R3,Z+2
    031A 8043      LDD	R4,Z+3
    031B 8054      LDD	R5,Z+4
    031C 940E0A57  CALL	0xA57
(0063)     rw24c256((unsigned char*)&tmp, 4, index*13+2, RW24C256WRITE);
    031E 9602      ADIW	R24,2
    031F 940E0A3A  CALL	0xA3A
    0321 D29B      RCALL	_rw24c256
(0064)     
(0065)     tmp = item.passwordH;
    0322 01F6      MOVW	R30,R12
    0323 8025      LDD	R2,Z+5
    0324 8036      LDD	R3,Z+6
    0325 8047      LDD	R4,Z+7
    0326 8450      LDD	R5,Z+8
    0327 940E0A57  CALL	0xA57
(0066)     rw24c256((unsigned char*)&tmp, 4, index*13+6, RW24C256WRITE);
    0329 9606      ADIW	R24,6
    032A 940E0A3A  CALL	0xA3A
    032C D290      RCALL	_rw24c256
(0067)     
(0068)     tmp = item.passwordL;
    032D 01F6      MOVW	R30,R12
    032E 8421      LDD	R2,Z+9
    032F 8432      LDD	R3,Z+10
    0330 8443      LDD	R4,Z+11
    0331 8454      LDD	R5,Z+12
    0332 940E0A57  CALL	0xA57
(0069)     rw24c256((unsigned char*)&tmp, 4, index*13+10, RW24C256WRITE);
    0334 960A      ADIW	R24,0xA
    0335 940E0A3A  CALL	0xA3A
    0337 D285      RCALL	_rw24c256
(0070) 
(0071)     return;
    0338 9627      ADIW	R28,7
    0339 D524      RCALL	pop_gset4
    033A 9508      RET
_writePasswordItemNum:
  num                  --> Y+3
    033B 931A      ST	R17,-Y
    033C 930A      ST	R16,-Y
    033D 9723      SBIW	R28,3
(0072) }
(0073) 
(0074) void writePasswordItemNum(unsigned char num)
(0075) {
(0076)     rw24c256(&num, 1, 0, RW24C256WRITE);
    033E 2422      CLR	R2
    033F 822A      STD	Y+2,R2
    0340 940E0AD0  CALL	0xAD0
    0342 D27A      RCALL	_rw24c256
(0077)     return;
    0343 9625      ADIW	R28,5
    0344 9508      RET
_clear_pswd_status:
    0345 D522      RCALL	push_gset2
    0346 940E0A9F  CALL	0xA9F
(0078) }
(0079) 
(0080) #define PASSWORDREADIDCARDUNKOWN    0
(0081) #define PASSWORDREADIDCARDOK                1
(0082) #define PASSWORDREADIDANDPSWDOK         2
(0083) 
(0084) static unsigned char password_read_flags = 0;
(0085) static unsigned char current_index = 0;
(0086) static unsigned char input_err_count = 0;
(0087) 
(0088) //You input xxx then password is 1xxx.
(0089) static unsigned long passwordH = 1;
(0090) static unsigned long passwordL = 1;
(0091) 
(0092) static void clear_pswd_status(void)
(0093) {
(0094)     //clear last password input.
(0095)     passwordH = 1;
    0348 93500076  STS	passwordH+1,R21
    034A 93400075  STS	passwordH,R20
    034C 93700078  STS	passwordH+3,R23
    034E 93600077  STS	passwordH+2,R22
    0350 940E0A6D  CALL	0xA6D
(0096)     passwordL = 1;
(0097)     tips_led_off();
    0352 DF14      RCALL	_tips_led_off
(0098)     password_read_flags = PASSWORDREADIDCARDUNKOWN;
    0353 2422      CLR	R2
    0354 92200072  STS	password_read_flags,R2
(0099)     current_index = 0;
    0356 92200073  STS	current_index,R2
(0100)     stop_timer(PASSWORDTIMEOUTTIMER);
    0358 E001      LDI	R16,1
    0359 D16D      RCALL	_stop_timer
(0101)     return;
    035A D4FF      RCALL	pop_gset2
    035B 9508      RET
(0102) }
(0103) 
(0104) //cannot input timeout.
(0105) static void cannot_input_time_out(char timer)
(0106) {
(0107)     if(timer==PASSWORDTIMEOUTTIMER)
_cannot_input_time_out:
  timer                --> R16
    035C 3001      CPI	R16,1
    035D F419      BNE	0x0361
(0108)         input_err_count = 0;
    035E 2422      CLR	R2
    035F 92200074  STS	input_err_count,R2
(0109)     return;
    0361 9508      RET
_input_time_out:
  timer                --> R20
    0362 D507      RCALL	push_gset1
    0363 2F40      MOV	R20,R16
(0110) }
(0111) 
(0112) //input timeout.
(0113) static void input_time_out(char timer)
(0114) {
(0115)     if(timer==PASSWORDTIMEOUTTIMER)
    0364 3041      CPI	R20,1
    0365 F409      BNE	0x0367
(0116)         clear_pswd_status();
    0366 DFDE      RCALL	_clear_pswd_status
(0117)     return;
    0367 D505      RCALL	pop_gset1
    0368 9508      RET
_password_handle:
  current_item         --> Y+25
  pswd_item_num        --> R10
  i                    --> R12
  item                 --> Y+12
  code                 --> Y+48
  type                 --> R14
    0369 933A      ST	R19,-Y
    036A 932A      ST	R18,-Y
    036B D4F6      RCALL	push_gset5
    036C 2EE0      MOV	R14,R16
    036D 97A6      SBIW	R28,0x26
(0118) }
(0119) 
(0120) void password_handle(char type, unsigned long code)
(0121) {
(0122)     unsigned char pswd_item_num = 0;
    036E 24AA      CLR	R10
(0123)     unsigned char i;
(0124)     passwordItem_t item;
(0125) 
(0126)     //if input error count is too large.
(0127)     if(input_err_count>5)
    036F E085      LDI	R24,5
    0370 90200074  LDS	R2,input_err_count
    0372 1582      CP	R24,R2
    0373 F440      BCC	0x037C
(0128)     {
(0129)         clear_pswd_status();
    0374 DFD0      RCALL	_clear_pswd_status
(0130)         tips_err();
    0375 DF02      RCALL	_tips_err
(0131)         //set time out. 200ms*5*60
(0132)         set_timer(PASSWORDTIMEOUTTIMER, 300, cannot_input_time_out);
    0376 E588      LDI	R24,0x58
    0377 940E0ABC  CALL	0xABC
    0379 E001      LDI	R16,1
    037A D12C      RCALL	_set_timer
(0133)         return;
    037B C118      RJMP	0x0494
(0134)     }
(0135)  
(0136)     //read a card.
(0137)     if(type==IDREADEDIDCARD)
    037C 20EE      TST	R14
    037D F009      BEQ	0x037F
    037E C040      RJMP	0x03BF
(0138)     {
(0139)         clear_pswd_status();
    037F DFC5      RCALL	_clear_pswd_status
(0140)         //read paswd item num.
(0141)         pswd_item_num = readPasswordItemNum();
    0380 DF33      RCALL	_readPasswordItemNum
    0381 2EA0      MOV	R10,R16
(0142)         //loop find it.
(0143)         for(i=0;i<pswd_item_num;++i)
    0382 24CC      CLR	R12
    0383 C02E      RJMP	0x03B2
(0144)         {
(0145)             //read a item.
(0146)             item = readPasswordItem(i);
    0384 940E0B17  CALL	0xB17
    0386 DF38      RCALL	_readPasswordItem
(0147)             //if item need id card, and is this id card.
(0148)             if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
    0387 842C      LDD	R2,Y+12
    0388 FE20      SBRS	R2,0
    0389 C027      RJMP	0x03B1
    038A 01FE      MOVW	R30,R28
    038B A820      LDD	R2,Z+48
    038C A831      LDD	R3,Z+49
    038D A842      LDD	R4,Z+50
    038E A853      LDD	R5,Z+51
    038F 01FE      MOVW	R30,R28
    0390 8465      LDD	R6,Z+13
    0391 8476      LDD	R7,Z+14
    0392 8487      LDD	R8,Z+15
    0393 8890      LDD	R9,Z+16
    0394 940E0A94  CALL	0xA94
    0396 F009      BEQ	0x0398
    0397 C019      RJMP	0x03B1
(0149)             {
(0150)                 //need paswd.
(0151)                 if(item.flags&PASSWORDFLAGS_PASSWORD)
    0398 842C      LDD	R2,Y+12
    0399 FE21      SBRS	R2,1
    039A C00A      RJMP	0x03A5
(0152)                 {
(0153)                     //id card ok, but need password.
(0154)                     //tips_id_ok();
(0155)                     //id card ok, but not input password, led on.
(0156)                     tips_led_on();
    039B DEC7      RCALL	_tips_led_on
(0157)                     current_index = i;
    039C 92C00073  STS	current_index,R12
(0158)                     password_read_flags = PASSWORDREADIDCARDOK;
    039E E081      LDI	R24,1
    039F 93800072  STS	password_read_flags,R24
    03A1 940E0AD8  CALL	0xAD8
(0159)                     //set time out. 200ms*5*30
(0160)                     set_timer(PASSWORDTIMEOUTTIMER, 150, input_time_out);
    03A3 D103      RCALL	_set_timer
(0161)                 }
    03A4 C0EF      RJMP	0x0494
(0162)                 else //only id card.
(0163)                 {
(0164)                     //record log
(0165)                     log(LOGTYPEIDOK, i, code, 0, 0);
    03A5 940E09F7  CALL	0x9F7
    03A7 2D2C      MOV	R18,R12
    03A8 E001      LDI	R16,1
    03A9 D18B      RCALL	_log
(0166)                     //clear pswd statuc.
(0167)                     clear_pswd_status();
    03AA DF9A      RCALL	_clear_pswd_status
(0168)                     tips_ok();
    03AB DEC3      RCALL	_tips_ok
(0169)                     locker_unlock();
    03AC D18A      RCALL	_locker_unlock
(0170)                     //error count clear.
(0171)                     input_err_count = 0;
    03AD 2422      CLR	R2
    03AE 92200074  STS	input_err_count,R2
(0172)                 } //else
(0173)                 return;
    03B0 C0E3      RJMP	0x0494
    03B1 94C3      INC	R12
    03B2 14CA      CP	R12,R10
    03B3 F408      BCC	0x03B5
    03B4 CFCF      RJMP	0x0384
(0174)             }  //if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
(0175)         }	  //for(i=0;i<pswd_item_num;++i)
(0176)         //unkown id card.
(0177)         log(LOGTYPEIDERR, 0, code, 0, 0);
    03B5 940E09F7  CALL	0x9F7
    03B7 2722      CLR	R18
    03B8 E002      LDI	R16,2
    03B9 D17B      RCALL	_log
(0178)         //clear password.
(0179)         clear_pswd_status();
    03BA DF8A      RCALL	_clear_pswd_status
(0180)         //error password and log.
(0181)         tips_err();
    03BB DEBC      RCALL	_tips_err
    03BC 940E0AC2  CALL	0xAC2
(0182)         //error count ++
(0183)         ++input_err_count;
(0184)         return;
    03BE C0D5      RJMP	0x0494
(0185)     }	  //if(type==IDREADEDIDCARD)
(0186)     else if(type==IDREADEDKEYPAD) // read a keypad input.
    03BF 2D8E      MOV	R24,R14
    03C0 3081      CPI	R24,1
    03C1 F009      BEQ	0x03C3
    03C2 C0D1      RJMP	0x0494
(0187)     {
(0188)         code &= 0x0000000f;
    03C3 E04F      LDI	R20,0xF
    03C4 940E0A4D  CALL	0xA4D
    03C6 940E0A68  CALL	0xA68
    03C8 940E0B0D  CALL	0xB0D
    03CA 01FE      MOVW	R30,R28
    03CB AA20      STD	Z+48,R2
    03CC AA31      STD	Z+49,R3
    03CD AA42      STD	Z+50,R4
    03CE AA53      STD	Z+51,R5
(0189)         if(code == 0x0000000a)  //*
    03CF E04A      LDI	R20,0xA
    03D0 940E0A4D  CALL	0xA4D
    03D2 940E0A68  CALL	0xA68
    03D4 940E0B08  CALL	0xB08
    03D6 F411      BNE	0x03D9
(0190)         {
(0191)             //clear password.
(0192)             clear_pswd_status();
    03D7 DF6D      RCALL	_clear_pswd_status
(0193)         }
    03D8 C0BB      RJMP	0x0494
(0194)         else if(code == 0x0000000b) //#
    03D9 E04B      LDI	R20,0xB
    03DA 940E0A4D  CALL	0xA4D
    03DC 940E0A68  CALL	0xA68
    03DE 940E0B08  CALL	0xB08
    03E0 F009      BEQ	0x03E2
    03E1 C07D      RJMP	0x045F
(0195)         {
(0196)             //need id card password.
(0197)             if(password_read_flags==PASSWORDREADIDCARDOK)
    03E2 91800072  LDS	R24,password_read_flags
    03E4 3081      CPI	R24,1
    03E5 F009      BEQ	0x03E7
    03E6 C035      RJMP	0x041C
(0198)             {
(0199)                 passwordItem_t current_item = readPasswordItem(current_index);
    03E7 91200073  LDS	R18,current_index
    03E9 018E      MOVW	R16,R28
    03EA 5E07      SUBI	R16,0xE7
    03EB 4F1F      SBCI	R17,0xFF
    03EC DED2      RCALL	_readPasswordItem
    03ED 940E0A11  CALL	0xA11
(0200)                 //password is ok.
(0201)                 if((current_item.passwordH==passwordH)&&(current_item.passwordL==passwordL))
    03EF 01FE      MOVW	R30,R28
    03F0 8C66      LDD	R6,Z+30
    03F1 8C77      LDD	R7,Z+31
    03F2 A080      LDD	R8,Z+32
    03F3 A091      LDD	R9,Z+33
    03F4 940E0A94  CALL	0xA94
    03F6 F009      BEQ	0x03F8
    03F7 C017      RJMP	0x040F
    03F8 940E0A28  CALL	0xA28
    03FA 01FE      MOVW	R30,R28
    03FB A062      LDD	R6,Z+34
    03FC A073      LDD	R7,Z+35
    03FD A084      LDD	R8,Z+36
    03FE A095      LDD	R9,Z+37
    03FF 940E0A94  CALL	0xA94
    0401 F469      BNE	0x040F
    0402 940E09CE  CALL	0x9CE
    0404 940E0A7A  CALL	0xA7A
(0202)                 {
(0203)                     log(LOGTYPEIDANDPSWDOK, current_index, current_item.idCard, passwordH, passwordL);
    0406 E003      LDI	R16,3
    0407 D12D      RCALL	_log
(0204)                     //clear password status.
(0205)                     clear_pswd_status();
    0408 DF3C      RCALL	_clear_pswd_status
(0206)                     //unlock and write log.
(0207)                     tips_ok();
    0409 DE65      RCALL	_tips_ok
(0208)                     locker_unlock();
    040A D12C      RCALL	_locker_unlock
(0209)                     //error count clear.
(0210)                     input_err_count = 0;
    040B 2422      CLR	R2
    040C 92200074  STS	input_err_count,R2
(0211)                 }
    040E C085      RJMP	0x0494
(0212)                 else //password is error.
(0213)                 {
(0214)                     log(LOGTYPEIDANDPSWDERR, current_index, current_item.idCard, passwordH, passwordL);
    040F 940E0A28  CALL	0xA28
    0411 940E09CE  CALL	0x9CE
    0413 940E0A7A  CALL	0xA7A
    0415 E004      LDI	R16,4
    0416 D11E      RCALL	_log
(0215)                     //clear password.
(0216)                     clear_pswd_status();
    0417 DF2D      RCALL	_clear_pswd_status
(0217)                     //error password and log.
(0218)                     tips_err();
    0418 DE5F      RCALL	_tips_err
    0419 940E0AC2  CALL	0xAC2
(0219)                     //error count ++.
(0220)                     ++input_err_count;
(0221)                 }
(0222)             }
    041B C078      RJMP	0x0494
(0223)             else //only password.
(0224)             {
(0225)                 //read paswd item num.
(0226)                 pswd_item_num = readPasswordItemNum();
    041C DE97      RCALL	_readPasswordItemNum
    041D 2EA0      MOV	R10,R16
(0227)                 //loop find it.
(0228)                 for(i=0;i<pswd_item_num;++i)
    041E 24CC      CLR	R12
    041F C02C      RJMP	0x044C
(0229)                 {
(0230)                     //read a item.
(0231)                     item = readPasswordItem(i);
    0420 940E0B17  CALL	0xB17
    0422 DE9C      RCALL	_readPasswordItem
(0232)                     //if item need id card, and is this id card.
(0233)                     if((item.flags==PASSWORDFLAGS_PASSWORD)&&(item.passwordH==passwordH)
    0423 858C      LDD	R24,Y+12
    0424 3082      CPI	R24,2
    0425 F009      BEQ	0x0427
    0426 C024      RJMP	0x044B
    0427 940E0A11  CALL	0xA11
    0429 01FE      MOVW	R30,R28
    042A 8861      LDD	R6,Z+17
    042B 8872      LDD	R7,Z+18
    042C 8883      LDD	R8,Z+19
    042D 8894      LDD	R9,Z+20
    042E 940E0A94  CALL	0xA94
    0430 F4D1      BNE	0x044B
    0431 940E0A28  CALL	0xA28
    0433 01FE      MOVW	R30,R28
    0434 8865      LDD	R6,Z+21
    0435 8876      LDD	R7,Z+22
    0436 8887      LDD	R8,Z+23
    0437 8C90      LDD	R9,Z+24
    0438 940E0A94  CALL	0xA94
    043A F481      BNE	0x044B
    043B 940E09CE  CALL	0x9CE
    043D 940E0A23  CALL	0xA23
    043F 940E0B21  CALL	0xB21
(0234)                         &&(item.passwordL==passwordL))
(0235)                     {
(0236)                         log(LOGTYPEPSWDOK, i, 0, passwordH, passwordL);
    0441 2D2C      MOV	R18,R12
    0442 E005      LDI	R16,5
    0443 D0F1      RCALL	_log
(0237)                         //clear password.
(0238)                         clear_pswd_status();
    0444 DF00      RCALL	_clear_pswd_status
(0239)                         //password is right. unlock and log.
(0240)                         tips_ok();
    0445 DE29      RCALL	_tips_ok
(0241)                         locker_unlock();
    0446 D0F0      RCALL	_locker_unlock
(0242)                         //error count clear.
(0243)                         input_err_count = 0;
    0447 2422      CLR	R2
    0448 92200074  STS	input_err_count,R2
(0244)                         return;
    044A C049      RJMP	0x0494
    044B 94C3      INC	R12
    044C 14CA      CP	R12,R10
    044D F408      BCC	0x044F
    044E CFD1      RJMP	0x0420
(0245)                     }
(0246)                 }
(0247)                 //password is error.
(0248)                 log(LOGTYPEPSWDERR, 0, 0, passwordH, passwordL);
    044F 940E0A28  CALL	0xA28
    0451 940E09CE  CALL	0x9CE
    0453 940E0A23  CALL	0xA23
    0455 940E0B21  CALL	0xB21
    0457 2722      CLR	R18
    0458 E006      LDI	R16,6
    0459 D0DB      RCALL	_log
(0249)                 //clear password.
(0250)                 clear_pswd_status();
    045A DEEA      RCALL	_clear_pswd_status
(0251)                 //password is error, and log.
(0252)                 tips_err();
    045B DE1C      RCALL	_tips_err
    045C 940E0AC2  CALL	0xAC2
(0253)                 //error count++.
(0254)                 ++input_err_count;
(0255)                 return;
    045E C035      RJMP	0x0494
(0256)             }
(0257)         }
(0258)         else
(0259)         {
(0260)             tips_led_on();
    045F DE03      RCALL	_tips_led_on
    0460 940E0AD8  CALL	0xAD8
(0261)             //set time out. 200ms*5*30
(0262)             set_timer(PASSWORDTIMEOUTTIMER, 150, input_time_out);
    0462 D044      RCALL	_set_timer
    0463 940E0A28  CALL	0xA28
(0263)             passwordL = passwordL*10 + code;
    0465 E04A      LDI	R20,0xA
    0466 E050      LDI	R21,0
    0467 E060      LDI	R22,0
    0468 E070      LDI	R23,0
    0469 940E0B30  CALL	0xB30
    046B 018A      MOVW	R16,R20
    046C 019B      MOVW	R18,R22
    046D D3C0      RCALL	empy32u
    046E 0118      MOVW	R2,R16
    046F 0129      MOVW	R4,R18
    0470 01FE      MOVW	R30,R28
    0471 A860      LDD	R6,Z+48
    0472 A871      LDD	R7,Z+49
    0473 A882      LDD	R8,Z+50
    0474 A893      LDD	R9,Z+51
    0475 0C26      ADD	R2,R6
    0476 1C37      ADC	R3,R7
    0477 1C48      ADC	R4,R8
    0478 1C59      ADC	R5,R9
    0479 9230007A  STS	passwordL+1,R3
    047B 92200079  STS	passwordL,R2
    047D 9250007C  STS	passwordL+3,R5
    047F 9240007B  STS	passwordL+2,R4
(0264)             //passwordH save password hight 9 num.
(0265)             if(passwordL>999999999)
    0481 EF4F      LDI	R20,0xFF
    0482 EC59      LDI	R21,0xC9
    0483 E96A      LDI	R22,0x9A
    0484 E37B      LDI	R23,0x3B
    0485 1542      CP	R20,R2
    0486 0553      CPC	R21,R3
    0487 0564      CPC	R22,R4
    0488 0575      CPC	R23,R5
    0489 F450      BCC	0x0494
(0266)             {
(0267)                 passwordH = passwordL;
    048A 92300076  STS	passwordH+1,R3
    048C 92200075  STS	passwordH,R2
    048E 92500078  STS	passwordH+3,R5
    0490 92400077  STS	passwordH+2,R4
    0492 940E0A6D  CALL	0xA6D
(0268)                 passwordL = 1;
(0269)             }
(0270)         }
(0271)     }
(0272)     return;
    0494 96A6      ADIW	R28,0x26
    0495 D3CA      RCALL	pop_gset5
    0496 9622      ADIW	R28,2
    0497 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\timer.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "timer.h"
(0005) 
(0006) void timer_init(void)
(0007) {
(0008)     //enable interrupt.
(0009)     SREG |= 0x80;
_timer_init:
    0498 9478      BSET	7
(0010)     //timer0 normal mode.ck/1024.
(0011)     TCCR0 |= 0x05;
    0499 B783      IN	R24,0x33
    049A 6085      ORI	R24,5
    049B BF83      OUT	0x33,R24
(0012)     //init TCNT0.
(0013)     TCNT0 = 0;
    049C 2422      CLR	R2
    049D BE22      OUT	0x32,R2
(0014)     //TIMSK
(0015)     //TIMSK |= 0x01;
(0016)     return; 
    049E 9508      RET
(0017) }
(0018) //cpu timer0 start
(0019) static void t0_start(void)
(0020) {
(0021)     TIMSK |= 0x01;
_t0_start:
    049F B789      IN	R24,0x39
    04A0 6081      ORI	R24,1
    04A1 BF89      OUT	0x39,R24
(0022)     return;
    04A2 9508      RET
(0023) }
(0024) //cpu timer0 stop
(0025) static void t0_stop(void)
(0026) {
(0027)     TIMSK &= 0xfe;
_t0_stop:
    04A3 B789      IN	R24,0x39
    04A4 7F8E      ANDI	R24,0xFE
    04A5 BF89      OUT	0x39,R24
(0028)     return;
    04A6 9508      RET
_set_timer:
  cb                   --> Y+4
  value                --> R22
  timer                --> R20
    04A7 D3C0      RCALL	push_gset2
    04A8 01B9      MOVW	R22,R18
    04A9 2F40      MOV	R20,R16
(0029) }
(0030) //
(0031) static timer_t g_timer[MAXTIMER];
(0032) //set timer and start timer. set value 0, need wait a cpu timer pice.
(0033) void set_timer(char timer, int value, timerCB cb)
(0034) {
(0035)     //value=0, stoped timer.
(0036)     g_timer[timer].value = value+1;
    04AA E084      LDI	R24,4
    04AB 9F84      MUL	R24,R20
    04AC 940E0A41  CALL	0xA41
    04AE 01CB      MOVW	R24,R22
    04AF 9601      ADIW	R24,1
    04B0 8391      STD	Z+1,R25
    04B1 8380      STD	Z+0,R24
(0037)     g_timer[timer].cb = cb;
    04B2 E084      LDI	R24,4
    04B3 9F84      MUL	R24,R20
    04B4 940E0A8E  CALL	0xA8E
    04B6 800C      LDD	R0,Y+4
    04B7 801D      LDD	R1,Y+5
    04B8 8211      STD	Z+1,R1
    04B9 8200      STD	Z+0,R0
(0038)     if(g_timer[timer].value)
    04BA E084      LDI	R24,4
    04BB 9F84      MUL	R24,R20
    04BC 940E0A41  CALL	0xA41
    04BE 8020      LDD	R2,Z+0
    04BF 8031      LDD	R3,Z+1
    04C0 2022      TST	R2
    04C1 F411      BNE	0x04C4
    04C2 2033      TST	R3
    04C3 F009      BEQ	0x04C5
(0039)         t0_start();
    04C4 DFDA      RCALL	_t0_start
(0040)     return;
    04C5 D394      RCALL	pop_gset2
    04C6 9508      RET
(0041) }
(0042) //stop timer and clean timer.
(0043) void stop_timer(char timer)
(0044) {
(0045)     if(g_timer[timer].value)
_stop_timer:
  timer                --> R16
    04C7 E084      LDI	R24,4
    04C8 9F80      MUL	R24,R16
    04C9 940E0A41  CALL	0xA41
    04CB 8020      LDD	R2,Z+0
    04CC 8031      LDD	R3,Z+1
    04CD 2022      TST	R2
    04CE F411      BNE	0x04D1
    04CF 2033      TST	R3
    04D0 F059      BEQ	0x04DC
(0046)     {
(0047)         //stop this timer.
(0048)         g_timer[timer].value = 0;
    04D1 E084      LDI	R24,4
    04D2 9F80      MUL	R24,R16
    04D3 940E0A41  CALL	0xA41
    04D5 940E0AFD  CALL	0xAFD
(0049)         g_timer[timer].cb = 0;
    04D7 9F80      MUL	R24,R16
    04D8 940E0A8E  CALL	0xA8E
    04DA 8231      STD	Z+1,R3
    04DB 8220      STD	Z+0,R2
(0050)     }
(0051)     return;
    04DC 9508      RET
_timer0_isr:
  running_timer_count  --> R20
  i                    --> R22
    04DD D3D1      RCALL	push_lset
    04DE D389      RCALL	push_gset2
(0052) }
(0053) //timer spank.
(0054) #pragma interrupt_handler timer0_isr:10
(0055) void timer0_isr(void)
(0056) {
(0057)     static char time_pices = 0;
(0058)     ++time_pices;
    04DF 9180007D  LDS	R24,time_pices
    04E1 5F8F      SUBI	R24,0xFF
    04E2 9380007D  STS	time_pices,R24
(0059)     //200ms.
(0060)     if(time_pices == 5)
    04E4 3085      CPI	R24,5
    04E5 F009      BEQ	0x04E7
    04E6 C04B      RJMP	0x0532
(0061)     {
(0062)         char running_timer_count = 0;
    04E7 2744      CLR	R20
(0063)         char i;
(0064)         for(i=0;i<MAXTIMER;i++)
    04E8 2766      CLR	R22
    04E9 C03F      RJMP	0x0529
(0065)         {
(0066)             if(g_timer[i].value>1)
    04EA E084      LDI	R24,4
    04EB 9F86      MUL	R24,R22
    04EC 940E0A41  CALL	0xA41
    04EE 8020      LDD	R2,Z+0
    04EF 8031      LDD	R3,Z+1
    04F0 E081      LDI	R24,1
    04F1 E090      LDI	R25,0
    04F2 1582      CP	R24,R2
    04F3 0593      CPC	R25,R3
    04F4 F478      BCC	0x0504
(0067)             {
(0068)                 --g_timer[i].value;
    04F5 E084      LDI	R24,4
    04F6 9F86      MUL	R24,R22
    04F7 0110      MOVW	R2,R0
    04F8 E38D      LDI	R24,0x3D
    04F9 E091      LDI	R25,1
    04FA 0E28      ADD	R2,R24
    04FB 1E39      ADC	R3,R25
    04FC 01F1      MOVW	R30,R2
    04FD 8180      LDD	R24,Z+0
    04FE 8191      LDD	R25,Z+1
    04FF 9701      SBIW	R24,1
    0500 8391      STD	Z+1,R25
    0501 8380      STD	Z+0,R24
(0069)                 ++running_timer_count;
    0502 9543      INC	R20
(0070)             }
    0503 C024      RJMP	0x0528
(0071)             //timer call back.
(0072)             else if(g_timer[i].value==1)
    0504 E084      LDI	R24,4
    0505 9F86      MUL	R24,R22
    0506 940E0A41  CALL	0xA41
    0508 8180      LDD	R24,Z+0
    0509 8191      LDD	R25,Z+1
    050A 3081      CPI	R24,1
    050B E0E0      LDI	R30,0
    050C 079E      CPC	R25,R30
    050D F4D1      BNE	0x0528
(0073)             {
(0074)                 g_timer[i].value = 0;
    050E E084      LDI	R24,4
    050F 9F86      MUL	R24,R22
    0510 940E0A41  CALL	0xA41
    0512 940E0AFD  CALL	0xAFD
(0075)                 if(g_timer[i].cb)
    0514 9F86      MUL	R24,R22
    0515 940E0A8E  CALL	0xA8E
    0517 8020      LDD	R2,Z+0
    0518 8031      LDD	R3,Z+1
    0519 2022      TST	R2
    051A F411      BNE	0x051D
    051B 2033      TST	R3
    051C F059      BEQ	0x0528
(0076)                 {
(0077)                     //disable cpu timer.
(0078)                     t0_stop();
    051D DF85      RCALL	_t0_stop
(0079)                     (g_timer[i].cb)(i);
    051E 2F06      MOV	R16,R22
    051F E084      LDI	R24,4
    0520 9F86      MUL	R24,R22
    0521 940E0A8E  CALL	0xA8E
    0523 81A0      LDD	R26,Z+0
    0524 81B1      LDD	R27,Z+1
    0525 01FD      MOVW	R30,R26
    0526 D35A      RCALL	xicall
(0080)                     //enable cpu timer.
(0081)                     t0_start();
    0527 DF77      RCALL	_t0_start
    0528 9563      INC	R22
    0529 3064      CPI	R22,4
    052A F408      BCC	0x052C
    052B CFBE      RJMP	0x04EA
(0082)                 }
(0083)             }
(0084)         }
(0085)         time_pices = 0;
    052C 2422      CLR	R2
    052D 9220007D  STS	time_pices,R2
(0086)         //if no timer running, stop cpu timer.
(0087)         if(!running_timer_count) t0_stop();
    052F 2344      TST	R20
    0530 F409      BNE	0x0532
    0531 DF71      RCALL	_t0_stop
(0088)     }
(0089)     return;
    0532 D327      RCALL	pop_gset2
    0533 D38E      RCALL	pop_lset
    0534 9518      RETI
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\log.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "log.h"
(0004) 
(0005) void log(char type, unsigned char index, unsigned long id_code, unsigned long pswdH, unsigned long pswdL)
(0006) {
_log:
  pswdL                --> Y+12
  pswdH                --> Y+8
  id_code              --> Y+4
  index                --> Y+2
  type                 --> Y+0
    0535 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\locker.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "locker.h"
(0004) 
(0005) void locker_init(void)
(0006) {
_locker_init:
    0536 9508      RET
(0007) 
(0008) }
(0009) void locker_unlock(void)
(0010) {
_locker_unlock:
    0537 9508      RET
(0011) 
(0012) }
(0013) 
(0014) void locker_lock(void)
(0015) {
_locker_lock:
    0538 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\ringandscreen.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "util.h"
(0005) #include "tips.h"
(0006) #include "timer.h"
(0007) #include "ringandscreen.h"
(0008) 
(0009) //ring input pc0, screen key input pc1. door monitor input is pc2.
(0010) //screen power output pc3, screen reset output pc4. ring output pc5.
(0011) 
(0012) #define SCREEN_ON (PORTC&=0xf7)
(0013) #define SCREEN_OFF (PORTC|=0x04)
(0014) #define SCREEN_RESET_START (PORTC&=0xef)
(0015) #define SCREEN_RESET_STOP (PORTC|=0x10)
(0016) #define RING_ON (PORTC&=0xdf)
(0017) #define RING_OFF (PORTC&=0x20)
(0018) 
(0019) void ringandscreen_init(void)
(0020) {
(0021)     //PC0,PC1,PC2 INPUT.
(0022)     DDRC &= 0xf8;
_ringandscreen_init:
    0539 B384      IN	R24,0x14
    053A 7F88      ANDI	R24,0xF8
    053B BB84      OUT	0x14,R24
(0023)     //PC3,PC4,PC5 OUTPUT.
(0024)     DDRC |= 0x38;
    053C B384      IN	R24,0x14
    053D 6388      ORI	R24,0x38
    053E BB84      OUT	0x14,R24
(0025)     //
(0026)     PORTC = 0xff;
    053F EF8F      LDI	R24,0xFF
    0540 BB85      OUT	0x15,R24
(0027)     //init interrput.
(0028)     return;
    0541 9508      RET
(0029) }
(0030) 
(0031) static void disable_input(void)
(0032) {
_disable_input:
    0542 9508      RET
(0033) 
(0034) }
(0035) 
(0036) static void enable_input(void)
(0037) {
_enable_input:
    0543 9508      RET
(0038) 
(0039) }
(0040) 
(0041) void screen_on(void)
(0042) {
(0043)     if((PORTC&=0x04))
_screen_on:
    0544 B385      IN	R24,0x15
    0545 7084      ANDI	R24,4
    0546 BB85      OUT	0x15,R24
    0547 2388      TST	R24
    0548 F069      BEQ	0x0556
(0044)     {
(0045)         SCREEN_ON;
    0549 B385      IN	R24,0x15
    054A 7F87      ANDI	R24,0xF7
    054B BB85      OUT	0x15,R24
(0046)         delay_ms(500);
    054C EF04      LDI	R16,0xF4
    054D E011      LDI	R17,1
    054E DCFE      RCALL	_delay_ms
(0047)         SCREEN_RESET_START;
    054F B385      IN	R24,0x15
    0550 7E8F      ANDI	R24,0xEF
    0551 BB85      OUT	0x15,R24
(0048)         delay_ms(100);
    0552 E604      LDI	R16,0x64
    0553 E010      LDI	R17,0
    0554 DCF8      RCALL	_delay_ms
(0049)         SCREEN_RESET_STOP;
    0555 9AAC      SBI	0x15,4
(0050)     }
(0051)     return;
    0556 9508      RET
(0052) }
(0053) 
(0054) void screen_off(void)
(0055) {
(0056)     SCREEN_OFF;
_screen_off:
    0557 9AAA      SBI	0x15,2
(0057)     return;
    0558 9508      RET
(0058) }
(0059) 
(0060) void ring_on(void)
(0061) {
(0062)     RING_ON;
_ring_on:
    0559 B385      IN	R24,0x15
    055A 7D8F      ANDI	R24,0xDF
    055B BB85      OUT	0x15,R24
(0063)     delay_ms(20);
    055C E104      LDI	R16,0x14
    055D E010      LDI	R17,0
    055E DCEE      RCALL	_delay_ms
(0064)     RING_OFF;
    055F B385      IN	R24,0x15
    0560 7280      ANDI	R24,0x20
    0561 BB85      OUT	0x15,R24
(0065)     return;
    0562 9508      RET
_ring_screen_timeout:
  timer                --> R20
    0563 D306      RCALL	push_gset1
    0564 2F40      MOV	R20,R16
(0066) }
(0067) 
(0068) void ring_screen_timeout(char timer)
(0069) {
(0070)     if(timer==RINGANDSCREENINPUTTIMER)
    0565 3042      CPI	R20,2
    0566 F409      BNE	0x0568
(0071)     {
(0072)         screen_off();
    0567 DFEF      RCALL	_screen_off
(0073)     }
    0568 D304      RCALL	pop_gset1
    0569 9508      RET
_door_minitor_timeout:
  timer                --> R20
    056A D2FF      RCALL	push_gset1
    056B 2F40      MOV	R20,R16
    056C 9722      SBIW	R28,2
(0074) }
(0075) 
(0076) void door_minitor_timeout(char timer)
(0077) {
(0078)     if(timer==RINGANDSCREENINPUTTIMER)
    056D 3042      CPI	R20,2
    056E F449      BNE	0x0578
(0079)     {
(0080)         tips_err();
    056F DD08      RCALL	_tips_err
(0081)         //start timer. 10s.
(0082)         set_timer(RINGANDSCREENINPUTTIMER, 70, door_minitor_timeout); 
    0570 E58C      LDI	R24,0x5C
    0571 E090      LDI	R25,0
    0572 8399      STD	Y+1,R25
    0573 8388      STD	Y+0,R24
    0574 E426      LDI	R18,0x46
    0575 E030      LDI	R19,0
    0576 E002      LDI	R16,2
    0577 DF2F      RCALL	_set_timer
(0083)     }
    0578 9622      ADIW	R28,2
    0579 D2F3      RCALL	pop_gset1
    057A 9508      RET
_input_isr:
    057B 9722      SBIW	R28,2
(0084) }
(0085) 
(0086) void input_isr(void)
(0087) {
(0088)     disable_input();
    057C DFC5      RCALL	_disable_input
(0089)     //
(0090)     delay_ms(100);
    057D E604      LDI	R16,0x64
    057E E010      LDI	R17,0
    057F DCCD      RCALL	_delay_ms
(0091)     if(!(PINC&0x01)) //ring input.
    0580 9998      SBIC	0x13,0
    0581 C009      RJMP	0x058B
(0092)     {
(0093)         screen_on();
    0582 DFC1      RCALL	_screen_on
(0094)         ring_on();
    0583 DFD5      RCALL	_ring_on
(0095)         tips_ring_on();
    0584 DD23      RCALL	_tips_ring_on
(0096)         //start timer. 50s.
(0097)         set_timer(RINGANDSCREENINPUTTIMER, 300, ring_screen_timeout);
    0585 E58A      LDI	R24,0x5A
    0586 940E0ABC  CALL	0xABC
    0588 E002      LDI	R16,2
    0589 DF1D      RCALL	_set_timer
(0098)     }
    058A C00B      RJMP	0x0596
(0099)     else if(!(PIND&0x02)) //screen key input.
    058B 9981      SBIC	0x10,1
    058C C009      RJMP	0x0596
(0100)     {
(0101)         screen_on();
    058D DFB6      RCALL	_screen_on
(0102)         delay_ms(800);
    058E E200      LDI	R16,0x20
    058F E013      LDI	R17,3
    0590 DCBC      RCALL	_delay_ms
(0103)         //start timer. 50s.
(0104)         set_timer(RINGANDSCREENINPUTTIMER, 300, ring_screen_timeout);
    0591 E58A      LDI	R24,0x5A
    0592 940E0ABC  CALL	0xABC
    0594 E002      LDI	R16,2
    0595 DF11      RCALL	_set_timer
(0105)     }
(0106)     enable_input();
    0596 DFAC      RCALL	_enable_input
(0107)     return;
    0597 9622      ADIW	R28,2
    0598 9508      RET
(0108) }
(0109) 
(0110) //when door open, return 1.
(0111) char check_door(void)
(0112) {
(0113)     return (!(PIND&0x04));
_check_door:
    0599 9982      SBIC	0x10,2
    059A C003      RJMP	0x059E
    059B E001      LDI	R16,1
    059C E010      LDI	R17,0
    059D C002      RJMP	0x05A0
    059E 2700      CLR	R16
    059F 2711      CLR	R17
    05A0 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\eeprom.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "util.h"
(0005) #include "eeprom.h"
(0006) 
(0007) /* 一个通用的24C01－24C256共9种EEPROM的字节读写操作程序，   
(0008) 此程序有五个入口条件，分别为读写数据缓冲区指针,   
(0009) 进行读写的字节数，EEPROM首址，EEPROM控制字节，   
(0010) 以及EEPROM类型。此程序结构性良好，具有极好的容错性，程序机器码也不多:   
(0011) DataBuff为读写数据输入／输出缓冲区的首址   
(0012) Length 为要读写数据的字节数量   
(0013) Addr 为EEPROM的片内地址 AT24256为0～32767   
(0014) Control 为EEPROM的控制字节，具体形式为(1)(0)(1)(0)(A2)(A1)(A0)(R/W),其中R/W=1,   
(0015) 表示读操作,R/W=0为写操作,A2,A1,A0为EEPROM的页选或片选地址;   
(0016) enumer为枚举变量,需为AT2401至AT24256中的一种,分别对应AT24C01至AT24C256;   
(0017) 函数返回值为一个位变量，若返回1表示此次操作失效，0表示操作成功;   
(0018) ERROR为允许最大次数，若出现ERRORCOUNT次操作失效后，则函数中止操作，并返回1   
(0019) SDA和SCL由用户自定义，这里暂定义为P3^0和P3^1; */   
(0020) /*对于1K位，2K位，4K位，8K位，16K位芯片采用一个8位长的字节地址码，对于32K位以上   
(0021) 的采用2个8位长的字节地址码直接寻址，而4K位，8K位，16K位配合页面地址来寻址*/   
(0022)    
(0023) /* －－－－－  AT24C01～AT24C256 的读写程序 －－－－－－ */
(0024) 
(0025) #define AT24C256DEVADDR 0xa0
(0026) 
(0027) #define MAXRETRY    10
(0028) 
(0029) #define SET_SCL (PORTC|=0x10)
(0030) #define CLR_SCL (PORTC&=0xef)
(0031) #define SET_SDA (PORTC|=0x20)
(0032) #define CLR_SDA (PORTC&=0xdf)
(0033) #define TEST_SDA ((PINC&0x20)?1:0)
(0034) #define SDA_OUT (DDRC|=0x20)
(0035) #define SDA_IN (DDRC&=0xdf,PORTC|=0x20)
(0036) 
(0037) static void start(void);
(0038) static void stop(void);
(0039) static unsigned char recAck(void);
(0040) static void ack(void);
(0041) static void noAck(void);
(0042) static void sendByte(unsigned char byte);
(0043) static unsigned char receiveByte(void);
(0044) 
(0045) //pc4 scl
(0046) //pc5 sda
(0047) void at24c256_init(void)
(0048) {
(0049)     //pc4 and pc5 output mode.
(0050)     DDRC |= 0x30;
_at24c256_init:
    05A1 B384      IN	R24,0x14
    05A2 6380      ORI	R24,0x30
    05A3 BB84      OUT	0x14,R24
(0051)     PORTC |= 0x30;
    05A4 B385      IN	R24,0x15
    05A5 6380      ORI	R24,0x30
    05A6 BB85      OUT	0x15,R24
(0052)     //printf("H");
(0053)     delay_ms(5000);
    05A7 E808      LDI	R16,0x88
    05A8 E113      LDI	R17,0x13
    05A9 DCA3      RCALL	_delay_ms
    05AA 940E0AB6  CALL	0xAB6
(0054)     PORTC &= 0xef;
(0055)     //printf("L");
(0056)     delay_ms(5000);
    05AC DCA0      RCALL	_delay_ms
(0057)     PORTC |= 0x10;
    05AD 9AAC      SBI	0x15,4
(0058)     //printf("H");
(0059)     delay_ms(5000);
    05AE E808      LDI	R16,0x88
    05AF E113      LDI	R17,0x13
    05B0 DC9C      RCALL	_delay_ms
    05B1 940E0AB6  CALL	0xAB6
(0060)     PORTC &= 0xef;
(0061)     //printf("L");
(0062)     delay_ms(5000);
    05B3 DC99      RCALL	_delay_ms
(0063)     PORTC |= 0x10;	
    05B4 9AAC      SBI	0x15,4
(0064)     //printf("H");
(0065)     delay_ms(5000);
    05B5 E808      LDI	R16,0x88
    05B6 E113      LDI	R17,0x13
    05B7 DC95      RCALL	_delay_ms
    05B8 940E0AB6  CALL	0xAB6
(0066)     PORTC &= 0xef;
(0067)     //printf("L");
(0068)     delay_ms(5000);
    05BA DC92      RCALL	_delay_ms
(0069)     PORTC |= 0x10;	
    05BB 9AAC      SBI	0x15,4
(0070)     return;
    05BC 9508      RET
_rw24c256:
  i                    --> R10
  j                    --> R14
  err                  --> R20
  rwFlag               --> R22
  addr                 --> R12
  len                  --> Y+12
  data                 --> Y+10
    05BD D238      RCALL	push_arg4
    05BE D2A3      RCALL	push_gset5
    05BF 84CE      LDD	R12,Y+14
    05C0 84DF      LDD	R13,Y+15
    05C1 8968      LDD	R22,Y+16
(0071) }
(0072) 
(0073) char rw24c256(unsigned char *data,unsigned char len,unsigned int addr, unsigned char rwFlag)    
(0074) {    
(0075) 
(0076)     unsigned char j, i = MAXRETRY;    
    05C2 E08A      LDI	R24,0xA
    05C3 2EA8      MOV	R10,R24
(0077)     char err = 1;  /*   出错标志   */   
    05C4 E041      LDI	R20,1
    05C5 C04C      RJMP	0x0612
(0078)     while(i--)    
(0079)     {    
(0080)         start();  /*   启动总线   */
    05C6 D05D      RCALL	_start
(0081)         if(rwFlag == RW24C256WRITE)
    05C7 2366      TST	R22
    05C8 F419      BNE	0x05CC
(0082)             sendByte(AT24C256DEVADDR |0x00); /*   向IIC总线写数据，器件地址 */   
    05C9 EA00      LDI	R16,0xA0
    05CA D098      RCALL	_sendByte
    05CB C002      RJMP	0x05CE
(0083)         else
(0084)             sendByte(AT24C256DEVADDR |0x01); /*   向IIC总线读数据，器件地址 */  
    05CC EA01      LDI	R16,0xA1
    05CD D095      RCALL	_sendByte
(0085)             //printf("11111"); 
(0086)         if(recAck()) continue; /*   如写不正确结束本次循环   */   
    05CE D071      RCALL	_recAck
    05CF 2300      TST	R16
    05D0 F009      BEQ	0x05D2
    05D1 C040      RJMP	0x0612
(0087)         //printf("2222"); 
(0088)         sendByte((unsigned char)(addr >> 8));//把整型数据转换为字符型数据：弃高取低，只取低8位.如果容量大于32K位，使用16位地址寻址，写入高八位地址    
    05D2 0186      MOVW	R16,R12
    05D3 2F01      MOV	R16,R17
    05D4 2711      CLR	R17
    05D5 D08D      RCALL	_sendByte
(0089)         //printf("33333"); 
(0090)         if(recAck())  continue;    
    05D6 D069      RCALL	_recAck
    05D7 2300      TST	R16
    05D8 F009      BEQ	0x05DA
    05D9 C038      RJMP	0x0612
(0091)         //printf("4444"); 
(0092)         sendByte((unsigned char)addr); /*   向IIC总线写数据   */   
    05DA 2D0C      MOV	R16,R12
    05DB D087      RCALL	_sendByte
(0093)         //printf("5555"); 
(0094)         if(recAck())  continue; /*   如写正确结束本次循环   */
    05DC D063      RCALL	_recAck
    05DD 2300      TST	R16
    05DE F009      BEQ	0x05E0
    05DF C032      RJMP	0x0612
(0095)         //printf("6666"); 
(0096)         if(rwFlag == RW24C256WRITE)   //判断是读器件还是写器件    
    05E0 2366      TST	R22
    05E1 F509      BNE	0x0603
(0097)         {    
(0098)             j=len;    
    05E2 84EC      LDD	R14,Y+12
(0099)             err=0;         /* 清错误特征位 */   
    05E3 2744      CLR	R20
    05E4 C00C      RJMP	0x05F1
(0100)             while(j--)    
(0101)             {    
(0102)                 sendByte(*(data++)); /*   向IIC总线写数据   */   
    05E5 85EA      LDD	R30,Y+10
    05E6 85FB      LDD	R31,Y+11
    05E7 9101      LD	R16,Z+
    05E8 87FB      STD	Y+11,R31
    05E9 87EA      STD	Y+10,R30
    05EA D078      RCALL	_sendByte
(0103)                 if(!recAck()) continue; /*   如写正确结束本次循环   */   
    05EB D054      RCALL	_recAck
    05EC 2300      TST	R16
    05ED F409      BNE	0x05EF
    05EE C002      RJMP	0x05F1
(0104)                 err=1;    
    05EF E041      LDI	R20,1
(0105)                 break;    
    05F0 C007      RJMP	0x05F8
    05F1 2C2E      MOV	R2,R14
    05F2 2433      CLR	R3
    05F3 2D82      MOV	R24,R2
    05F4 5081      SUBI	R24,1
    05F5 2EE8      MOV	R14,R24
    05F6 2022      TST	R2
    05F7 F769      BNE	0x05E5
(0106)             }    
(0107)             if(err==1) continue;    
    05F8 3041      CPI	R20,1
    05F9 F501      BNE	0x061A
    05FA C017      RJMP	0x0612
(0108)             break;    
(0109)         }    
(0110)         else   
(0111)         {    
(0112)             //printf("to read.");
(0113)             //start();  /*   启动总线   */   
(0114)             //sendByte(Control); /*   向IIC总线写数据   */   
(0115)             //if(recAck()) continue;//器件没应答结束本次本层循环    
(0116)             while(len--)  /*   字节长为0结束   */   
(0117)             {
(0118)                 //printf("to read12.");     
(0119)                 *(data++)= receiveByte();    
    05FB D07F      RCALL	_receiveByte
    05FC 2E20      MOV	R2,R16
    05FD 85EA      LDD	R30,Y+10
    05FE 85FB      LDD	R31,Y+11
    05FF 9221      ST	R2,Z+
    0600 87FB      STD	Y+11,R31
    0601 87EA      STD	Y+10,R30
(0120)                 ack();   /*   对IIC总线产生应答   */   
    0602 D050      RCALL	_ack
    0603 842C      LDD	R2,Y+12
    0604 2433      CLR	R3
    0605 2D82      MOV	R24,R2
    0606 5081      SUBI	R24,1
    0607 878C      STD	Y+12,R24
    0608 2022      TST	R2
    0609 F789      BNE	0x05FB
(0121)             }    
(0122)             *data=receiveByte(); /* 读最后一个字节 */   
    060A D070      RCALL	_receiveByte
    060B 2E20      MOV	R2,R16
    060C 85EA      LDD	R30,Y+10
    060D 85FB      LDD	R31,Y+11
    060E 8220      STD	Z+0,R2
(0123)             noAck();  /*   不对IIC总线产生应答   */   
    060F D04D      RCALL	_noAck
(0124)             err=0;    
    0610 2744      CLR	R20
(0125)             break;    
    0611 C008      RJMP	0x061A
    0612 2C2A      MOV	R2,R10
    0613 2433      CLR	R3
    0614 2D82      MOV	R24,R2
    0615 5081      SUBI	R24,1
    0616 2EA8      MOV	R10,R24
    0617 2022      TST	R2
    0618 F009      BEQ	0x061A
    0619 CFAC      RJMP	0x05C6
(0126)         }    
(0127)     }    
(0128)     stop();  /*   停止IIC总线   */   
    061A D017      RCALL	_stop
(0129)     if(rwFlag == RW24C256WRITE)    
    061B 2366      TST	R22
    061C F419      BNE	0x0620
(0130)     {     
(0131)         delay_ms(50);    
    061D E302      LDI	R16,0x32
    061E E010      LDI	R17,0
    061F DC2D      RCALL	_delay_ms
(0132)     }    
(0133)     return err;    
    0620 2F04      MOV	R16,R20
    0621 D23E      RCALL	pop_gset5
    0622 9624      ADIW	R28,4
    0623 9508      RET
(0134) }    
(0135)    
(0136) /* * * * * 以下是对IIC总线的操作子程序 * * * * */   
(0137) /* * * * * * 启动总线 * * * * */   
(0138) static void start(void)    
(0139) {    
(0140)     //SCL=0; /* SCL处于高电平时,SDA从高电平转向低电平表示 */   
(0141)     CLR_SCL;
_start:
    0624 940E0AE0  CALL	0xAE0
    0626 940E0AA4  CALL	0xAA4
(0142)     //SDA=1; /* 一个"开始"状态,该状态必须在其他命令之前执行 */   
(0143)     SET_SDA;
(0144)     //SCL=1;
(0145)     SET_SCL;
(0146)     NOP(); NOP(); NOP();    
(0147)     //SDA=0;
(0148)     CLR_SDA;
    0628 B385      IN	R24,0x15
    0629 7D8F      ANDI	R24,0xDF
    062A BB85      OUT	0x15,R24
(0149)     NOP(); NOP(); NOP(); NOP();    
    062B 0000      NOP
    062C 0000      NOP
    062D 0000      NOP
    062E 940E0A52  CALL	0xA52
(0150)     //SCL=0;
(0151)     CLR_SCL;
(0152)     //SDA=1;
(0153)     SET_SDA;
    0630 9AAD      SBI	0x15,5
(0154) 
(0155)     return;
    0631 9508      RET
(0156) }    
(0157)    
(0158) /* * * * * 停止IIC总线 * * * * */   
(0159) static void stop(void)    
(0160) {     
(0161)     //SCL=0; /*SCL处于高电平时,SDA从低电平转向高电平 */
(0162)     CLR_SCL;   
_stop:
    0632 B385      IN	R24,0x15
    0633 7E8F      ANDI	R24,0xEF
    0634 BB85      OUT	0x15,R24
(0163)     //SDA=0; /*表示一个"停止"状态,该状态终止所有通讯 */
(0164)     CLR_SDA;
    0635 B385      IN	R24,0x15
    0636 7D8F      ANDI	R24,0xDF
    0637 BB85      OUT	0x15,R24
    0638 940E0AA4  CALL	0xAA4
(0165)     //SCL=1;
(0166)     SET_SCL;
(0167)     NOP(); NOP(); NOP(); /* 空操作 */
(0168)     //SDA=1;
(0169)     SET_SDA;
    063A 9AAD      SBI	0x15,5
(0170)     NOP(); NOP(); NOP();
    063B 0000      NOP
    063C 0000      NOP
    063D 940E0A52  CALL	0xA52
(0171)     //SCL=0;
(0172)     CLR_SCL;
(0173)     
(0174)     return;
    063F 9508      RET
(0175) }    
(0176)    
(0177) /* * * * * 检查应答位 * * * * */   
(0178) static unsigned char recAck(void)    
(0179) {
(0180)     unsigned char result;
(0181)     
(0182)     //SCL=0;
(0183)     CLR_SCL;   
_recAck:
  result               --> R16
    0640 940E0AE0  CALL	0xAE0
    0642 940E0B35  CALL	0xB35
    0644 940E0AA4  CALL	0xAA4
(0184)     //SDA=1;
(0185)     SET_SDA;
(0186)     SDA_IN;
(0187)     //SCL=1;
(0188)     SET_SCL;
(0189)     //change sda input mode.
(0190)     NOP(); NOP(); NOP(); NOP();
    0646 0000      NOP
(0191)     //CY=SDA;     /* 因为返回值总是放在CY中的 */
(0192)     result = TEST_SDA;
    0647 9B9D      SBIS	0x13,5
    0648 C003      RJMP	0x064C
    0649 E001      LDI	R16,1
    064A E010      LDI	R17,0
    064B C002      RJMP	0x064E
    064C 2700      CLR	R16
    064D 2711      CLR	R17
(0193)     //SCL=0;
(0194)     CLR_SCL;
    064E B385      IN	R24,0x15
    064F 7E8F      ANDI	R24,0xEF
    0650 BB85      OUT	0x15,R24
(0195)     //SDA_OUT;
(0196)     SDA_OUT;
    0651 9AA5      SBI	0x14,5
(0197)     return result;
    0652 9508      RET
(0198) }    
(0199)    
(0200) /* * * * *对IIC总线产生应答 * * * * */   
(0201) static void ack(void)    
(0202) {     
(0203)     //SDA=0; /* EEPROM通过在收到每个地址或数据之后, */
(0204)     CLR_SDA;
_ack:
    0653 B385      IN	R24,0x15
    0654 7D8F      ANDI	R24,0xDF
    0655 BB85      OUT	0x15,R24
    0656 940E0AA4  CALL	0xAA4
    0658 940E0A52  CALL	0xA52
(0205)     //SCL=1; /* 置SDA低电平的方式确认表示收到读SDA口状态 */
(0206)     SET_SCL;
(0207)     NOP(); NOP(); NOP(); NOP();
(0208)     //SCL=0;
(0209)     CLR_SCL;   
(0210)     NOP();
    065A 0000      NOP
(0211)     //SDA=1;
(0212)     SET_SDA;
    065B 9AAD      SBI	0x15,5
(0213) 
(0214)     return;
    065C 9508      RET
(0215) }    
(0216)    
(0217) /* * * * * * * * * 不对IIC总线产生应答 * * * * */   
(0218) static void noAck(void)    
(0219) {    
(0220)     //SDA=1;
(0221)     SET_SDA;
_noAck:
    065D 9AAD      SBI	0x15,5
    065E 940E0AA4  CALL	0xAA4
    0660 940E0A52  CALL	0xA52
(0222)     //SCL=1;
(0223)     SET_SCL;
(0224)     NOP(); NOP(); NOP(); NOP();    
(0225)     //SCL=0;
(0226)     CLR_SCL;
(0227)     
(0228)     return;
    0662 9508      RET
_sendByte:
  mask                 --> R20
  byte                 --> R16
    0663 D206      RCALL	push_gset1
(0229) }    
(0230)    
(0231) /* * * * * * * * * 向IIC总线写数据 * * * * */   
(0232) static void sendByte(unsigned char byte)    
(0233) {     
(0234)     unsigned char mask = 0x80;
    0664 E840      LDI	R20,0x80
(0235)     for(;mask>0;)    
    0665 C00D      RJMP	0x0673
(0236)     {
(0237)         //SCL=0;
(0238)         CLR_SCL;
    0666 B385      IN	R24,0x15
    0667 7E8F      ANDI	R24,0xEF
    0668 BB85      OUT	0x15,R24
(0239)         if(mask&byte)
    0669 2E24      MOV	R2,R20
    066A 2220      AND	R2,R16
    066B F011      BEQ	0x066E
(0240)         {
(0241)             //SDA=1;
(0242)             SET_SDA;
    066C 9AAD      SBI	0x15,5
(0243)         }
    066D C003      RJMP	0x0671
(0244)         else
(0245)         {
(0246)             //SDA=0;
(0247)             CLR_SDA;
    066E B385      IN	R24,0x15
    066F 7D8F      ANDI	R24,0xDF
    0670 BB85      OUT	0x15,R24
(0248)         }
(0249)         mask >>= 1;
    0671 9546      LSR	R20
(0250)         //SCL=1;
(0251)         SET_SCL;
    0672 9AAC      SBI	0x15,4
    0673 2422      CLR	R2
    0674 1624      CP	R2,R20
    0675 F380      BCS	0x0666
(0252)     }
(0253)     //SCL=0;
(0254)     CLR_SCL;
    0676 B385      IN	R24,0x15
    0677 7E8F      ANDI	R24,0xEF
    0678 BB85      OUT	0x15,R24
(0255) 
(0256)     return;
    0679 D1F3      RCALL	pop_gset1
    067A 9508      RET
_receiveByte:
  i                    --> R16
  receivebyte          --> R18
    067B D1EE      RCALL	push_gset1
(0257) }
(0258)    
(0259) /* * * * * * * * * 从IIC总线上读数据子程序 * * * * */   
(0260) static unsigned char receiveByte(void)    
(0261) {     
(0262)     register receivebyte,i=8;
    067C E008      LDI	R16,0x8
    067D E010      LDI	R17,0
    067E 940E0B35  CALL	0xB35
(0263)     //printf("to read123.");     
(0264)     SDA_IN;
(0265)     //SCL=0;
(0266)     CLR_SCL;
    0680 B385      IN	R24,0x15
    0681 7E8F      ANDI	R24,0xEF
    0682 BB85      OUT	0x15,R24
    0683 C011      RJMP	0x0695
(0267)     while(i--)    
(0268)     {     
(0269)         //SCL=1;
(0270)         SET_SCL;
    0684 9AAC      SBI	0x15,4
(0271)         receivebyte = (receivebyte <<1 ) | TEST_SDA;
    0685 9B9D      SBIS	0x13,5
    0686 C003      RJMP	0x068A
    0687 E041      LDI	R20,1
    0688 E050      LDI	R21,0
    0689 C002      RJMP	0x068C
    068A 2744      CLR	R20
    068B 2755      CLR	R21
    068C 0119      MOVW	R2,R18
    068D 0C22      LSL	R2
    068E 1C33      ROL	R3
    068F 2A24      OR	R2,R20
    0690 2A35      OR	R3,R21
    0691 0191      MOVW	R18,R2
(0272)         //printf("receivebyte %d", receivebyte);
(0273)         //SCL=0;
(0274)         CLR_SCL;
    0692 B385      IN	R24,0x15
    0693 7E8F      ANDI	R24,0xEF
    0694 BB85      OUT	0x15,R24
    0695 0118      MOVW	R2,R16
    0696 5001      SUBI	R16,1
    0697 4010      SBCI	R17,0
    0698 2022      TST	R2
    0699 F751      BNE	0x0684
    069A 2033      TST	R3
    069B F741      BNE	0x0684
(0275)     }
(0276)     SDA_OUT;
    069C 9AA5      SBI	0x14,5
(0277)     return receivebyte;    
    069D 2F02      MOV	R16,R18
    069E D1CE      RCALL	pop_gset1
    069F 9508      RET
FILE: Z:\yang-home-shanghai\smarthome\门禁系统资料\code\uart.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "uart.h"
(0005) 
(0006) //uart0 init. for printf.
(0007) void uart0_init(void)
(0008) {
(0009)     UCSRB = 0x00;                //禁止UART发送和接收
_uart0_init:
    06A0 2422      CLR	R2
    06A1 B82A      OUT	0x0A,R2
(0010)     UCSRA = 0x02;               //倍速
    06A2 E082      LDI	R24,2
    06A3 B98B      OUT	0x0B,R24
(0011)     UCSRC = 0x06;                //8位数据
    06A4 E086      LDI	R24,6
    06A5 BD80      OUT	0x20,R24
(0012)     UBRRL = 0x67;                 //9600bps
    06A6 E687      LDI	R24,0x67
    06A7 B989      OUT	0x09,R24
(0013)     UBRRH = 0x00;
    06A8 BC20      OUT	0x20,R2
(0014)     UCSRB = 0x18;
FILE: <library>
    06A9 E188      LDI	R24,0x18
    06AA B98A      OUT	0x0A,R24
    06AB 9508      RET
__print:
    06AC D149      RCALL	push_arg4
    06AD D1B4      RCALL	push_gset5
    06AE 972A      SBIW	R28,0xA
    06AF 2400      CLR	R0
    06B0 2411      CLR	R1
    06B1 821F      STD	Y+7,R1
    06B2 820E      STD	Y+6,R0
    06B3 C12D      RJMP	0x07E1
    06B4 89EE      LDD	R30,Y+22
    06B5 89FF      LDD	R31,Y+23
    06B6 8180      LDD	R24,Z+0
    06B7 3285      CPI	R24,0x25
    06B8 F039      BEQ	0x06C0
    06B9 8100      LDD	R16,Z+0
    06BA 89EC      LDD	R30,Y+20
    06BB 89FD      LDD	R31,Y+21
    06BC D1C4      RCALL	xicall
    06BD 940E0A47  CALL	0xA47
    06BF C11F      RJMP	0x07DF
    06C0 24EE      CLR	R14
    06C1 24FF      CLR	R15
    06C2 E44D      LDI	R20,0x4D
    06C3 E051      LDI	R21,1
    06C4 E260      LDI	R22,0x20
    06C5 940E0AF1  CALL	0xAF1
    06C7 2FE8      MOV	R30,R24
    06C8 2FF9      MOV	R31,R25
    06C9 8020      LDD	R2,Z+0
    06CA 2433      CLR	R3
    06CB 823D      STD	Y+5,R3
    06CC 822C      STD	Y+4,R2
    06CD 2D82      MOV	R24,R2
    06CE 2D93      MOV	R25,R3
    06CF 3588      CPI	R24,0x58
    06D0 E0E0      LDI	R30,0
    06D1 079E      CPC	R25,R30
    06D2 F409      BNE	0x06D4
    06D3 C077      RJMP	0x074B
    06D4 E588      LDI	R24,0x58
    06D5 1582      CP	R24,R2
    06D6 0593      CPC	R25,R3
    06D7 F0A4      BLT	0x06EC
    06D8 818C      LDD	R24,Y+4
    06D9 819D      LDD	R25,Y+5
    06DA 3485      CPI	R24,0x45
    06DB E0E0      LDI	R30,0
    06DC 079E      CPC	R25,R30
    06DD F409      BNE	0x06DF
    06DE C0FB      RJMP	0x07DA
    06DF 3485      CPI	R24,0x45
    06E0 E0E0      LDI	R30,0
    06E1 079E      CPC	R25,R30
    06E2 F40C      BGE	0x06E4
    06E3 C043      RJMP	0x0727
    06E4 818C      LDD	R24,Y+4
    06E5 819D      LDD	R25,Y+5
    06E6 3583      CPI	R24,0x53
    06E7 E0E0      LDI	R30,0
    06E8 079E      CPC	R25,R30
    06E9 F409      BNE	0x06EB
    06EA C0A8      RJMP	0x0793
    06EB C03B      RJMP	0x0727
    06EC 818C      LDD	R24,Y+4
    06ED 819D      LDD	R25,Y+5
    06EE 368F      CPI	R24,0x6F
    06EF E0E0      LDI	R30,0
    06F0 079E      CPC	R25,R30
    06F1 F409      BNE	0x06F3
    06F2 C058      RJMP	0x074B
    06F3 E68F      LDI	R24,0x6F
    06F4 E090      LDI	R25,0
    06F5 802C      LDD	R2,Y+4
    06F6 803D      LDD	R3,Y+5
    06F7 1582      CP	R24,R2
    06F8 0593      CPC	R25,R3
    06F9 F0DC      BLT	0x0715
    06FA 818C      LDD	R24,Y+4
    06FB 819D      LDD	R25,Y+5
    06FC 3683      CPI	R24,0x63
    06FD E0E0      LDI	R30,0
    06FE 079E      CPC	R25,R30
    06FF F409      BNE	0x0701
    0700 C086      RJMP	0x0787
    0701 3684      CPI	R24,0x64
    0702 E0E0      LDI	R30,0
    0703 079E      CPC	R25,R30
    0704 F409      BNE	0x0706
    0705 C02A      RJMP	0x0730
    0706 3685      CPI	R24,0x65
    0707 E0E0      LDI	R30,0
    0708 079E      CPC	R25,R30
    0709 F409      BNE	0x070B
    070A C0CF      RJMP	0x07DA
    070B 3686      CPI	R24,0x66
    070C E0E0      LDI	R30,0
    070D 079E      CPC	R25,R30
    070E F409      BNE	0x0710
    070F C0CA      RJMP	0x07DA
    0710 3689      CPI	R24,0x69
    0711 E0E0      LDI	R30,0
    0712 079E      CPC	R25,R30
    0713 F0E1      BEQ	0x0730
    0714 C012      RJMP	0x0727
    0715 818C      LDD	R24,Y+4
    0716 819D      LDD	R25,Y+5
    0717 3783      CPI	R24,0x73
    0718 E0E0      LDI	R30,0
    0719 079E      CPC	R25,R30
    071A F409      BNE	0x071C
    071B C098      RJMP	0x07B4
    071C 3785      CPI	R24,0x75
    071D E0E0      LDI	R30,0
    071E 079E      CPC	R25,R30
    071F F409      BNE	0x0721
    0720 C02A      RJMP	0x074B
    0721 3788      CPI	R24,0x78
    0722 E0E0      LDI	R30,0
    0723 079E      CPC	R25,R30
    0724 F409      BNE	0x0726
    0725 C025      RJMP	0x074B
    0726 C000      RJMP	0x0727
    0727 89EE      LDD	R30,Y+22
    0728 89FF      LDD	R31,Y+23
    0729 8100      LDD	R16,Z+0
    072A 89EC      LDD	R30,Y+20
    072B 89FD      LDD	R31,Y+21
    072C D154      RCALL	xicall
    072D 940E0A47  CALL	0xA47
    072F C0AF      RJMP	0x07DF
    0730 940E0A31  CALL	0xA31
    0732 940E0B3A  CALL	0xB3A
    0734 2D82      MOV	R24,R2
    0735 2D93      MOV	R25,R3
    0736 3080      CPI	R24,0
    0737 E0E0      LDI	R30,0
    0738 079E      CPC	R25,R30
    0739 F464      BGE	0x0746
    073A 2D8E      MOV	R24,R14
    073B 2D9F      MOV	R25,R15
    073C 6088      ORI	R24,0x8
    073D 2EE8      MOV	R14,R24
    073E 2EF9      MOV	R15,R25
    073F E26D      LDI	R22,0x2D
    0740 2D82      MOV	R24,R2
    0741 2D93      MOV	R25,R3
    0742 940E0B44  CALL	0xB44
    0744 8799      STD	Y+9,R25
    0745 8788      STD	Y+8,R24
    0746 E08A      LDI	R24,0xA
    0747 940E0A86  CALL	0xA86
    0749 D1C5      RCALL	_itoa
    074A C039      RJMP	0x0784
    074B 940E0A31  CALL	0xA31
    074D 940E0B3A  CALL	0xB3A
    074F 89EE      LDD	R30,Y+22
    0750 89FF      LDD	R31,Y+23
    0751 8180      LDD	R24,Z+0
    0752 3785      CPI	R24,0x75
    0753 F451      BNE	0x075E
    0754 E08A      LDI	R24,0xA
    0755 E090      LDI	R25,0
    0756 8399      STD	Y+1,R25
    0757 8388      STD	Y+0,R24
    0758 2D22      MOV	R18,R2
    0759 2D33      MOV	R19,R3
    075A 2F04      MOV	R16,R20
    075B 2F15      MOV	R17,R21
    075C D1F2      RCALL	_utoa
    075D C026      RJMP	0x0784
    075E 89EE      LDD	R30,Y+22
    075F 89FF      LDD	R31,Y+23
    0760 8180      LDD	R24,Z+0
    0761 368F      CPI	R24,0x6F
    0762 F429      BNE	0x0768
    0763 E088      LDI	R24,0x8
    0764 940E0A86  CALL	0xA86
    0766 D1E8      RCALL	_utoa
    0767 C01C      RJMP	0x0784
    0768 E180      LDI	R24,0x10
    0769 940E0A86  CALL	0xA86
    076B D1E3      RCALL	_utoa
    076C 89EE      LDD	R30,Y+22
    076D 89FF      LDD	R31,Y+23
    076E 8180      LDD	R24,Z+0
    076F 3588      CPI	R24,0x58
    0770 F499      BNE	0x0784
    0771 940E0B03  CALL	0xB03
    0773 C00D      RJMP	0x0781
    0774 2DEC      MOV	R30,R12
    0775 2DFD      MOV	R31,R13
    0776 8100      LDD	R16,Z+0
    0777 2711      CLR	R17
    0778 D213      RCALL	_toupper
    0779 2DEC      MOV	R30,R12
    077A 2DFD      MOV	R31,R13
    077B 8300      STD	Z+0,R16
    077C 2D8C      MOV	R24,R12
    077D 2D9D      MOV	R25,R13
    077E 9601      ADIW	R24,1
    077F 2EC8      MOV	R12,R24
    0780 2ED9      MOV	R13,R25
    0781 940E0B1C  CALL	0xB1C
    0783 F781      BNE	0x0774
    0784 940E0B03  CALL	0xB03
    0786 C039      RJMP	0x07C0
    0787 940E0A31  CALL	0xA31
    0789 8020      LDD	R2,Z+0
    078A 8031      LDD	R3,Z+1
    078B 822A      STD	Y+2,R2
    078C 2D02      MOV	R16,R2
    078D 89EC      LDD	R30,Y+20
    078E 89FD      LDD	R31,Y+21
    078F D0F1      RCALL	xicall
    0790 940E0A47  CALL	0xA47
    0792 C04C      RJMP	0x07DF
    0793 940E0A31  CALL	0xA31
    0795 80A0      LDD	R10,Z+0
    0796 80B1      LDD	R11,Z+1
    0797 326D      CPI	R22,0x2D
    0798 F4A9      BNE	0x07AE
    0799 E20D      LDI	R16,0x2D
    079A 89EC      LDD	R30,Y+20
    079B 89FD      LDD	R31,Y+21
    079C D0E4      RCALL	xicall
    079D 940E0A47  CALL	0xA47
    079F C00E      RJMP	0x07AE
    07A0 2DEA      MOV	R30,R10
    07A1 2DFB      MOV	R31,R11
    07A2 95C8      LPM
    07A3 2D00      MOV	R16,R0
    07A4 89EC      LDD	R30,Y+20
    07A5 89FD      LDD	R31,Y+21
    07A6 D0DA      RCALL	xicall
    07A7 940E0A47  CALL	0xA47
    07A9 2D8A      MOV	R24,R10
    07AA 2D9B      MOV	R25,R11
    07AB 9601      ADIW	R24,1
    07AC 2EA8      MOV	R10,R24
    07AD 2EB9      MOV	R11,R25
    07AE 2DEA      MOV	R30,R10
    07AF 2DFB      MOV	R31,R11
    07B0 95C8      LPM
    07B1 2000      TST	R0
    07B2 F769      BNE	0x07A0
    07B3 C02B      RJMP	0x07DF
    07B4 940E0A31  CALL	0xA31
    07B6 80C0      LDD	R12,Z+0
    07B7 80D1      LDD	R13,Z+1
    07B8 20CC      TST	R12
    07B9 F431      BNE	0x07C0
    07BA 20DD      TST	R13
    07BB F421      BNE	0x07C0
    07BC EE81      LDI	R24,0xE1
    07BD E090      LDI	R25,0
    07BE 2EC8      MOV	R12,R24
    07BF 2ED9      MOV	R13,R25
    07C0 326D      CPI	R22,0x2D
    07C1 F4A1      BNE	0x07D6
    07C2 E20D      LDI	R16,0x2D
    07C3 89EC      LDD	R30,Y+20
    07C4 89FD      LDD	R31,Y+21
    07C5 D0BB      RCALL	xicall
    07C6 940E0A47  CALL	0xA47
    07C8 C00D      RJMP	0x07D6
    07C9 2DEC      MOV	R30,R12
    07CA 2DFD      MOV	R31,R13
    07CB 8100      LDD	R16,Z+0
    07CC 89EC      LDD	R30,Y+20
    07CD 89FD      LDD	R31,Y+21
    07CE D0B2      RCALL	xicall
    07CF 940E0A47  CALL	0xA47
    07D1 2D8C      MOV	R24,R12
    07D2 2D9D      MOV	R25,R13
    07D3 9601      ADIW	R24,1
    07D4 2EC8      MOV	R12,R24
    07D5 2ED9      MOV	R13,R25
    07D6 940E0B1C  CALL	0xB1C
    07D8 F781      BNE	0x07C9
    07D9 C005      RJMP	0x07DF
    07DA E78E      LDI	R24,0x7E
    07DB E090      LDI	R25,0
    07DC 2EC8      MOV	R12,R24
    07DD 2ED9      MOV	R13,R25
    07DE CFE1      RJMP	0x07C0
    07DF 940E0AF1  CALL	0xAF1
    07E1 89EE      LDD	R30,Y+22
    07E2 89FF      LDD	R31,Y+23
    07E3 8020      LDD	R2,Z+0
    07E4 2022      TST	R2
    07E5 F009      BEQ	0x07E7
    07E6 CECD      RJMP	0x06B4
    07E7 810E      LDD	R16,Y+6
    07E8 811F      LDD	R17,Y+7
    07E9 962A      ADIW	R28,0xA
    07EA D075      RCALL	pop_gset5
    07EB 9624      ADIW	R28,4
    07EC 9508      RET
_strcpy:
    07ED 2FA0      MOV	R26,R16
    07EE 2FB1      MOV	R27,R17
    07EF 2FE2      MOV	R30,R18
    07F0 2FF3      MOV	R31,R19
    07F1 9001      LD	R0,Z+
    07F2 920D      ST	R0,X+
    07F3 2000      TST	R0
    07F4 F7E1      BNE	0x07F1
    07F5 9508      RET
push_arg4:
    07F6 940E0B26  CALL	0xB26
push_arg2:
    07F8 9508      RET
mod16s:
    07F9 9468      BSET	6
    07FA 92DA      ST	R13,-Y
    07FB 2ED1      MOV	R13,R17
    07FC C004      RJMP	0x0801
div16s:
    07FD 94E8      BCLR	6
    07FE 92DA      ST	R13,-Y
    07FF 2ED1      MOV	R13,R17
    0800 26D3      EOR	R13,R19
    0801 FF17      SBRS	R17,7
    0802 C002      RJMP	0x0805
    0803 940E0B2B  CALL	0xB2B
    0805 FF37      SBRS	R19,7
    0806 C004      RJMP	0x080B
    0807 9530      COM	R19
    0808 9520      COM	R18
    0809 5F2F      SUBI	R18,0xFF
    080A 4F3F      SBCI	R19,0xFF
    080B D009      RCALL	xdiv16u
    080C FED7      SBRS	R13,7
    080D C002      RJMP	0x0810
    080E 940E0B2B  CALL	0xB2B
    0810 90D9      LD	R13,Y+
    0811 9508      RET
mod16u:
    0812 9468      BSET	6
    0813 C001      RJMP	xdiv16u
div16u:
    0814 94E8      BCLR	6
xdiv16u:
    0815 92EA      ST	R14,-Y
    0816 92FA      ST	R15,-Y
    0817 938A      ST	R24,-Y
    0818 24EE      CLR	R14
    0819 24FF      CLR	R15
    081A E180      LDI	R24,0x10
    081B 0F00      LSL	R16
    081C 1F11      ROL	R17
    081D 1CEE      ROL	R14
    081E 1CFF      ROL	R15
    081F 16E2      CP	R14,R18
    0820 06F3      CPC	R15,R19
    0821 F018      BCS	0x0825
    0822 1AE2      SUB	R14,R18
    0823 0AF3      SBC	R15,R19
    0824 9503      INC	R16
    0825 958A      DEC	R24
    0826 F7A1      BNE	0x081B
    0827 F416      BRTC	0x082A
    0828 2D0E      MOV	R16,R14
    0829 2D1F      MOV	R17,R15
    082A 9189      LD	R24,Y+
    082B 90F9      LD	R15,Y+
    082C 90E9      LD	R14,Y+
    082D 9508      RET
empy32u:
empy32s:
    082E D05B      RCALL	long_prolog
    082F 927F      PUSH	R7
    0830 D072      RCALL	tstzero1
    0831 F131      BEQ	0x0858
    0832 2477      CLR	R7
    0833 D075      RCALL	tstzero2
    0834 F419      BNE	0x0838
    0835 018C      MOVW	R16,R24
    0836 019D      MOVW	R18,R26
    0837 C020      RJMP	0x0858
    0838 9F08      MUL	R16,R24
    0839 2CB0      MOV	R11,R0
    083A 2CA1      MOV	R10,R1
    083B 9F28      MUL	R18,R24
    083C 2C90      MOV	R9,R0
    083D 2C81      MOV	R8,R1
    083E 9F18      MUL	R17,R24
    083F 0CA0      ADD	R10,R0
    0840 1C91      ADC	R9,R1
    0841 1C87      ADC	R8,R7
    0842 9F09      MUL	R16,R25
    0843 0CA0      ADD	R10,R0
    0844 1C91      ADC	R9,R1
    0845 1C87      ADC	R8,R7
    0846 9F19      MUL	R17,R25
    0847 0C90      ADD	R9,R0
    0848 1C81      ADC	R8,R1
    0849 9F0A      MUL	R16,R26
    084A 0C90      ADD	R9,R0
    084B 1C81      ADC	R8,R1
    084C 9F38      MUL	R19,R24
    084D 0C80      ADD	R8,R0
    084E 9F29      MUL	R18,R25
    084F 0C80      ADD	R8,R0
    0850 9F1A      MUL	R17,R26
    0851 0C80      ADD	R8,R0
    0852 9F0B      MUL	R16,R27
    0853 0C80      ADD	R8,R0
    0854 2D0B      MOV	R16,R11
    0855 2D1A      MOV	R17,R10
    0856 2D29      MOV	R18,R9
    0857 2D38      MOV	R19,R8
    0858 907F      POP	R7
    0859 C03E      RJMP	long_epilog
pop_gset2:
    085A E0E2      LDI	R30,2
    085B C012      RJMP	pop
pop_gset3:
    085C E0E4      LDI	R30,4
    085D C010      RJMP	pop
pop_gset4:
    085E E0E8      LDI	R30,0x8
    085F C00E      RJMP	pop
pop_gset5:
    0860 27EE      CLR	R30
    0861 C00C      RJMP	pop
push_gset5:
    0862 92FA      ST	R15,-Y
    0863 92EA      ST	R14,-Y
push_gset4:
    0864 92DA      ST	R13,-Y
    0865 92CA      ST	R12,-Y
push_gset3:
    0866 92BA      ST	R11,-Y
    0867 92AA      ST	R10,-Y
push_gset2:
    0868 937A      ST	R23,-Y
    0869 936A      ST	R22,-Y
push_gset1:
    086A 935A      ST	R21,-Y
    086B 934A      ST	R20,-Y
    086C 9508      RET
pop_gset1:
    086D E0E1      LDI	R30,1
pop:
    086E 9149      LD	R20,Y+
    086F 9159      LD	R21,Y+
    0870 FDE0      SBRC	R30,0
    0871 9508      RET
    0872 9169      LD	R22,Y+
    0873 9179      LD	R23,Y+
    0874 FDE1      SBRC	R30,1
    0875 9508      RET
    0876 90A9      LD	R10,Y+
    0877 90B9      LD	R11,Y+
    0878 FDE2      SBRC	R30,2
    0879 9508      RET
    087A 90C9      LD	R12,Y+
    087B 90D9      LD	R13,Y+
    087C FDE3      SBRC	R30,3
    087D 9508      RET
    087E 90E9      LD	R14,Y+
    087F 90F9      LD	R15,Y+
    0880 9508      RET
xicall:
    0881 920A      ST	R0,-Y
    0882 95C8      LPM
    0883 920A      ST	R0,-Y
    0884 9631      ADIW	R30,1
    0885 95C8      LPM
    0886 2DF0      MOV	R31,R0
    0887 91E9      LD	R30,Y+
    0888 9009      LD	R0,Y+
    0889 9409      IJMP
long_prolog:
    088A 928A      ST	R8,-Y
    088B 929A      ST	R9,-Y
    088C 92AA      ST	R10,-Y
    088D 92BA      ST	R11,-Y
    088E 93EA      ST	R30,-Y
    088F 938A      ST	R24,-Y
    0890 939A      ST	R25,-Y
    0891 93AA      ST	R26,-Y
    0892 93BA      ST	R27,-Y
    0893 8589      LDD	R24,Y+9
    0894 859A      LDD	R25,Y+10
    0895 85AB      LDD	R26,Y+11
    0896 85BC      LDD	R27,Y+12
    0897 9508      RET
long_epilog:
    0898 91B9      LD	R27,Y+
    0899 91A9      LD	R26,Y+
    089A 9199      LD	R25,Y+
    089B 9189      LD	R24,Y+
    089C 91E9      LD	R30,Y+
    089D 90B9      LD	R11,Y+
    089E 90A9      LD	R10,Y+
    089F 9099      LD	R9,Y+
    08A0 9089      LD	R8,Y+
    08A1 9624      ADIW	R28,4
    08A2 9508      RET
tstzero1:
    08A3 27EE      CLR	R30
    08A4 2BE0      OR	R30,R16
    08A5 2BE1      OR	R30,R17
    08A6 2BE2      OR	R30,R18
    08A7 2BE3      OR	R30,R19
    08A8 9508      RET
tstzero2:
    08A9 27EE      CLR	R30
    08AA 2BE8      OR	R30,R24
    08AB 2BE9      OR	R30,R25
    08AC 2BEA      OR	R30,R26
    08AD 2BEB      OR	R30,R27
    08AE 9508      RET
push_lset:
    08AF 93FA      ST	R31,-Y
    08B0 93EA      ST	R30,-Y
    08B1 93BA      ST	R27,-Y
    08B2 93AA      ST	R26,-Y
    08B3 939A      ST	R25,-Y
    08B4 938A      ST	R24,-Y
    08B5 940E0B26  CALL	0xB26
    08B7 929A      ST	R9,-Y
    08B8 928A      ST	R8,-Y
    08B9 927A      ST	R7,-Y
    08BA 926A      ST	R6,-Y
    08BB 940E0B30  CALL	0xB30
    08BD 921A      ST	R1,-Y
    08BE 920A      ST	R0,-Y
    08BF B60F      IN	R0,0x3F
    08C0 920A      ST	R0,-Y
    08C1 9508      RET
pop_lset:
    08C2 9009      LD	R0,Y+
    08C3 BE0F      OUT	0x3F,R0
    08C4 9009      LD	R0,Y+
    08C5 9019      LD	R1,Y+
    08C6 9029      LD	R2,Y+
    08C7 9039      LD	R3,Y+
    08C8 9049      LD	R4,Y+
    08C9 9059      LD	R5,Y+
    08CA 9069      LD	R6,Y+
    08CB 9079      LD	R7,Y+
    08CC 9089      LD	R8,Y+
    08CD 9099      LD	R9,Y+
    08CE 9109      LD	R16,Y+
    08CF 9119      LD	R17,Y+
    08D0 9129      LD	R18,Y+
    08D1 9139      LD	R19,Y+
    08D2 9189      LD	R24,Y+
    08D3 9199      LD	R25,Y+
    08D4 91A9      LD	R26,Y+
    08D5 91B9      LD	R27,Y+
    08D6 91E9      LD	R30,Y+
    08D7 91F9      LD	R31,Y+
    08D8 9508      RET
asgnblk:
    08D9 93AA      ST	R26,-Y
    08DA 93BA      ST	R27,-Y
    08DB 93EA      ST	R30,-Y
    08DC 93FA      ST	R31,-Y
    08DD 920A      ST	R0,-Y
    08DE 81AF      LDD	R26,Y+7
    08DF 85B8      LDD	R27,Y+8
    08E0 81ED      LDD	R30,Y+5
    08E1 81FE      LDD	R31,Y+6
    08E2 3000      CPI	R16,0
    08E3 0701      CPC	R16,R17
    08E4 F029      BEQ	0x08EA
    08E5 9001      LD	R0,Z+
    08E6 920D      ST	R0,X+
    08E7 5001      SUBI	R16,1
    08E8 4010      SBCI	R17,0
    08E9 CFF8      RJMP	0x08E2
    08EA 9009      LD	R0,Y+
    08EB 91F9      LD	R31,Y+
    08EC 91E9      LD	R30,Y+
    08ED 91B9      LD	R27,Y+
    08EE 91A9      LD	R26,Y+
    08EF 9624      ADIW	R28,4
    08F0 9508      RET
_putchar:
    08F1 DF78      RCALL	push_gset1
    08F2 2F40      MOV	R20,R16
    08F3 90200166  LDS	R2,_textmode
    08F5 90300167  LDS	R3,_textmode+1
    08F7 2022      TST	R2
    08F8 F411      BNE	0x08FB
    08F9 2033      TST	R3
    08FA F021      BEQ	0x08FF
    08FB 304A      CPI	R20,0xA
    08FC F411      BNE	0x08FF
    08FD E00D      LDI	R16,0xD
    08FE DFF2      RCALL	_putchar
    08FF 9B5D      SBIS	0x0B,5
    0900 CFFE      RJMP	0x08FF
    0901 B94C      OUT	0x0C,R20
    0902 2F04      MOV	R16,R20
    0903 2711      CLR	R17
    0904 DF68      RCALL	pop_gset1
    0905 9508      RET
__va_start:
    0906 2F82      MOV	R24,R18
    0907 2F93      MOV	R25,R19
    0908 9601      ADIW	R24,1
    0909 7F8E      ANDI	R24,0xFE
    090A 0F80      ADD	R24,R16
    090B 1F91      ADC	R25,R17
    090C 2F08      MOV	R16,R24
    090D 2F19      MOV	R17,R25
    090E 9508      RET
_itoa:
    090F DF52      RCALL	push_gset5
    0910 2EC2      MOV	R12,R18
    0911 2ED3      MOV	R13,R19
    0912 2F40      MOV	R20,R16
    0913 2F51      MOV	R21,R17
    0914 97A2      SBIW	R28,0x22
    0915 A4AC      LDD	R10,Y+44
    0916 A4BD      LDD	R11,Y+45
    0917 2D8C      MOV	R24,R12
    0918 2D9D      MOV	R25,R13
    0919 3080      CPI	R24,0
    091A E0E0      LDI	R30,0
    091B 079E      CPC	R25,R30
    091C F434      BGE	0x0923
    091D E061      LDI	R22,1
    091E 940E0B44  CALL	0xB44
    0920 2EC8      MOV	R12,R24
    0921 2ED9      MOV	R13,R25
    0922 C001      RJMP	0x0924
    0923 2766      CLR	R22
    0924 2422      CLR	R2
    0925 A229      STD	Y+33,R2
    0926 2F8C      MOV	R24,R28
    0927 2F9D      MOV	R25,R29
    0928 9681      ADIW	R24,0x21
    0929 2EE8      MOV	R14,R24
    092A 2EF9      MOV	R15,R25
    092B 940E0AC8  CALL	0xAC8
    092D 940E0B49  CALL	0xB49
    092F DEC9      RCALL	mod16s
    0930 2FE0      MOV	R30,R16
    0931 2FF1      MOV	R31,R17
    0932 EF83      LDI	R24,0xF3
    0933 E090      LDI	R25,0
    0934 940E0AE5  CALL	0xAE5
    0936 940E0B49  CALL	0xB49
    0938 DEC4      RCALL	div16s
    0939 2EC0      MOV	R12,R16
    093A 2ED1      MOV	R13,R17
    093B 20CC      TST	R12
    093C F771      BNE	0x092B
    093D 20DD      TST	R13
    093E F761      BNE	0x092B
    093F 2366      TST	R22
    0940 F031      BEQ	0x0947
    0941 940E0AC8  CALL	0xAC8
    0943 E28D      LDI	R24,0x2D
    0944 2DE2      MOV	R30,R2
    0945 2DF3      MOV	R31,R3
    0946 8380      STD	Z+0,R24
    0947 2D2E      MOV	R18,R14
    0948 2D3F      MOV	R19,R15
    0949 2F04      MOV	R16,R20
    094A 2F15      MOV	R17,R21
    094B DEA1      RCALL	_strcpy
    094C 96A2      ADIW	R28,0x22
    094D DF12      RCALL	pop_gset5
    094E 9508      RET
_utoa:
    094F DF14      RCALL	push_gset4
    0950 2EA2      MOV	R10,R18
    0951 2EB3      MOV	R11,R19
    0952 2EC0      MOV	R12,R16
    0953 2ED1      MOV	R13,R17
    0954 97A2      SBIW	R28,0x22
    0955 A56A      LDD	R22,Y+42
    0956 A57B      LDD	R23,Y+43
    0957 2422      CLR	R2
    0958 A229      STD	Y+33,R2
    0959 2F4C      MOV	R20,R28
    095A 2F5D      MOV	R21,R29
    095B 5D4F      SUBI	R20,0xDF
    095C 4F5F      SBCI	R21,0xFF
    095D 2F84      MOV	R24,R20
    095E 2F95      MOV	R25,R21
    095F 9701      SBIW	R24,1
    0960 2E28      MOV	R2,R24
    0961 2E39      MOV	R3,R25
    0962 2F48      MOV	R20,R24
    0963 2F59      MOV	R21,R25
    0964 940E0B12  CALL	0xB12
    0966 DEAB      RCALL	mod16u
    0967 2FE0      MOV	R30,R16
    0968 2FF1      MOV	R31,R17
    0969 E188      LDI	R24,0x18
    096A E091      LDI	R25,1
    096B 940E0AE5  CALL	0xAE5
    096D 940E0B12  CALL	0xB12
    096F DEA4      RCALL	div16u
    0970 2EA0      MOV	R10,R16
    0971 2EB1      MOV	R11,R17
    0972 20AA      TST	R10
    0973 F749      BNE	0x095D
    0974 20BB      TST	R11
    0975 F739      BNE	0x095D
    0976 2F24      MOV	R18,R20
    0977 2F35      MOV	R19,R21
    0978 2D0C      MOV	R16,R12
    0979 2D1D      MOV	R17,R13
    097A DE72      RCALL	_strcpy
    097B 96A2      ADIW	R28,0x22
    097C DEE1      RCALL	pop_gset4
    097D 9508      RET
_islower:
    097E E681      LDI	R24,0x61
    097F E090      LDI	R25,0
    0980 2E20      MOV	R2,R16
    0981 2E31      MOV	R3,R17
    0982 0E28      ADD	R2,R24
    0983 1E39      ADC	R3,R25
    0984 2DE2      MOV	R30,R2
    0985 2DF3      MOV	R31,R3
    0986 95C8      LPM
    0987 2D00      MOV	R16,R0
    0988 2711      CLR	R17
    0989 7002      ANDI	R16,2
    098A 7010      ANDI	R17,0
    098B 9508      RET
_toupper:
    098C DEDD      RCALL	push_gset1
    098D 2F40      MOV	R20,R16
    098E 2F51      MOV	R21,R17
    098F 2F04      MOV	R16,R20
    0990 2F15      MOV	R17,R21
    0991 DFEC      RCALL	_islower
    0992 3000      CPI	R16,0
    0993 0701      CPC	R16,R17
    0994 F039      BEQ	0x099C
    0995 2F04      MOV	R16,R20
    0996 2F15      MOV	R17,R21
    0997 5601      SUBI	R16,0x61
    0998 4010      SBCI	R17,0
    0999 5B0F      SUBI	R16,0xBF
    099A 4F1F      SBCI	R17,0xFF
    099B C002      RJMP	0x099E
    099C 2F04      MOV	R16,R20
    099D 2F15      MOV	R17,R21
    099E DECE      RCALL	pop_gset1
    099F 9508      RET
_printf:
    09A0 DE55      RCALL	push_arg4
    09A1 DEC8      RCALL	push_gset1
    09A2 9722      SBIW	R28,2
    09A3 E022      LDI	R18,2
    09A4 E030      LDI	R19,0
    09A5 2F0C      MOV	R16,R28
    09A6 2F1D      MOV	R17,R29
    09A7 5F0C      SUBI	R16,0xFC
    09A8 4F1F      SBCI	R17,0xFF
    09A9 DF5C      RCALL	__va_start
    09AA 2F40      MOV	R20,R16
    09AB 2F51      MOV	R21,R17
    09AC 8359      STD	Y+1,R21
    09AD 8348      STD	Y+0,R20
    09AE 812C      LDD	R18,Y+4
    09AF 813D      LDD	R19,Y+5
    09B0 E50E      LDI	R16,0x5E
    09B1 E010      LDI	R17,0
    09B2 DCF9      RCALL	__print
    09B3 2F40      MOV	R20,R16
    09B4 2F51      MOV	R21,R17
    09B5 9622      ADIW	R28,2
    09B6 DEB6      RCALL	pop_gset1
    09B7 9624      ADIW	R28,4
    09B8 9508      RET
<created procedures>:
    09B9 9040006D  LDS	R4,id_code+2
    09BB 9050006E  LDS	R5,id_code+3
    09BD 9020006B  LDS	R2,id_code
    09BF 9030006C  LDS	R3,id_code+1
    09C1 0C22      LSL	R2
    09C2 1C33      ROL	R3
    09C3 1C44      ROL	R4
    09C4 1C55      ROL	R5
    09C5 9230006C  STS	id_code+1,R3
    09C7 9220006B  STS	id_code,R2
    09C9 9250006E  STS	id_code+3,R5
    09CB 9240006D  STS	id_code+2,R4
    09CD 9508      RET
    09CE 8628      STD	Y+8,R2
    09CF 8639      STD	Y+9,R3
    09D0 864A      STD	Y+10,R4
    09D1 865B      STD	Y+11,R5
    09D2 90400077  LDS	R4,passwordH+2
    09D4 90500078  LDS	R5,passwordH+3
    09D6 90200075  LDS	R2,passwordH
    09D8 90300076  LDS	R3,passwordH+1
    09DA 822C      STD	Y+4,R2
    09DB 823D      STD	Y+5,R3
    09DC 824E      STD	Y+6,R4
    09DD 825F      STD	Y+7,R5
    09DE 9508      RET
    09DF 9230006C  STS	id_code+1,R3
    09E1 9220006B  STS	id_code,R2
    09E3 9250006E  STS	id_code+3,R5
    09E5 9240006D  STS	id_code+2,R4
    09E7 9508      RET
    09E8 E040      LDI	R20,0
    09E9 E050      LDI	R21,0
    09EA E060      LDI	R22,0
    09EB E070      LDI	R23,0
    09EC 01FE      MOVW	R30,R28
    09ED 8343      STD	Z+3,R20
    09EE 8354      STD	Z+4,R21
    09EF 8365      STD	Z+5,R22
    09F0 8376      STD	Z+6,R23
    09F1 E081      LDI	R24,1
    09F2 838A      STD	Y+2,R24
    09F3 E08D      LDI	R24,0xD
    09F4 9D8C      MUL	R24,R12
    09F5 01C0      MOVW	R24,R0
    09F6 9508      RET
    09F7 E040      LDI	R20,0
    09F8 E050      LDI	R21,0
    09F9 E060      LDI	R22,0
    09FA E070      LDI	R23,0
    09FB 8748      STD	Y+8,R20
    09FC 8759      STD	Y+9,R21
    09FD 876A      STD	Y+10,R22
    09FE 877B      STD	Y+11,R23
    09FF E040      LDI	R20,0
    0A00 E050      LDI	R21,0
    0A01 E060      LDI	R22,0
    0A02 E070      LDI	R23,0
    0A03 834C      STD	Y+4,R20
    0A04 835D      STD	Y+5,R21
    0A05 836E      STD	Y+6,R22
    0A06 837F      STD	Y+7,R23
    0A07 01FE      MOVW	R30,R28
    0A08 A820      LDD	R2,Z+48
    0A09 A831      LDD	R3,Z+49
    0A0A A842      LDD	R4,Z+50
    0A0B A853      LDD	R5,Z+51
    0A0C 8228      STD	Y+0,R2
    0A0D 8239      STD	Y+1,R3
    0A0E 824A      STD	Y+2,R4
    0A0F 825B      STD	Y+3,R5
    0A10 9508      RET
    0A11 90400077  LDS	R4,passwordH+2
    0A13 90500078  LDS	R5,passwordH+3
    0A15 90200075  LDS	R2,passwordH
    0A17 90300076  LDS	R3,passwordH+1
    0A19 9508      RET
    0A1A 9040006D  LDS	R4,id_code+2
    0A1C 9050006E  LDS	R5,id_code+3
    0A1E 9020006B  LDS	R2,id_code
    0A20 9030006C  LDS	R3,id_code+1
    0A22 9508      RET
    0A23 E040      LDI	R20,0
    0A24 E050      LDI	R21,0
    0A25 E060      LDI	R22,0
    0A26 E070      LDI	R23,0
    0A27 9508      RET
    0A28 9040007B  LDS	R4,passwordL+2
    0A2A 9050007C  LDS	R5,passwordL+3
    0A2C 90200079  LDS	R2,passwordL
    0A2E 9030007A  LDS	R3,passwordL+1
    0A30 9508      RET
    0A31 8D88      LDD	R24,Y+24
    0A32 8D99      LDD	R25,Y+25
    0A33 9602      ADIW	R24,2
    0A34 8F99      STD	Y+25,R25
    0A35 8F88      STD	Y+24,R24
    0A36 2FE8      MOV	R30,R24
    0A37 2FF9      MOV	R31,R25
    0A38 9732      SBIW	R30,2
    0A39 9508      RET
    0A3A 8399      STD	Y+1,R25
    0A3B 8388      STD	Y+0,R24
    0A3C E024      LDI	R18,4
    0A3D 018E      MOVW	R16,R28
    0A3E 5F0D      SUBI	R16,0xFD
    0A3F 4F1F      SBCI	R17,0xFF
    0A40 9508      RET
    0A41 01F0      MOVW	R30,R0
    0A42 E38D      LDI	R24,0x3D
    0A43 E091      LDI	R25,1
    0A44 0FE8      ADD	R30,R24
    0A45 1FF9      ADC	R31,R25
    0A46 9508      RET
    0A47 818E      LDD	R24,Y+6
    0A48 819F      LDD	R25,Y+7
    0A49 9601      ADIW	R24,1
    0A4A 839F      STD	Y+7,R25
    0A4B 838E      STD	Y+6,R24
    0A4C 9508      RET
    0A4D E050      LDI	R21,0
    0A4E E060      LDI	R22,0
    0A4F E070      LDI	R23,0
    0A50 01FE      MOVW	R30,R28
    0A51 9508      RET
    0A52 0000      NOP
    0A53 B385      IN	R24,0x15
    0A54 7E8F      ANDI	R24,0xEF
    0A55 BB85      OUT	0x15,R24
    0A56 9508      RET
    0A57 01FE      MOVW	R30,R28
    0A58 8223      STD	Z+3,R2
    0A59 8234      STD	Z+4,R3
    0A5A 8245      STD	Z+5,R4
    0A5B 8256      STD	Z+6,R5
    0A5C 2422      CLR	R2
    0A5D 822A      STD	Y+2,R2
    0A5E E08D      LDI	R24,0xD
    0A5F 9D8A      MUL	R24,R10
    0A60 01C0      MOVW	R24,R0
    0A61 9508      RET
    0A62 B382      IN	R24,0x12
    0A63 7E8F      ANDI	R24,0xEF
    0A64 BB82      OUT	0x12,R24
    0A65 E604      LDI	R16,0x64
    0A66 E010      LDI	R17,0
    0A67 9508      RET
    0A68 A820      LDD	R2,Z+48
    0A69 A831      LDD	R3,Z+49
    0A6A A842      LDD	R4,Z+50
    0A6B A853      LDD	R5,Z+51
    0A6C 9508      RET
    0A6D E041      LDI	R20,1
    0A6E E050      LDI	R21,0
    0A6F E060      LDI	R22,0
    0A70 E070      LDI	R23,0
    0A71 9350007A  STS	passwordL+1,R21
    0A73 93400079  STS	passwordL,R20
    0A75 9370007C  STS	passwordL+3,R23
    0A77 9360007B  STS	passwordL+2,R22
    0A79 9508      RET
    0A7A 01FE      MOVW	R30,R28
    0A7B 8C22      LDD	R2,Z+26
    0A7C 8C33      LDD	R3,Z+27
    0A7D 8C44      LDD	R4,Z+28
    0A7E 8C55      LDD	R5,Z+29
    0A7F 8228      STD	Y+0,R2
    0A80 8239      STD	Y+1,R3
    0A81 824A      STD	Y+2,R4
    0A82 825B      STD	Y+3,R5
    0A83 91200073  LDS	R18,current_index
    0A85 9508      RET
    0A86 E090      LDI	R25,0
    0A87 8399      STD	Y+1,R25
    0A88 8388      STD	Y+0,R24
    0A89 8528      LDD	R18,Y+8
    0A8A 8539      LDD	R19,Y+9
    0A8B 2F04      MOV	R16,R20
    0A8C 2F15      MOV	R17,R21
    0A8D 9508      RET
    0A8E 01F0      MOVW	R30,R0
    0A8F E38F      LDI	R24,0x3F
    0A90 E091      LDI	R25,1
    0A91 0FE8      ADD	R30,R24
    0A92 1FF9      ADC	R31,R25
    0A93 9508      RET
    0A94 1462      CP	R6,R2
    0A95 0473      CPC	R7,R3
    0A96 0484      CPC	R8,R4
    0A97 0495      CPC	R9,R5
    0A98 9508      RET
    0A99 91800071  LDS	R24,read_count
    0A9B 5F8F      SUBI	R24,0xFF
    0A9C 93800071  STS	read_count,R24
    0A9E 9508      RET
    0A9F E041      LDI	R20,1
    0AA0 E050      LDI	R21,0
    0AA1 E060      LDI	R22,0
    0AA2 E070      LDI	R23,0
    0AA3 9508      RET
    0AA4 9AAC      SBI	0x15,4
    0AA5 0000      NOP
    0AA6 0000      NOP
    0AA7 0000      NOP
    0AA8 9508      RET
    0AA9 01FE      MOVW	R30,R28
    0AAA 8023      LDD	R2,Z+3
    0AAB 8034      LDD	R3,Z+4
    0AAC 8045      LDD	R4,Z+5
    0AAD 8056      LDD	R5,Z+6
    0AAE 01FE      MOVW	R30,R28
    0AAF 9508      RET
    0AB0 B382      IN	R24,0x12
    0AB1 7E8F      ANDI	R24,0xEF
    0AB2 BB82      OUT	0x12,R24
    0AB3 E900      LDI	R16,0x90
    0AB4 E011      LDI	R17,1
    0AB5 9508      RET
    0AB6 B385      IN	R24,0x15
    0AB7 7E8F      ANDI	R24,0xEF
    0AB8 BB85      OUT	0x15,R24
    0AB9 E808      LDI	R16,0x88
    0ABA E113      LDI	R17,0x13
    0ABB 9508      RET
    0ABC E090      LDI	R25,0
    0ABD 8399      STD	Y+1,R25
    0ABE 8388      STD	Y+0,R24
    0ABF E22C      LDI	R18,0x2C
    0AC0 E031      LDI	R19,1
    0AC1 9508      RET
    0AC2 91800074  LDS	R24,input_err_count
    0AC4 5F8F      SUBI	R24,0xFF
    0AC5 93800074  STS	input_err_count,R24
    0AC7 9508      RET
    0AC8 2D8E      MOV	R24,R14
    0AC9 2D9F      MOV	R25,R15
    0ACA 9701      SBIW	R24,1
    0ACB 2E28      MOV	R2,R24
    0ACC 2E39      MOV	R3,R25
    0ACD 2EE8      MOV	R14,R24
    0ACE 2EF9      MOV	R15,R25
    0ACF 9508      RET
    0AD0 2433      CLR	R3
    0AD1 8239      STD	Y+1,R3
    0AD2 8228      STD	Y+0,R2
    0AD3 E021      LDI	R18,1
    0AD4 018E      MOVW	R16,R28
    0AD5 5F0D      SUBI	R16,0xFD
    0AD6 4F1F      SBCI	R17,0xFF
    0AD7 9508      RET
    0AD8 E586      LDI	R24,0x56
    0AD9 E090      LDI	R25,0
    0ADA 8399      STD	Y+1,R25
    0ADB 8388      STD	Y+0,R24
    0ADC E926      LDI	R18,0x96
    0ADD E030      LDI	R19,0
    0ADE E001      LDI	R16,1
    0ADF 9508      RET
    0AE0 B385      IN	R24,0x15
    0AE1 7E8F      ANDI	R24,0xEF
    0AE2 BB85      OUT	0x15,R24
    0AE3 9AAD      SBI	0x15,5
    0AE4 9508      RET
    0AE5 0FE8      ADD	R30,R24
    0AE6 1FF9      ADC	R31,R25
    0AE7 8040      LDD	R4,Z+0
    0AE8 2DE2      MOV	R30,R2
    0AE9 2DF3      MOV	R31,R3
    0AEA 8240      STD	Z+0,R4
    0AEB 9508      RET
    0AEC 8399      STD	Y+1,R25
    0AED 8388      STD	Y+0,R24
    0AEE E021      LDI	R18,1
    0AEF 018E      MOVW	R16,R28
    0AF0 9508      RET
    0AF1 898E      LDD	R24,Y+22
    0AF2 899F      LDD	R25,Y+23
    0AF3 9601      ADIW	R24,1
    0AF4 8B9F      STD	Y+23,R25
    0AF5 8B8E      STD	Y+22,R24
    0AF6 9508      RET
    0AF7 E090      LDI	R25,0
    0AF8 93900070  STS	id_reader_flags+1,R25
    0AFA 9380006F  STS	id_reader_flags,R24
    0AFC 9508      RET
    0AFD 2422      CLR	R2
    0AFE 2433      CLR	R3
    0AFF 8231      STD	Z+1,R3
    0B00 8220      STD	Z+0,R2
    0B01 E084      LDI	R24,4
    0B02 9508      RET
    0B03 E48D      LDI	R24,0x4D
    0B04 E091      LDI	R25,1
    0B05 2EC8      MOV	R12,R24
    0B06 2ED9      MOV	R13,R25
    0B07 9508      RET
    0B08 1624      CP	R2,R20
    0B09 0635      CPC	R3,R21
    0B0A 0646      CPC	R4,R22
    0B0B 0657      CPC	R5,R23
    0B0C 9508      RET
    0B0D 2224      AND	R2,R20
    0B0E 2235      AND	R3,R21
    0B0F 2246      AND	R4,R22
    0B10 2257      AND	R5,R23
    0B11 9508      RET
    0B12 2F26      MOV	R18,R22
    0B13 2F37      MOV	R19,R23
    0B14 2D0A      MOV	R16,R10
    0B15 2D1B      MOV	R17,R11
    0B16 9508      RET
    0B17 2D2C      MOV	R18,R12
    0B18 018E      MOVW	R16,R28
    0B19 5F04      SUBI	R16,0xF4
    0B1A 4F1F      SBCI	R17,0xFF
    0B1B 9508      RET
    0B1C 2DEC      MOV	R30,R12
    0B1D 2DFD      MOV	R31,R13
    0B1E 8020      LDD	R2,Z+0
    0B1F 2022      TST	R2
    0B20 9508      RET
    0B21 8348      STD	Y+0,R20
    0B22 8359      STD	Y+1,R21
    0B23 836A      STD	Y+2,R22
    0B24 837B      STD	Y+3,R23
    0B25 9508      RET
    0B26 933A      ST	R19,-Y
    0B27 932A      ST	R18,-Y
    0B28 931A      ST	R17,-Y
    0B29 930A      ST	R16,-Y
    0B2A 9508      RET
    0B2B 9510      COM	R17
    0B2C 9500      COM	R16
    0B2D 5F0F      SUBI	R16,0xFF
    0B2E 4F1F      SBCI	R17,0xFF
    0B2F 9508      RET
    0B30 925A      ST	R5,-Y
    0B31 924A      ST	R4,-Y
    0B32 923A      ST	R3,-Y
    0B33 922A      ST	R2,-Y
    0B34 9508      RET
    0B35 B384      IN	R24,0x14
    0B36 7D8F      ANDI	R24,0xDF
    0B37 BB84      OUT	0x14,R24
    0B38 9AAD      SBI	0x15,5
    0B39 9508      RET
    0B3A 8020      LDD	R2,Z+0
    0B3B 8031      LDD	R3,Z+1
    0B3C 8639      STD	Y+9,R3
    0B3D 8628      STD	Y+8,R2
    0B3E 9508      RET
    0B3F 940E08AF  CALL	push_lset
    0B41 940E0868  CALL	push_gset2
    0B43 9508      RET
    0B44 9580      COM	R24
    0B45 9590      COM	R25
    0B46 5F8F      SUBI	R24,0xFF
    0B47 4F9F      SBCI	R25,0xFF
    0B48 9508      RET
    0B49 2D2A      MOV	R18,R10
    0B4A 2D3B      MOV	R19,R11
    0B4B 2D0C      MOV	R16,R12
    0B4C 2D1D      MOV	R17,R13
    0B4D 9508      RET
