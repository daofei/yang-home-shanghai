__text_start:
__start:
    0129 E5CF      LDI	R28,0x5F
    012A E0D4      LDI	R29,4
    012B BFCD      OUT	0x3D,R28
    012C BFDE      OUT	0x3E,R29
    012D 51C0      SUBI	R28,0x10
    012E 40D0      SBCI	R29,0
    012F EA0A      LDI	R16,0xAA
    0130 8308      STD	Y+0,R16
    0131 2400      CLR	R0
    0132 E4ED      LDI	R30,0x4D
    0133 E0F1      LDI	R31,1
    0134 E011      LDI	R17,1
    0135 37E8      CPI	R30,0x78
    0136 07F1      CPC	R31,R17
    0137 F011      BEQ	0x013A
    0138 9201      ST	R0,Z+
    0139 CFFB      RJMP	0x0135
    013A 8300      STD	Z+0,R16
    013B E6E5      LDI	R30,0x65
    013C E0F1      LDI	R31,1
    013D E6A0      LDI	R26,0x60
    013E E0B0      LDI	R27,0
    013F E012      LDI	R17,2
    0140 35E2      CPI	R30,0x52
    0141 07F1      CPC	R31,R17
    0142 F021      BEQ	0x0147
    0143 95C8      LPM
    0144 9631      ADIW	R30,1
    0145 920D      ST	R0,X+
    0146 CFF9      RJMP	0x0140
    0147 D001      RCALL	_main
_exit:
    0148 CFFF      RJMP	_exit
_main:
  in                   --> Y+7
  door_minitor_count   --> R20
  o                    --> Y+3
  i                    --> R22
    0149 972B      SBIW	R28,0xB
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\main.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) 
(0005) #include<iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include "uart.h"
(0009) #include "wg26.h"
(0010) #include "util.h"
(0011) #include "tips.h"
(0012) #include "timer.h"
(0013) #include "ringandscreen.h"
(0014) #include "eeprom.h"
(0015) 
(0016) int main(void)
(0017) {
(0018)     unsigned int door_minitor_count = 0;
    014A 2744      CLR	R20
    014B 2755      CLR	R21
(0019)     unsigned char o[4];
(0020)     unsigned char in[4] = {0x12, 0x34, 0x56, 0x78};
    014C E680      LDI	R24,0x60
    014D E090      LDI	R25,0
    014E 01FE      MOVW	R30,R28
    014F 9637      ADIW	R30,7
    0150 E004      LDI	R16,4
    0151 E010      LDI	R17,0
    0152 93FA      ST	R31,-Y
    0153 93EA      ST	R30,-Y
    0154 939A      ST	R25,-Y
    0155 938A      ST	R24,-Y
    0156 940E08ED  CALL	asgncblk
(0021) 
(0022) 	unsigned char i;
(0023) 	
(0024)     uart0_init();
    0158 940E06B4  CALL	_uart0_init
(0025)     init_interrupt();
    015A D04D      RCALL	_init_interrupt
(0026)     tips_port_init();
    015B D126      RCALL	_tips_port_init
(0027)     timer_init();
    015C D35F      RCALL	_timer_init
(0028)     at24c256_init();
    015D D467      RCALL	_at24c256_init
(0029)     printf("running...");
    015E E700      LDI	R16,0x70
    015F E010      LDI	R17,0
    0160 940E09CB  CALL	_printf
    0162 C040      RJMP	0x01A3
(0030) 
(0031)     while(1)
(0032)     {
(0033)         //door open.
(0034)         if(check_door())
    0163 D459      RCALL	_check_door
    0164 2300      TST	R16
    0165 F059      BEQ	0x0171
(0035)         {
(0036)             door_minitor_count++;
    0166 5F4F      SUBI	R20,0xFF
    0167 4F5F      SBCI	R21,0xFF
(0037)             if(door_minitor_count>20)
    0168 E184      LDI	R24,0x14
    0169 E090      LDI	R25,0
    016A 1784      CP	R24,R20
    016B 0795      CPC	R25,R21
    016C F448      BCC	0x0176
(0038)             {
(0039)                 tips_err();
    016D D130      RCALL	_tips_err
(0040)                 door_minitor_count = 0;
    016E 2744      CLR	R20
    016F 2755      CLR	R21
(0041)             }
(0042)         }
    0170 C005      RJMP	0x0176
(0043)         else
(0044)         {
(0045)             if(door_minitor_count)
    0171 3040      CPI	R20,0
    0172 0745      CPC	R20,R21
    0173 F011      BEQ	0x0176
(0046)                 door_minitor_count = 0;
    0174 2744      CLR	R20
    0175 2755      CLR	R21
(0047)         }
(0048)     rw24c256((char*)(&in), 4, 1, RW24C256WRITE);
    0176 2422      CLR	R2
    0177 822A      STD	Y+2,R2
    0178 E081      LDI	R24,1
    0179 E090      LDI	R25,0
    017A 8399      STD	Y+1,R25
    017B 8388      STD	Y+0,R24
    017C E024      LDI	R18,4
    017D 018E      MOVW	R16,R28
    017E 5F09      SUBI	R16,0xF9
    017F 4F1F      SBCI	R17,0xFF
    0180 D44B      RCALL	_rw24c256
(0049)     printf("writed.");
    0181 E608      LDI	R16,0x68
    0182 E010      LDI	R17,0
    0183 940E09CB  CALL	_printf
(0050)     delay_ms(5000);
    0185 E808      LDI	R16,0x88
    0186 E113      LDI	R17,0x13
    0187 D0EB      RCALL	_delay_ms
(0051)     rw24c256((char*)(&o), 4, 1, RW24C256READ);
    0188 E081      LDI	R24,1
    0189 838A      STD	Y+2,R24
    018A 2799      CLR	R25
    018B 940E0A53  CALL	0xA53
    018D D43E      RCALL	_rw24c256
(0052) 	for(i=0;i<4;i++)
    018E 2766      CLR	R22
    018F C011      RJMP	0x01A1
(0053)     {
(0054) 		printf("s%d:%xe",i,o[i]);
    0190 01CE      MOVW	R24,R28
    0191 9603      ADIW	R24,3
    0192 2FE6      MOV	R30,R22
    0193 27FF      CLR	R31
    0194 0FE8      ADD	R30,R24
    0195 1FF9      ADC	R31,R25
    0196 8020      LDD	R2,Z+0
    0197 2433      CLR	R3
    0198 8239      STD	Y+1,R3
    0199 8228      STD	Y+0,R2
    019A 2F26      MOV	R18,R22
    019B 2733      CLR	R19
    019C E600      LDI	R16,0x60
    019D E010      LDI	R17,0
    019E 940E09CB  CALL	_printf
    01A0 9563      INC	R22
    01A1 3064      CPI	R22,4
    01A2 F368      BCS	0x0190
    01A3 CFBF      RJMP	0x0163
(0055) 	}
(0056)     //printf("read :%x", o);
(0057)     }
(0058)     return 0;
    01A4 2700      CLR	R16
    01A5 2711      CLR	R17
    01A6 962B      ADIW	R28,0xB
    01A7 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\wg26.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "password.h"
(0004) #include "timer.h"
(0005) 
(0006) //pd2 input wg26 d0, pd3 input wg26 pd3.
(0007) //wg26 d0 is 0, d1 is 1.
(0008) void init_interrupt(void)
(0009) {
(0010)     //pd2,pd3 input mode.
(0011)     DDRD &= 0xf3;
_init_interrupt:
    01A8 B381      IN	R24,0x11
    01A9 7F83      ANDI	R24,0xF3
    01AA BB81      OUT	0x11,R24
(0012)     //上拉。
(0013)     PORTD |= 0x0c;
    01AB B382      IN	R24,0x12
    01AC 608C      ORI	R24,0xC
    01AD BB82      OUT	0x12,R24
(0014)     //enable interrupt.
(0015)     SREG |= 0x80;
    01AE 9478      BSET	7
(0016)     //int1 int0 enable.
(0017)     GICR |= 0xc0;
    01AF B78B      IN	R24,0x3B
    01B0 6C80      ORI	R24,0xC0
    01B1 BF8B      OUT	0x3B,R24
(0018)     //int1 int0 fall edge.
(0019)     MCUCR |= 0x0a;
    01B2 B785      IN	R24,0x35
    01B3 608A      ORI	R24,0xA
    01B4 BF85      OUT	0x35,R24
(0020)     return;
    01B5 9508      RET
(0021) }
(0022) //diable reader.
(0023) static void disable_reader(void)
(0024) {
(0025)     GICR &= 0x3f;
_disable_reader:
    01B6 B78B      IN	R24,0x3B
    01B7 738F      ANDI	R24,0x3F
    01B8 BF8B      OUT	0x3B,R24
(0026)     return;
    01B9 9508      RET
(0027) }
(0028) //enable reader.
(0029) static void enable_reader(void)
(0030) {
(0031)     GICR |= 0xc0;
_enable_reader:
    01BA B78B      IN	R24,0x3B
    01BB 6C80      ORI	R24,0xC0
    01BC BF8B      OUT	0x3B,R24
(0032)     return;
    01BD 9508      RET
_id_reader_check:
  id_code              --> Y+0
    01BE 940E080A  CALL	push_arg4
(0033) }
(0034) 
(0035) //id card id.
(0036) static unsigned long id_code = 0;
(0037) //read flags.
(0038) static unsigned int id_reader_flags = 0;
(0039) //read count.
(0040) static char read_count = 0;
(0041) //define reader flags.
(0042) #define IDREADERFLAG_WAITING 0x0000
(0043) #define IDREADERFLAG_READING 0x0001
(0044) #define IDREADERFLAG_READED 0x0002
(0045) //id code check.
(0046) static char id_reader_check(unsigned long id_code)
(0047) {
(0048)     return 0;
    01C0 2700      CLR	R16
    01C1 9624      ADIW	R28,4
    01C2 9508      RET
_read_time_out:
  timer                --> R10
    01C3 940E087A  CALL	push_gset3
    01C5 2EA0      MOV	R10,R16
    01C6 9722      SBIW	R28,2
(0049) }
(0050) 
(0051) //read timeout.
(0052) static void read_time_out(char timer)
(0053) {
(0054)     if(timer == IDREADERTIMEOUTTIMER)
    01C7 20AA      TST	R10
    01C8 F009      BEQ	0x01CA
    01C9 C03E      RJMP	0x0208
(0055)     {
(0056)         //disable reader.
(0057)         disable_reader();
    01CA DFEB      RCALL	_disable_reader
(0058)         id_reader_flags = IDREADERFLAG_READED;
    01CB E082      LDI	R24,2
    01CC 940E0B2E  CALL	0xB2E
(0059)         //read ok.
(0060)         if(read_count==26) //id card.
    01CE 91800081  LDS	R24,read_count
    01D0 318A      CPI	R24,0x1A
    01D1 F511      BNE	0x01F4
(0061)         {
(0062)             if(!id_reader_check(id_code))
    01D2 9120007D  LDS	R18,id_code+2
    01D4 9130007E  LDS	R19,id_code+3
    01D6 9100007B  LDS	R16,id_code
    01D8 9110007C  LDS	R17,id_code+1
    01DA DFE3      RCALL	_id_reader_check
    01DB 2300      TST	R16
    01DC F009      BEQ	0x01DE
    01DD C021      RJMP	0x01FF
(0063)             {
(0064)                 id_code &= 0x01fffffe;
    01DE EF4E      LDI	R20,0xFE
    01DF EF5F      LDI	R21,0xFF
    01E0 EF6F      LDI	R22,0xFF
    01E1 E071      LDI	R23,1
    01E2 940E0A4A  CALL	0xA4A
    01E4 940E0B61  CALL	0xB61
    01E6 940E09F9  CALL	0x9F9
(0065)                 id_code >>= 1;
    01E8 9456      LSR	R5
    01E9 9447      ROR	R4
    01EA 9437      ROR	R3
    01EB 9427      ROR	R2
    01EC 940E09F9  CALL	0x9F9
(0066)                 password_handle(IDREADEDIDCARD, id_code);
    01EE 8248      STD	Y+0,R4
    01EF 8259      STD	Y+1,R5
    01F0 0191      MOVW	R18,R2
    01F1 2700      CLR	R16
    01F2 D19A      RCALL	_password_handle
(0067)             }
(0068)         }
    01F3 C00B      RJMP	0x01FF
(0069)         else if(read_count==4)//keypad input.
    01F4 91800081  LDS	R24,read_count
    01F6 3084      CPI	R24,4
    01F7 F439      BNE	0x01FF
    01F8 940E0A4A  CALL	0xA4A
(0070)         {
(0071)             password_handle(IDREADEDKEYPAD, id_code);
    01FA 8248      STD	Y+0,R4
    01FB 8259      STD	Y+1,R5
    01FC 0191      MOVW	R18,R2
    01FD E001      LDI	R16,1
    01FE D18E      RCALL	_password_handle
(0072)         }
(0073)         //enable reader.
(0074)         enable_reader();
    01FF DFBA      RCALL	_enable_reader
(0075)         id_reader_flags = IDREADERFLAG_WAITING;
    0200 2422      CLR	R2
    0201 2433      CLR	R3
    0202 92300080  STS	id_reader_flags+1,R3
    0204 9220007F  STS	id_reader_flags,R2
(0076)         read_count = 0;
    0206 92200081  STS	read_count,R2
(0077)     }
(0078)     return;
    0208 9622      ADIW	R28,2
    0209 940E0870  CALL	pop_gset3
    020B 9508      RET
_set_id_reading_status:
    020C 940E087C  CALL	push_gset2
    020E 9722      SBIW	R28,2
(0079) }
(0080) //set status.
(0081) static void set_id_reading_status(void)
(0082) {
(0083)     if(id_reader_flags!=IDREADERFLAG_READING)
    020F 9180007F  LDS	R24,id_reader_flags
    0211 91900080  LDS	R25,id_reader_flags+1
    0213 3081      CPI	R24,1
    0214 E0E0      LDI	R30,0
    0215 079E      CPC	R25,R30
    0216 F0A9      BEQ	0x022C
(0084)     {
(0085)         id_reader_flags = IDREADERFLAG_READING;
    0217 E081      LDI	R24,1
    0218 940E0B2E  CALL	0xB2E
    021A 940E0A3C  CALL	0xA3C
(0086)         id_code = 0;
    021C 9350007C  STS	id_code+1,R21
    021E 9340007B  STS	id_code,R20
    0220 9370007E  STS	id_code+3,R23
    0222 9360007D  STS	id_code+2,R22
(0087)         //1*200ms.
(0088)         set_timer(IDREADERTIMEOUTTIMER, 1, read_time_out);
    0224 E584      LDI	R24,0x54
    0225 E090      LDI	R25,0
    0226 8399      STD	Y+1,R25
    0227 8388      STD	Y+0,R24
    0228 E021      LDI	R18,1
    0229 E030      LDI	R19,0
    022A 2700      CLR	R16
    022B D29F      RCALL	_set_timer
(0089)     }
(0090)     return;
    022C 9622      ADIW	R28,2
    022D 940E086E  CALL	pop_gset2
    022F 9508      RET
_int0_isr:
    0230 940E0B48  CALL	0xB48
(0091) }
(0092) //pull id card id and keypad input.
(0093) #pragma interrupt_handler int0_isr:2
(0094) void int0_isr(void)
(0095) {
(0096)     set_id_reading_status();
    0232 DFD9      RCALL	_set_id_reading_status
(0097)     if(!(PIND&0x08))
    0233 9983      SBIC	0x10,3
    0234 C00D      RJMP	0x0242
    0235 940E09E4  CALL	<created procedures>
    0237 940E0ACD  CALL	0xACD
(0098)     {
(0099)         id_code <<= 1;
(0100)         id_code |= 1;
    0239 2A24      OR	R2,R20
    023A 2A35      OR	R3,R21
    023B 2A46      OR	R4,R22
    023C 2A57      OR	R5,R23
    023D 940E09F9  CALL	0x9F9
    023F 940E0AC7  CALL	0xAC7
(0101)         ++read_count;
(0102)     }
    0241 C006      RJMP	0x0248
(0103)     else if(!(PIND&0x04))
    0242 9982      SBIC	0x10,2
    0243 C004      RJMP	0x0248
    0244 940E09E4  CALL	<created procedures>
    0246 940E0AC7  CALL	0xAC7
(0104)     {
(0105)         id_code <<= 1;
(0106)         ++read_count;
(0107)     }
(0108)     return;
    0248 940E086E  CALL	pop_gset2
    024A 940E08D6  CALL	pop_lset
    024C 9518      RETI
_int1_isr:
    024D 940E0B48  CALL	0xB48
(0109) }
(0110) #pragma interrupt_handler int1_isr:3
(0111) void int1_isr(void)
(0112) {
(0113)     set_id_reading_status();
    024F DFBC      RCALL	_set_id_reading_status
(0114)     if(!(PIND&0x08))
    0250 9983      SBIC	0x10,3
    0251 C00D      RJMP	0x025F
    0252 940E09E4  CALL	<created procedures>
    0254 940E0ACD  CALL	0xACD
(0115)     {
(0116)         id_code <<= 1;
(0117)         id_code |= 1;
    0256 2A24      OR	R2,R20
    0257 2A35      OR	R3,R21
    0258 2A46      OR	R4,R22
    0259 2A57      OR	R5,R23
    025A 940E09F9  CALL	0x9F9
    025C 940E0AC7  CALL	0xAC7
(0118)         ++read_count;
(0119)     }
    025E C006      RJMP	0x0265
(0120)     else if(!(PIND&0x04))
    025F 9982      SBIC	0x10,2
    0260 C004      RJMP	0x0265
    0261 940E09E4  CALL	<created procedures>
    0263 940E0AC7  CALL	0xAC7
(0121)     {
(0122)         id_code <<= 1;
(0123)         ++read_count;
(0124)     }
(0125)     return;
    0265 940E086E  CALL	pop_gset2
    0267 940E08D6  CALL	pop_lset
    0269 9518      RETI
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\util.c
(0001) #include "util.h"
(0002) 
(0003) #define XTAL    8
(0004) void delay_1ms(void)
(0005) {
(0006)     int i;
(0007)     //XTAL*143-2 = 1142
(0008)     for(i=1;i<1142;i++);
_delay_1ms:
  i                    --> R16
    026A E001      LDI	R16,1
    026B E010      LDI	R17,0
    026C 5F0F      SUBI	R16,0xFF
    026D 4F1F      SBCI	R17,0xFF
    026E 3706      CPI	R16,0x76
    026F E0E4      LDI	R30,4
    0270 071E      CPC	R17,R30
    0271 F3D4      BLT	0x026C
    0272 9508      RET
_delay_ms:
  i                    --> R20
  ms                   --> R22
    0273 940E087C  CALL	push_gset2
    0275 01B8      MOVW	R22,R16
(0009) }
(0010) //=========================================
(0011) void delay_ms(int ms)
(0012) {
(0013)     int i=0;
    0276 2744      CLR	R20
    0277 2755      CLR	R21
    0278 C003      RJMP	0x027C
(0014)     while(i<ms)
(0015)     {
(0016)         delay_1ms();
    0279 DFF0      RCALL	_delay_1ms
(0017)         i++;
    027A 5F4F      SUBI	R20,0xFF
    027B 4F5F      SBCI	R21,0xFF
    027C 1746      CP	R20,R22
    027D 0757      CPC	R21,R23
    027E F3D4      BLT	0x0279
    027F 940E086E  CALL	pop_gset2
    0281 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\tips.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "tips.h"
(0005) #include "util.h"
(0006) 
(0007) #define BEEP_ON (PORTD&=0xef)
(0008) #define BEEP_OFF (PORTD|=0x10)
(0009) #define LED_ON (PORTD&=0xdf)
(0010) #define LED_OFF (PORTD|=0x20)
(0011) 
(0012) //pd4 beep,pd5 led.
(0013) void tips_port_init(void)
(0014) {
(0015)     //PIND4 & PIND5 OUTPUT AND pull-up resistors.
(0016)     PORTD |= 0x30;
_tips_port_init:
    0282 B382      IN	R24,0x12
    0283 6380      ORI	R24,0x30
    0284 BB82      OUT	0x12,R24
(0017)     DDRD |= 0x30;
    0285 B381      IN	R24,0x11
    0286 6380      ORI	R24,0x30
    0287 BB81      OUT	0x11,R24
(0018)     return;
    0288 9508      RET
(0019) }
(0020) //led on.
(0021) void tips_led_on(void)
(0022) {
(0023)     LED_ON;
_tips_led_on:
    0289 B382      IN	R24,0x12
    028A 7D8F      ANDI	R24,0xDF
    028B BB82      OUT	0x12,R24
(0024)     return;
    028C 9508      RET
(0025) }
(0026) //led off.
(0027) void tips_led_off(void)
(0028) {
(0029)     LED_OFF;
_tips_led_off:
    028D 9A95      SBI	0x12,5
(0030)     return;
    028E 9508      RET
(0031) }
(0032) //beep on.
(0033) void tips_beep_on(void)
(0034) {
(0035)     BEEP_ON;
_tips_beep_on:
    028F B382      IN	R24,0x12
    0290 7E8F      ANDI	R24,0xEF
    0291 BB82      OUT	0x12,R24
(0036)     return;
    0292 9508      RET
(0037) }
(0038) //beep off.
(0039) void tips_beep_off(void)
(0040) {
(0041)     BEEP_OFF;
_tips_beep_off:
    0293 9A94      SBI	0x12,4
(0042)     return;
    0294 9508      RET
(0043) }
(0044) //__------__ 6 pices.pice per 0.4 seconds.
(0045) void tips_ok(void)
(0046) {
(0047)     LED_ON;
_tips_ok:
    0295 B382      IN	R24,0x12
    0296 7D8F      ANDI	R24,0xDF
    0297 BB82      OUT	0x12,R24
    0298 940E0AEA  CALL	0xAEA
(0048)     BEEP_ON;
(0049)     //2.4 seconds.
(0050)     delay_ms(400);
    029A DFD8      RCALL	_delay_ms
(0051)     LED_OFF;
    029B 9A95      SBI	0x12,5
(0052)     BEEP_OFF;
    029C 9A94      SBI	0x12,4
(0053)     return;
    029D 9508      RET
(0054) }
(0055) //_-_-___-_-_
(0056) void tips_err(void)
(0057) {
(0058)     BEEP_ON;
_tips_err:
    029E 940E0A7D  CALL	0xA7D
(0059)     delay_ms(100);
    02A0 DFD2      RCALL	_delay_ms
(0060)     BEEP_OFF;
    02A1 9A94      SBI	0x12,4
(0061)     delay_ms(100);
    02A2 E604      LDI	R16,0x64
    02A3 E010      LDI	R17,0
    02A4 DFCE      RCALL	_delay_ms
    02A5 940E0A7D  CALL	0xA7D
(0062)     BEEP_ON;
(0063)     delay_ms(100);
    02A7 DFCB      RCALL	_delay_ms
(0064)     BEEP_OFF;
    02A8 9A94      SBI	0x12,4
(0065)  
(0066)     delay_ms(200);
    02A9 EC08      LDI	R16,0xC8
    02AA E010      LDI	R17,0
    02AB DFC7      RCALL	_delay_ms
    02AC 940E0A7D  CALL	0xA7D
(0067)  
(0068)     BEEP_ON;
(0069)     delay_ms(100);
    02AE DFC4      RCALL	_delay_ms
(0070)     BEEP_OFF;
    02AF 9A94      SBI	0x12,4
(0071)     delay_ms(100);
    02B0 E604      LDI	R16,0x64
    02B1 E010      LDI	R17,0
    02B2 DFC0      RCALL	_delay_ms
    02B3 940E0A7D  CALL	0xA7D
(0072)     BEEP_ON;
(0073)     delay_ms(100);
    02B5 DFBD      RCALL	_delay_ms
(0074)     BEEP_OFF;
    02B6 9A94      SBI	0x12,4
(0075)     return;
    02B7 9508      RET
(0076) }
(0077) //_----_-_-_
(0078) void tips_id_ok(void)
(0079) {
(0080)     BEEP_ON;
_tips_id_ok:
    02B8 B382      IN	R24,0x12
    02B9 7E8F      ANDI	R24,0xEF
    02BA BB82      OUT	0x12,R24
(0081)     delay_ms(200);
    02BB EC08      LDI	R16,0xC8
    02BC E010      LDI	R17,0
    02BD DFB5      RCALL	_delay_ms
(0082)     BEEP_OFF;
    02BE 9A94      SBI	0x12,4
(0083)     delay_ms(200);
    02BF EC08      LDI	R16,0xC8
    02C0 E010      LDI	R17,0
    02C1 DFB1      RCALL	_delay_ms
    02C2 940E0A7D  CALL	0xA7D
(0084) 
(0085)     BEEP_ON;
(0086)     delay_ms(100);
    02C4 DFAE      RCALL	_delay_ms
(0087)     BEEP_OFF;
    02C5 9A94      SBI	0x12,4
(0088)     delay_ms(100);
    02C6 E604      LDI	R16,0x64
    02C7 E010      LDI	R17,0
    02C8 DFAA      RCALL	_delay_ms
    02C9 940E0A7D  CALL	0xA7D
(0089)     BEEP_ON;
(0090)     delay_ms(100);
    02CB DFA7      RCALL	_delay_ms
(0091)     BEEP_OFF;
    02CC 9A94      SBI	0x12,4
(0092)     return;
    02CD 9508      RET
(0093) }
(0094) //__------__-----__
(0095) void tips_ring_on(void)
(0096) {
(0097)     BEEP_ON;
_tips_ring_on:
    02CE 940E0AEA  CALL	0xAEA
(0098)     //2.4 seconds.
(0099)     delay_ms(400);
    02D0 DFA2      RCALL	_delay_ms
(0100)     BEEP_OFF;
    02D1 9A94      SBI	0x12,4
(0101)     delay_ms(400);
    02D2 E900      LDI	R16,0x90
    02D3 E011      LDI	R17,1
    02D4 DF9E      RCALL	_delay_ms
    02D5 940E0AEA  CALL	0xAEA
(0102)     BEEP_ON;
(0103)     //2.4 seconds.
(0104)     delay_ms(400);
    02D7 DF9B      RCALL	_delay_ms
(0105)     BEEP_OFF;
    02D8 9A94      SBI	0x12,4
(0106)     return;
    02D9 9508      RET
_readPasswordItemNum:
  num                  --> Y+3
    02DA 9724      SBIW	R28,4
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\password.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "log.h"
(0005) #include "locker.h"
(0006) #include "tips.h"
(0007) #include "timer.h"
(0008) #include "eeprom.h"
(0009) #include "password.h"
(0010) 
(0011) //eeprom 
(0012) //addr: 0 number.
(0013) 
(0014) // 1: flags
(0015) // 2,3,4,5: id Card.
(0016) // 6,7,8,9: password H
(0017) // 10,11,12,13 :password L
(0018) 
(0019) // 14: flags
(0020) // 15,16,17,18: id Card.
(0021) // 19,20,21,22: password H
(0022) // 23,24,25,26 :password L
(0023) 
(0024) unsigned char readPasswordItemNum(void)
(0025) {
(0026)     unsigned char num = 0;
    02DB 2422      CLR	R2
    02DC 822B      STD	Y+3,R2
(0027) 
(0028)     rw24c256(&num, 1, 0, RW24C256READ);
    02DD E081      LDI	R24,1
    02DE 838A      STD	Y+2,R24
    02DF 940E0AF0  CALL	0xAF0
    02E1 D2EA      RCALL	_rw24c256
(0029)     return num;
    02E2 810B      LDD	R16,Y+3
    02E3 9624      ADIW	R28,4
    02E4 9508      RET
_readPasswordItem:
  t                    --> Y+20
  item                 --> Y+7
  tmp                  --> Y+3
  index                --> R12
    02E5 940E0878  CALL	push_gset4
    02E7 2EC2      MOV	R12,R18
    02E8 0158      MOVW	R10,R16
    02E9 9765      SBIW	R28,0x15
(0030) }
(0031) 
(0032) passwordItem_t readPasswordItem(unsigned char index)
(0033) {
(0034)     passwordItem_t item;
(0035)     unsigned char t = 0;
    02EA 2422      CLR	R2
    02EB 8A2C      STD	Y+20,R2
    02EC 940E0A13  CALL	0xA13
    02EE 940E0B6B  CALL	0xB6B
(0036)     unsigned long tmp = 0;
(0037) 
(0038)     rw24c256(&t, 1, index*13+1, RW24C256READ);
    02F0 018E      MOVW	R16,R28
    02F1 5E0C      SUBI	R16,0xEC
    02F2 4F1F      SBCI	R17,0xFF
    02F3 D2D8      RCALL	_rw24c256
(0039)     item.flags = t;
    02F4 882C      LDD	R2,Y+20
    02F5 822F      STD	Y+7,R2
    02F6 940E0A13  CALL	0xA13
(0040) 
(0041)     tmp = 0;
(0042)     rw24c256((unsigned char*)&tmp, 4, index*13+2, RW24C256READ);
    02F8 9602      ADIW	R24,2
    02F9 940E0A53  CALL	0xA53
    02FB D2D0      RCALL	_rw24c256
    02FC 940E0AD7  CALL	0xAD7
(0043)     item.idCard = tmp;
    02FE 8620      STD	Z+8,R2
    02FF 8631      STD	Z+9,R3
    0300 8642      STD	Z+10,R4
    0301 8653      STD	Z+11,R5
    0302 940E0A13  CALL	0xA13
(0044)     
(0045)     tmp = 0;
(0046)     rw24c256((unsigned char*)&tmp, 4, index*13+6, RW24C256READ);
    0304 9606      ADIW	R24,6
    0305 940E0A53  CALL	0xA53
    0307 D2C4      RCALL	_rw24c256
    0308 940E0AD7  CALL	0xAD7
(0047)     item.passwordH = tmp;
    030A 8624      STD	Z+12,R2
    030B 8635      STD	Z+13,R3
    030C 8646      STD	Z+14,R4
    030D 8657      STD	Z+15,R5
    030E 940E0A13  CALL	0xA13
(0048)     
(0049)     tmp = 0;
(0050)     rw24c256((unsigned char*)&tmp, 4, index*13+10, RW24C256READ);
    0310 960A      ADIW	R24,0xA
    0311 940E0A53  CALL	0xA53
    0313 D2B8      RCALL	_rw24c256
    0314 940E0AD7  CALL	0xAD7
(0051)     item.passwordL = tmp;
    0316 8A20      STD	Z+16,R2
    0317 8A31      STD	Z+17,R3
    0318 8A42      STD	Z+18,R4
    0319 8A53      STD	Z+19,R5
(0052)     
(0053)     return item;
    031A 01CE      MOVW	R24,R28
    031B 9607      ADIW	R24,7
    031C E00D      LDI	R16,0xD
    031D E010      LDI	R17,0
    031E 92BA      ST	R11,-Y
    031F 92AA      ST	R10,-Y
    0320 939A      ST	R25,-Y
    0321 938A      ST	R24,-Y
    0322 940E0906  CALL	asgnblk
    0324 9665      ADIW	R28,0x15
    0325 D54C      RCALL	pop_gset4
    0326 9508      RET
_insertPasswordItem:
  tmp                  --> Y+3
  item                 --> R12
  index                --> R10
    0327 D550      RCALL	push_gset4
    0328 0169      MOVW	R12,R18
    0329 2EA0      MOV	R10,R16
    032A 9727      SBIW	R28,7
    032B 940E0A3C  CALL	0xA3C
(0054) }
(0055) 
(0056) void insertPasswordItem(unsigned char index, passwordItem_t item)
(0057) {
(0058)     unsigned long tmp = 0;
    032D 01FE      MOVW	R30,R28
    032E 8343      STD	Z+3,R20
    032F 8354      STD	Z+4,R21
    0330 8365      STD	Z+5,R22
    0331 8376      STD	Z+6,R23
(0059) 
(0060)     rw24c256(&(item.flags), 1, index*13+1, RW24C256WRITE);
    0332 2422      CLR	R2
    0333 822A      STD	Y+2,R2
    0334 E08D      LDI	R24,0xD
    0335 9D8A      MUL	R24,R10
    0336 01C0      MOVW	R24,R0
    0337 940E0B6B  CALL	0xB6B
    0339 0186      MOVW	R16,R12
    033A D291      RCALL	_rw24c256
(0061) 
(0062)     tmp = item.idCard;
    033B 01F6      MOVW	R30,R12
    033C 8021      LDD	R2,Z+1
    033D 8032      LDD	R3,Z+2
    033E 8043      LDD	R4,Z+3
    033F 8054      LDD	R5,Z+4
    0340 940E0A83  CALL	0xA83
(0063)     rw24c256((unsigned char*)&tmp, 4, index*13+2, RW24C256WRITE);
    0342 9602      ADIW	R24,2
    0343 940E0A53  CALL	0xA53
    0345 D286      RCALL	_rw24c256
(0064)     
(0065)     tmp = item.passwordH;
    0346 01F6      MOVW	R30,R12
    0347 8025      LDD	R2,Z+5
    0348 8036      LDD	R3,Z+6
    0349 8047      LDD	R4,Z+7
    034A 8450      LDD	R5,Z+8
    034B 940E0A83  CALL	0xA83
(0066)     rw24c256((unsigned char*)&tmp, 4, index*13+6, RW24C256WRITE);
    034D 9606      ADIW	R24,6
    034E 940E0A53  CALL	0xA53
    0350 D27B      RCALL	_rw24c256
(0067)     
(0068)     tmp = item.passwordL;
    0351 01F6      MOVW	R30,R12
    0352 8421      LDD	R2,Z+9
    0353 8432      LDD	R3,Z+10
    0354 8443      LDD	R4,Z+11
    0355 8454      LDD	R5,Z+12
    0356 940E0A83  CALL	0xA83
(0069)     rw24c256((unsigned char*)&tmp, 4, index*13+10, RW24C256WRITE);
    0358 960A      ADIW	R24,0xA
    0359 940E0A53  CALL	0xA53
    035B D270      RCALL	_rw24c256
(0070) 
(0071)     return;
    035C 9627      ADIW	R28,7
    035D D514      RCALL	pop_gset4
    035E 9508      RET
_writePasswordItemNum:
  num                  --> Y+3
    035F 931A      ST	R17,-Y
    0360 930A      ST	R16,-Y
    0361 9723      SBIW	R28,3
(0072) }
(0073) 
(0074) void writePasswordItemNum(unsigned char num)
(0075) {
(0076)     rw24c256(&num, 1, 0, RW24C256WRITE);
    0362 2422      CLR	R2
    0363 822A      STD	Y+2,R2
    0364 940E0AF0  CALL	0xAF0
    0366 D265      RCALL	_rw24c256
(0077)     return;
    0367 9625      ADIW	R28,5
    0368 9508      RET
_clear_pswd_status:
    0369 D512      RCALL	push_gset2
    036A 940E0ACD  CALL	0xACD
(0078) }
(0079) 
(0080) #define PASSWORDREADIDCARDUNKOWN    0
(0081) #define PASSWORDREADIDCARDOK                1
(0082) #define PASSWORDREADIDANDPSWDOK         2
(0083) 
(0084) static unsigned char password_read_flags = 0;
(0085) static unsigned char current_index = 0;
(0086) static unsigned char input_err_count = 0;
(0087) 
(0088) //You input xxx then password is 1xxx.
(0089) static unsigned long passwordH = 1;
(0090) static unsigned long passwordL = 1;
(0091) 
(0092) static void clear_pswd_status(void)
(0093) {
(0094)     //clear last password input.
(0095)     passwordH = 1;
    036C 93500086  STS	passwordH+1,R21
    036E 93400085  STS	passwordH,R20
    0370 93700088  STS	passwordH+3,R23
    0372 93600087  STS	passwordH+2,R22
    0374 940E0A93  CALL	0xA93
(0096)     passwordL = 1;
(0097)     tips_led_off();
    0376 DF16      RCALL	_tips_led_off
(0098)     password_read_flags = PASSWORDREADIDCARDUNKOWN;
    0377 2422      CLR	R2
    0378 92200082  STS	password_read_flags,R2
(0099)     current_index = 0;
    037A 92200083  STS	current_index,R2
(0100)     stop_timer(PASSWORDTIMEOUTTIMER);
    037C E001      LDI	R16,1
    037D D16D      RCALL	_stop_timer
(0101)     return;
    037E D4EF      RCALL	pop_gset2
    037F 9508      RET
(0102) }
(0103) 
(0104) //cannot input timeout.
(0105) static void cannot_input_time_out(char timer)
(0106) {
(0107)     if(timer==PASSWORDTIMEOUTTIMER)
_cannot_input_time_out:
  timer                --> R16
    0380 3001      CPI	R16,1
    0381 F419      BNE	0x0385
(0108)         input_err_count = 0;
    0382 2422      CLR	R2
    0383 92200084  STS	input_err_count,R2
(0109)     return;
    0385 9508      RET
_input_time_out:
  timer                --> R20
    0386 D4F7      RCALL	push_gset1
    0387 2F40      MOV	R20,R16
(0110) }
(0111) 
(0112) //input timeout.
(0113) static void input_time_out(char timer)
(0114) {
(0115)     if(timer==PASSWORDTIMEOUTTIMER)
    0388 3041      CPI	R20,1
    0389 F409      BNE	0x038B
(0116)         clear_pswd_status();
    038A DFDE      RCALL	_clear_pswd_status
(0117)     return;
    038B D4F5      RCALL	pop_gset1
    038C 9508      RET
_password_handle:
  current_item         --> Y+25
  pswd_item_num        --> R10
  i                    --> R12
  item                 --> Y+12
  code                 --> Y+48
  type                 --> R14
    038D 933A      ST	R19,-Y
    038E 932A      ST	R18,-Y
    038F D4E6      RCALL	push_gset5
    0390 2EE0      MOV	R14,R16
    0391 97A6      SBIW	R28,0x26
(0118) }
(0119) 
(0120) void password_handle(char type, unsigned long code)
(0121) {
(0122)     unsigned char pswd_item_num = 0;
    0392 24AA      CLR	R10
(0123)     unsigned char i;
(0124)     passwordItem_t item;
(0125) 
(0126)     //if input error count is too large.
(0127)     if(input_err_count>5)
    0393 E085      LDI	R24,5
    0394 90200084  LDS	R2,input_err_count
    0396 1582      CP	R24,R2
    0397 F440      BCC	0x03A0
(0128)     {
(0129)         clear_pswd_status();
    0398 DFD0      RCALL	_clear_pswd_status
(0130)         tips_err();
    0399 DF04      RCALL	_tips_err
(0131)         //set time out. 200ms*5*60
(0132)         set_timer(PASSWORDTIMEOUTTIMER, 300, cannot_input_time_out);
    039A E588      LDI	R24,0x58
    039B 940E0AE4  CALL	0xAE4
    039D E001      LDI	R16,1
    039E D12C      RCALL	_set_timer
(0133)         return;
    039F C118      RJMP	0x04B8
(0134)     }
(0135)  
(0136)     //read a card.
(0137)     if(type==IDREADEDIDCARD)
    03A0 20EE      TST	R14
    03A1 F009      BEQ	0x03A3
    03A2 C040      RJMP	0x03E3
(0138)     {
(0139)         clear_pswd_status();
    03A3 DFC5      RCALL	_clear_pswd_status
(0140)         //read paswd item num.
(0141)         pswd_item_num = readPasswordItemNum();
    03A4 DF35      RCALL	_readPasswordItemNum
    03A5 2EA0      MOV	R10,R16
(0142)         //loop find it.
(0143)         for(i=0;i<pswd_item_num;++i)
    03A6 24CC      CLR	R12
    03A7 C02E      RJMP	0x03D6
(0144)         {
(0145)             //read a item.
(0146)             item = readPasswordItem(i);
    03A8 940E0B5C  CALL	0xB5C
    03AA DF3A      RCALL	_readPasswordItem
(0147)             //if item need id card, and is this id card.
(0148)             if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
    03AB 842C      LDD	R2,Y+12
    03AC FE20      SBRS	R2,0
    03AD C027      RJMP	0x03D5
    03AE 01FE      MOVW	R30,R28
    03AF A820      LDD	R2,Z+48
    03B0 A831      LDD	R3,Z+49
    03B1 A842      LDD	R4,Z+50
    03B2 A853      LDD	R5,Z+51
    03B3 01FE      MOVW	R30,R28
    03B4 8465      LDD	R6,Z+13
    03B5 8476      LDD	R7,Z+14
    03B6 8487      LDD	R8,Z+15
    03B7 8890      LDD	R9,Z+16
    03B8 940E0AD2  CALL	0xAD2
    03BA F009      BEQ	0x03BC
    03BB C019      RJMP	0x03D5
(0149)             {
(0150)                 //need paswd.
(0151)                 if(item.flags&PASSWORDFLAGS_PASSWORD)
    03BC 842C      LDD	R2,Y+12
    03BD FE21      SBRS	R2,1
    03BE C00A      RJMP	0x03C9
(0152)                 {
(0153)                     //id card ok, but need password.
(0154)                     //tips_id_ok();
(0155)                     //id card ok, but not input password, led on.
(0156)                     tips_led_on();
    03BF DEC9      RCALL	_tips_led_on
(0157)                     current_index = i;
    03C0 92C00083  STS	current_index,R12
(0158)                     password_read_flags = PASSWORDREADIDCARDOK;
    03C2 E081      LDI	R24,1
    03C3 93800082  STS	password_read_flags,R24
    03C5 940E0B00  CALL	0xB00
(0159)                     //set time out. 200ms*5*30
(0160)                     set_timer(PASSWORDTIMEOUTTIMER, 150, input_time_out);
    03C7 D103      RCALL	_set_timer
(0161)                 }
    03C8 C0EF      RJMP	0x04B8
(0162)                 else //only id card.
(0163)                 {
(0164)                     //record log
(0165)                     log(LOGTYPEIDOK, i, code, 0, 0);
    03C9 940E0A22  CALL	0xA22
    03CB 2D2C      MOV	R18,R12
    03CC E001      LDI	R16,1
    03CD D18B      RCALL	_log
(0166)                     //clear pswd statuc.
(0167)                     clear_pswd_status();
    03CE DF9A      RCALL	_clear_pswd_status
(0168)                     tips_ok();
    03CF DEC5      RCALL	_tips_ok
(0169)                     locker_unlock();
    03D0 D18A      RCALL	_locker_unlock
(0170)                     //error count clear.
(0171)                     input_err_count = 0;
    03D1 2422      CLR	R2
    03D2 92200084  STS	input_err_count,R2
(0172)                 } //else
(0173)                 return;
    03D4 C0E3      RJMP	0x04B8
    03D5 94C3      INC	R12
    03D6 14CA      CP	R12,R10
    03D7 F408      BCC	0x03D9
    03D8 CFCF      RJMP	0x03A8
(0174)             }  //if((item.flags&PASSWORDFLAGS_ID)&&(item.idCard==code))
(0175)         }	  //for(i=0;i<pswd_item_num;++i)
(0176)         //unkown id card.
(0177)         log(LOGTYPEIDERR, 0, code, 0, 0);
    03D9 940E0A22  CALL	0xA22
    03DB 2722      CLR	R18
    03DC E002      LDI	R16,2
    03DD D17B      RCALL	_log
(0178)         //clear password.
(0179)         clear_pswd_status();
    03DE DF8A      RCALL	_clear_pswd_status
(0180)         //error password and log.
(0181)         tips_err();
    03DF DEBE      RCALL	_tips_err
    03E0 940E0ADE  CALL	0xADE
(0182)         //error count ++
(0183)         ++input_err_count;
(0184)         return;
    03E2 C0D5      RJMP	0x04B8
(0185)     }	  //if(type==IDREADEDIDCARD)
(0186)     else if(type==IDREADEDKEYPAD) // read a keypad input.
    03E3 2D8E      MOV	R24,R14
    03E4 3081      CPI	R24,1
    03E5 F009      BEQ	0x03E7
    03E6 C0D1      RJMP	0x04B8
(0187)     {
(0188)         code &= 0x0000000f;
    03E7 E04F      LDI	R20,0xF
    03E8 940E0A78  CALL	0xA78
    03EA 940E0A8E  CALL	0xA8E
    03EC 940E0B61  CALL	0xB61
    03EE 01FE      MOVW	R30,R28
    03EF AA20      STD	Z+48,R2
    03F0 AA31      STD	Z+49,R3
    03F1 AA42      STD	Z+50,R4
    03F2 AA53      STD	Z+51,R5
(0189)         if(code == 0x0000000a)  //*
    03F3 E04A      LDI	R20,0xA
    03F4 940E0A78  CALL	0xA78
    03F6 940E0A8E  CALL	0xA8E
    03F8 940E0B52  CALL	0xB52
    03FA F411      BNE	0x03FD
(0190)         {
(0191)             //clear password.
(0192)             clear_pswd_status();
    03FB DF6D      RCALL	_clear_pswd_status
(0193)         }
    03FC C0BB      RJMP	0x04B8
(0194)         else if(code == 0x0000000b) //#
    03FD E04B      LDI	R20,0xB
    03FE 940E0A78  CALL	0xA78
    0400 940E0A8E  CALL	0xA8E
    0402 940E0B52  CALL	0xB52
    0404 F009      BEQ	0x0406
    0405 C07D      RJMP	0x0483
(0195)         {
(0196)             //need id card password.
(0197)             if(password_read_flags==PASSWORDREADIDCARDOK)
    0406 91800082  LDS	R24,password_read_flags
    0408 3081      CPI	R24,1
    0409 F009      BEQ	0x040B
    040A C035      RJMP	0x0440
(0198)             {
(0199)                 passwordItem_t current_item = readPasswordItem(current_index);
    040B 91200083  LDS	R18,current_index
    040D 018E      MOVW	R16,R28
    040E 5E07      SUBI	R16,0xE7
    040F 4F1F      SBCI	R17,0xFF
    0410 DED4      RCALL	_readPasswordItem
    0411 940E0A41  CALL	0xA41
(0200)                 //password is ok.
(0201)                 if((current_item.passwordH==passwordH)&&(current_item.passwordL==passwordL))
    0413 01FE      MOVW	R30,R28
    0414 8C66      LDD	R6,Z+30
    0415 8C77      LDD	R7,Z+31
    0416 A080      LDD	R8,Z+32
    0417 A091      LDD	R9,Z+33
    0418 940E0AD2  CALL	0xAD2
    041A F009      BEQ	0x041C
    041B C017      RJMP	0x0433
    041C 940E0A63  CALL	0xA63
    041E 01FE      MOVW	R30,R28
    041F A062      LDD	R6,Z+34
    0420 A073      LDD	R7,Z+35
    0421 A084      LDD	R8,Z+36
    0422 A095      LDD	R9,Z+37
    0423 940E0AD2  CALL	0xAD2
    0425 F469      BNE	0x0433
    0426 940E0A02  CALL	0xA02
    0428 940E0AA0  CALL	0xAA0
(0202)                 {
(0203)                     log(LOGTYPEIDANDPSWDOK, current_index, current_item.idCard, passwordH, passwordL);
    042A E003      LDI	R16,3
    042B D12D      RCALL	_log
(0204)                     //clear password status.
(0205)                     clear_pswd_status();
    042C DF3C      RCALL	_clear_pswd_status
(0206)                     //unlock and write log.
(0207)                     tips_ok();
    042D DE67      RCALL	_tips_ok
(0208)                     locker_unlock();
    042E D12C      RCALL	_locker_unlock
(0209)                     //error count clear.
(0210)                     input_err_count = 0;
    042F 2422      CLR	R2
    0430 92200084  STS	input_err_count,R2
(0211)                 }
    0432 C085      RJMP	0x04B8
(0212)                 else //password is error.
(0213)                 {
(0214)                     log(LOGTYPEIDANDPSWDERR, current_index, current_item.idCard, passwordH, passwordL);
    0433 940E0A63  CALL	0xA63
    0435 940E0A02  CALL	0xA02
    0437 940E0AA0  CALL	0xAA0
    0439 E004      LDI	R16,4
    043A D11E      RCALL	_log
(0215)                     //clear password.
(0216)                     clear_pswd_status();
    043B DF2D      RCALL	_clear_pswd_status
(0217)                     //error password and log.
(0218)                     tips_err();
    043C DE61      RCALL	_tips_err
    043D 940E0ADE  CALL	0xADE
(0219)                     //error count ++.
(0220)                     ++input_err_count;
(0221)                 }
(0222)             }
    043F C078      RJMP	0x04B8
(0223)             else //only password.
(0224)             {
(0225)                 //read paswd item num.
(0226)                 pswd_item_num = readPasswordItemNum();
    0440 DE99      RCALL	_readPasswordItemNum
    0441 2EA0      MOV	R10,R16
(0227)                 //loop find it.
(0228)                 for(i=0;i<pswd_item_num;++i)
    0442 24CC      CLR	R12
    0443 C02C      RJMP	0x0470
(0229)                 {
(0230)                     //read a item.
(0231)                     item = readPasswordItem(i);
    0444 940E0B5C  CALL	0xB5C
    0446 DE9E      RCALL	_readPasswordItem
(0232)                     //if item need id card, and is this id card.
(0233)                     if((item.flags==PASSWORDFLAGS_PASSWORD)&&(item.passwordH==passwordH)
    0447 858C      LDD	R24,Y+12
    0448 3082      CPI	R24,2
    0449 F009      BEQ	0x044B
    044A C024      RJMP	0x046F
    044B 940E0A41  CALL	0xA41
    044D 01FE      MOVW	R30,R28
    044E 8861      LDD	R6,Z+17
    044F 8872      LDD	R7,Z+18
    0450 8883      LDD	R8,Z+19
    0451 8894      LDD	R9,Z+20
    0452 940E0AD2  CALL	0xAD2
    0454 F4D1      BNE	0x046F
    0455 940E0A63  CALL	0xA63
    0457 01FE      MOVW	R30,R28
    0458 8865      LDD	R6,Z+21
    0459 8876      LDD	R7,Z+22
    045A 8887      LDD	R8,Z+23
    045B 8C90      LDD	R9,Z+24
    045C 940E0AD2  CALL	0xAD2
    045E F481      BNE	0x046F
    045F 940E0A02  CALL	0xA02
    0461 940E0A3C  CALL	0xA3C
    0463 940E0B57  CALL	0xB57
(0234)                         &&(item.passwordL==passwordL))
(0235)                     {
(0236)                         log(LOGTYPEPSWDOK, i, 0, passwordH, passwordL);
    0465 2D2C      MOV	R18,R12
    0466 E005      LDI	R16,5
    0467 D0F1      RCALL	_log
(0237)                         //clear password.
(0238)                         clear_pswd_status();
    0468 DF00      RCALL	_clear_pswd_status
(0239)                         //password is right. unlock and log.
(0240)                         tips_ok();
    0469 DE2B      RCALL	_tips_ok
(0241)                         locker_unlock();
    046A D0F0      RCALL	_locker_unlock
(0242)                         //error count clear.
(0243)                         input_err_count = 0;
    046B 2422      CLR	R2
    046C 92200084  STS	input_err_count,R2
(0244)                         return;
    046E C049      RJMP	0x04B8
    046F 94C3      INC	R12
    0470 14CA      CP	R12,R10
    0471 F408      BCC	0x0473
    0472 CFD1      RJMP	0x0444
(0245)                     }
(0246)                 }
(0247)                 //password is error.
(0248)                 log(LOGTYPEPSWDERR, 0, 0, passwordH, passwordL);
    0473 940E0A63  CALL	0xA63
    0475 940E0A02  CALL	0xA02
    0477 940E0A3C  CALL	0xA3C
    0479 940E0B57  CALL	0xB57
    047B 2722      CLR	R18
    047C E006      LDI	R16,6
    047D D0DB      RCALL	_log
(0249)                 //clear password.
(0250)                 clear_pswd_status();
    047E DEEA      RCALL	_clear_pswd_status
(0251)                 //password is error, and log.
(0252)                 tips_err();
    047F DE1E      RCALL	_tips_err
    0480 940E0ADE  CALL	0xADE
(0253)                 //error count++.
(0254)                 ++input_err_count;
(0255)                 return;
    0482 C035      RJMP	0x04B8
(0256)             }
(0257)         }
(0258)         else
(0259)         {
(0260)             tips_led_on();
    0483 DE05      RCALL	_tips_led_on
    0484 940E0B00  CALL	0xB00
(0261)             //set time out. 200ms*5*30
(0262)             set_timer(PASSWORDTIMEOUTTIMER, 150, input_time_out);
    0486 D044      RCALL	_set_timer
    0487 940E0A63  CALL	0xA63
(0263)             passwordL = passwordL*10 + code;
    0489 E04A      LDI	R20,0xA
    048A E050      LDI	R21,0
    048B E060      LDI	R22,0
    048C E070      LDI	R23,0
    048D 940E0B70  CALL	0xB70
    048F 018A      MOVW	R16,R20
    0490 019B      MOVW	R18,R22
    0491 D3B0      RCALL	empy32u
    0492 0118      MOVW	R2,R16
    0493 0129      MOVW	R4,R18
    0494 01FE      MOVW	R30,R28
    0495 A860      LDD	R6,Z+48
    0496 A871      LDD	R7,Z+49
    0497 A882      LDD	R8,Z+50
    0498 A893      LDD	R9,Z+51
    0499 0C26      ADD	R2,R6
    049A 1C37      ADC	R3,R7
    049B 1C48      ADC	R4,R8
    049C 1C59      ADC	R5,R9
    049D 9230008A  STS	passwordL+1,R3
    049F 92200089  STS	passwordL,R2
    04A1 9250008C  STS	passwordL+3,R5
    04A3 9240008B  STS	passwordL+2,R4
(0264)             //passwordH save password hight 9 num.
(0265)             if(passwordL>999999999)
    04A5 EF4F      LDI	R20,0xFF
    04A6 EC59      LDI	R21,0xC9
    04A7 E96A      LDI	R22,0x9A
    04A8 E37B      LDI	R23,0x3B
    04A9 1542      CP	R20,R2
    04AA 0553      CPC	R21,R3
    04AB 0564      CPC	R22,R4
    04AC 0575      CPC	R23,R5
    04AD F450      BCC	0x04B8
(0266)             {
(0267)                 passwordH = passwordL;
    04AE 92300086  STS	passwordH+1,R3
    04B0 92200085  STS	passwordH,R2
    04B2 92500088  STS	passwordH+3,R5
    04B4 92400087  STS	passwordH+2,R4
    04B6 940E0A93  CALL	0xA93
(0268)                 passwordL = 1;
(0269)             }
(0270)         }
(0271)     }
(0272)     return;
    04B8 96A6      ADIW	R28,0x26
    04B9 D3BA      RCALL	pop_gset5
    04BA 9622      ADIW	R28,2
    04BB 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\timer.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "timer.h"
(0005) 
(0006) void timer_init(void)
(0007) {
(0008)     //enable interrupt.
(0009)     SREG |= 0x80;
_timer_init:
    04BC 9478      BSET	7
(0010)     //timer0 normal mode.ck/1024.
(0011)     TCCR0 |= 0x05;
    04BD B783      IN	R24,0x33
    04BE 6085      ORI	R24,5
    04BF BF83      OUT	0x33,R24
(0012)     //init TCNT0.
(0013)     TCNT0 = 0;
    04C0 2422      CLR	R2
    04C1 BE22      OUT	0x32,R2
(0014)     //TIMSK
(0015)     //TIMSK |= 0x01;
(0016)     return; 
    04C2 9508      RET
(0017) }
(0018) //cpu timer0 start
(0019) static void t0_start(void)
(0020) {
(0021)     TIMSK |= 0x01;
_t0_start:
    04C3 B789      IN	R24,0x39
    04C4 6081      ORI	R24,1
    04C5 BF89      OUT	0x39,R24
(0022)     return;
    04C6 9508      RET
(0023) }
(0024) //cpu timer0 stop
(0025) static void t0_stop(void)
(0026) {
(0027)     TIMSK &= 0xfe;
_t0_stop:
    04C7 B789      IN	R24,0x39
    04C8 7F8E      ANDI	R24,0xFE
    04C9 BF89      OUT	0x39,R24
(0028)     return;
    04CA 9508      RET
_set_timer:
  cb                   --> Y+4
  value                --> R22
  timer                --> R20
    04CB D3B0      RCALL	push_gset2
    04CC 01B9      MOVW	R22,R18
    04CD 2F40      MOV	R20,R16
(0029) }
(0030) //
(0031) static timer_t g_timer[MAXTIMER];
(0032) //set timer and start timer. set value 0, need wait a cpu timer pice.
(0033) void set_timer(char timer, int value, timerCB cb)
(0034) {
(0035)     //value=0, stoped timer.
(0036)     g_timer[timer].value = value+1;
    04CE E084      LDI	R24,4
    04CF 9F84      MUL	R24,R20
    04D0 940E0A6C  CALL	0xA6C
    04D2 01CB      MOVW	R24,R22
    04D3 9601      ADIW	R24,1
    04D4 8391      STD	Z+1,R25
    04D5 8380      STD	Z+0,R24
(0037)     g_timer[timer].cb = cb;
    04D6 E084      LDI	R24,4
    04D7 9F84      MUL	R24,R20
    04D8 940E0AC1  CALL	0xAC1
    04DA 800C      LDD	R0,Y+4
    04DB 801D      LDD	R1,Y+5
    04DC 8211      STD	Z+1,R1
    04DD 8200      STD	Z+0,R0
(0038)     if(g_timer[timer].value)
    04DE E084      LDI	R24,4
    04DF 9F84      MUL	R24,R20
    04E0 940E0A6C  CALL	0xA6C
    04E2 8020      LDD	R2,Z+0
    04E3 8031      LDD	R3,Z+1
    04E4 2022      TST	R2
    04E5 F411      BNE	0x04E8
    04E6 2033      TST	R3
    04E7 F009      BEQ	0x04E9
(0039)         t0_start();
    04E8 DFDA      RCALL	_t0_start
(0040)     return;
    04E9 D384      RCALL	pop_gset2
    04EA 9508      RET
(0041) }
(0042) //stop timer and clean timer.
(0043) void stop_timer(char timer)
(0044) {
(0045)     if(g_timer[timer].value)
_stop_timer:
  timer                --> R16
    04EB E084      LDI	R24,4
    04EC 9F80      MUL	R24,R16
    04ED 940E0A6C  CALL	0xA6C
    04EF 8020      LDD	R2,Z+0
    04F0 8031      LDD	R3,Z+1
    04F1 2022      TST	R2
    04F2 F411      BNE	0x04F5
    04F3 2033      TST	R3
    04F4 F059      BEQ	0x0500
(0046)     {
(0047)         //stop this timer.
(0048)         g_timer[timer].value = 0;
    04F5 E084      LDI	R24,4
    04F6 9F80      MUL	R24,R16
    04F7 940E0A6C  CALL	0xA6C
    04F9 940E0B22  CALL	0xB22
(0049)         g_timer[timer].cb = 0;
    04FB 9F80      MUL	R24,R16
    04FC 940E0AC1  CALL	0xAC1
    04FE 8231      STD	Z+1,R3
    04FF 8220      STD	Z+0,R2
(0050)     }
(0051)     return;
    0500 9508      RET
_timer0_isr:
  running_timer_count  --> R20
  i                    --> R22
    0501 D3C1      RCALL	push_lset
    0502 D379      RCALL	push_gset2
(0052) }
(0053) //timer spank.
(0054) #pragma interrupt_handler timer0_isr:10
(0055) void timer0_isr(void)
(0056) {
(0057)     static char time_pices = 0;
(0058)     ++time_pices;
    0503 9180008D  LDS	R24,time_pices
    0505 5F8F      SUBI	R24,0xFF
    0506 9380008D  STS	time_pices,R24
(0059)     //200ms.
(0060)     if(time_pices == 5)
    0508 3085      CPI	R24,5
    0509 F009      BEQ	0x050B
    050A C04B      RJMP	0x0556
(0061)     {
(0062)         char running_timer_count = 0;
    050B 2744      CLR	R20
(0063)         char i;
(0064)         for(i=0;i<MAXTIMER;i++)
    050C 2766      CLR	R22
    050D C03F      RJMP	0x054D
(0065)         {
(0066)             if(g_timer[i].value>1)
    050E E084      LDI	R24,4
    050F 9F86      MUL	R24,R22
    0510 940E0A6C  CALL	0xA6C
    0512 8020      LDD	R2,Z+0
    0513 8031      LDD	R3,Z+1
    0514 E081      LDI	R24,1
    0515 E090      LDI	R25,0
    0516 1582      CP	R24,R2
    0517 0593      CPC	R25,R3
    0518 F478      BCC	0x0528
(0067)             {
(0068)                 --g_timer[i].value;
    0519 E084      LDI	R24,4
    051A 9F86      MUL	R24,R22
    051B 0110      MOVW	R2,R0
    051C E48D      LDI	R24,0x4D
    051D E091      LDI	R25,1
    051E 0E28      ADD	R2,R24
    051F 1E39      ADC	R3,R25
    0520 01F1      MOVW	R30,R2
    0521 8180      LDD	R24,Z+0
    0522 8191      LDD	R25,Z+1
    0523 9701      SBIW	R24,1
    0524 8391      STD	Z+1,R25
    0525 8380      STD	Z+0,R24
(0069)                 ++running_timer_count;
    0526 9543      INC	R20
(0070)             }
    0527 C024      RJMP	0x054C
(0071)             //timer call back.
(0072)             else if(g_timer[i].value==1)
    0528 E084      LDI	R24,4
    0529 9F86      MUL	R24,R22
    052A 940E0A6C  CALL	0xA6C
    052C 8180      LDD	R24,Z+0
    052D 8191      LDD	R25,Z+1
    052E 3081      CPI	R24,1
    052F E0E0      LDI	R30,0
    0530 079E      CPC	R25,R30
    0531 F4D1      BNE	0x054C
(0073)             {
(0074)                 g_timer[i].value = 0;
    0532 E084      LDI	R24,4
    0533 9F86      MUL	R24,R22
    0534 940E0A6C  CALL	0xA6C
    0536 940E0B22  CALL	0xB22
(0075)                 if(g_timer[i].cb)
    0538 9F86      MUL	R24,R22
    0539 940E0AC1  CALL	0xAC1
    053B 8020      LDD	R2,Z+0
    053C 8031      LDD	R3,Z+1
    053D 2022      TST	R2
    053E F411      BNE	0x0541
    053F 2033      TST	R3
    0540 F059      BEQ	0x054C
(0076)                 {
(0077)                     //disable cpu timer.
(0078)                     t0_stop();
    0541 DF85      RCALL	_t0_stop
(0079)                     (g_timer[i].cb)(i);
    0542 2F06      MOV	R16,R22
    0543 E084      LDI	R24,4
    0544 9F86      MUL	R24,R22
    0545 940E0AC1  CALL	0xAC1
    0547 81A0      LDD	R26,Z+0
    0548 81B1      LDD	R27,Z+1
    0549 01FD      MOVW	R30,R26
    054A D34A      RCALL	xicall
(0080)                     //enable cpu timer.
(0081)                     t0_start();
    054B DF77      RCALL	_t0_start
    054C 9563      INC	R22
    054D 3064      CPI	R22,4
    054E F408      BCC	0x0550
    054F CFBE      RJMP	0x050E
(0082)                 }
(0083)             }
(0084)         }
(0085)         time_pices = 0;
    0550 2422      CLR	R2
    0551 9220008D  STS	time_pices,R2
(0086)         //if no timer running, stop cpu timer.
(0087)         if(!running_timer_count) t0_stop();
    0553 2344      TST	R20
    0554 F409      BNE	0x0556
    0555 DF71      RCALL	_t0_stop
(0088)     }
(0089)     return;
    0556 D317      RCALL	pop_gset2
    0557 D37E      RCALL	pop_lset
    0558 9518      RETI
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\log.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "log.h"
(0004) 
(0005) void log(char type, unsigned char index, unsigned long id_code, unsigned long pswdH, unsigned long pswdL)
(0006) {
_log:
  pswdL                --> Y+12
  pswdH                --> Y+8
  id_code              --> Y+4
  index                --> Y+2
  type                 --> Y+0
    0559 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\locker.c
(0001) #include<iom16v.h>
(0002) 
(0003) #include "locker.h"
(0004) 
(0005) void locker_init(void)
(0006) {
_locker_init:
    055A 9508      RET
(0007) 
(0008) }
(0009) void locker_unlock(void)
(0010) {
_locker_unlock:
    055B 9508      RET
(0011) 
(0012) }
(0013) 
(0014) void locker_lock(void)
(0015) {
_locker_lock:
    055C 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\ringandscreen.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "util.h"
(0005) #include "tips.h"
(0006) #include "timer.h"
(0007) #include "ringandscreen.h"
(0008) 
(0009) //ring input pc0, screen key input pc1. door monitor input is pc2.
(0010) //screen power output pc3, screen reset output pc4. ring output pc5.
(0011) 
(0012) #define SCREEN_ON (PORTC&=0xf7)
(0013) #define SCREEN_OFF (PORTC|=0x04)
(0014) #define SCREEN_RESET_START (PORTC&=0xef)
(0015) #define SCREEN_RESET_STOP (PORTC|=0x10)
(0016) #define RING_ON (PORTC&=0xdf)
(0017) #define RING_OFF (PORTC&=0x20)
(0018) 
(0019) void ringandscreen_init(void)
(0020) {
(0021)     //PC0,PC1,PC2 INPUT.
(0022)     DDRC &= 0xf8;
_ringandscreen_init:
    055D B384      IN	R24,0x14
    055E 7F88      ANDI	R24,0xF8
    055F BB84      OUT	0x14,R24
(0023)     //PC3,PC4,PC5 OUTPUT.
(0024)     DDRC |= 0x38;
    0560 B384      IN	R24,0x14
    0561 6388      ORI	R24,0x38
    0562 BB84      OUT	0x14,R24
(0025)     //
(0026)     PORTC = 0xff;
    0563 EF8F      LDI	R24,0xFF
    0564 BB85      OUT	0x15,R24
(0027)     //init interrput.
(0028)     return;
    0565 9508      RET
(0029) }
(0030) 
(0031) static void disable_input(void)
(0032) {
_disable_input:
    0566 9508      RET
(0033) 
(0034) }
(0035) 
(0036) static void enable_input(void)
(0037) {
_enable_input:
    0567 9508      RET
(0038) 
(0039) }
(0040) 
(0041) void screen_on(void)
(0042) {
(0043)     if((PORTC&=0x04))
_screen_on:
    0568 B385      IN	R24,0x15
    0569 7084      ANDI	R24,4
    056A BB85      OUT	0x15,R24
    056B 2388      TST	R24
    056C F069      BEQ	0x057A
(0044)     {
(0045)         SCREEN_ON;
    056D B385      IN	R24,0x15
    056E 7F87      ANDI	R24,0xF7
    056F BB85      OUT	0x15,R24
(0046)         delay_ms(500);
    0570 EF04      LDI	R16,0xF4
    0571 E011      LDI	R17,1
    0572 DD00      RCALL	_delay_ms
(0047)         SCREEN_RESET_START;
    0573 B385      IN	R24,0x15
    0574 7E8F      ANDI	R24,0xEF
    0575 BB85      OUT	0x15,R24
(0048)         delay_ms(100);
    0576 E604      LDI	R16,0x64
    0577 E010      LDI	R17,0
    0578 DCFA      RCALL	_delay_ms
(0049)         SCREEN_RESET_STOP;
    0579 9AAC      SBI	0x15,4
(0050)     }
(0051)     return;
    057A 9508      RET
(0052) }
(0053) 
(0054) void screen_off(void)
(0055) {
(0056)     SCREEN_OFF;
_screen_off:
    057B 9AAA      SBI	0x15,2
(0057)     return;
    057C 9508      RET
(0058) }
(0059) 
(0060) void ring_on(void)
(0061) {
(0062)     RING_ON;
_ring_on:
    057D B385      IN	R24,0x15
    057E 7D8F      ANDI	R24,0xDF
    057F BB85      OUT	0x15,R24
(0063)     delay_ms(20);
    0580 E104      LDI	R16,0x14
    0581 E010      LDI	R17,0
    0582 DCF0      RCALL	_delay_ms
(0064)     RING_OFF;
    0583 B385      IN	R24,0x15
    0584 7280      ANDI	R24,0x20
    0585 BB85      OUT	0x15,R24
(0065)     return;
    0586 9508      RET
_ring_screen_timeout:
  timer                --> R20
    0587 D2F6      RCALL	push_gset1
    0588 2F40      MOV	R20,R16
(0066) }
(0067) 
(0068) void ring_screen_timeout(char timer)
(0069) {
(0070)     if(timer==RINGANDSCREENINPUTTIMER)
    0589 3042      CPI	R20,2
    058A F409      BNE	0x058C
(0071)     {
(0072)         screen_off();
    058B DFEF      RCALL	_screen_off
(0073)     }
    058C D2F4      RCALL	pop_gset1
    058D 9508      RET
_door_minitor_timeout:
  timer                --> R20
    058E D2EF      RCALL	push_gset1
    058F 2F40      MOV	R20,R16
    0590 9722      SBIW	R28,2
(0074) }
(0075) 
(0076) void door_minitor_timeout(char timer)
(0077) {
(0078)     if(timer==RINGANDSCREENINPUTTIMER)
    0591 3042      CPI	R20,2
    0592 F449      BNE	0x059C
(0079)     {
(0080)         tips_err();
    0593 DD0A      RCALL	_tips_err
(0081)         //start timer. 10s.
(0082)         set_timer(RINGANDSCREENINPUTTIMER, 70, door_minitor_timeout); 
    0594 E58C      LDI	R24,0x5C
    0595 E090      LDI	R25,0
    0596 8399      STD	Y+1,R25
    0597 8388      STD	Y+0,R24
    0598 E426      LDI	R18,0x46
    0599 E030      LDI	R19,0
    059A E002      LDI	R16,2
    059B DF2F      RCALL	_set_timer
(0083)     }
    059C 9622      ADIW	R28,2
    059D D2E3      RCALL	pop_gset1
    059E 9508      RET
_input_isr:
    059F 9722      SBIW	R28,2
(0084) }
(0085) 
(0086) void input_isr(void)
(0087) {
(0088)     disable_input();
    05A0 DFC5      RCALL	_disable_input
(0089)     //
(0090)     delay_ms(100);
    05A1 E604      LDI	R16,0x64
    05A2 E010      LDI	R17,0
    05A3 DCCF      RCALL	_delay_ms
(0091)     if(!(PINC&0x01)) //ring input.
    05A4 9998      SBIC	0x13,0
    05A5 C009      RJMP	0x05AF
(0092)     {
(0093)         screen_on();
    05A6 DFC1      RCALL	_screen_on
(0094)         ring_on();
    05A7 DFD5      RCALL	_ring_on
(0095)         tips_ring_on();
    05A8 DD25      RCALL	_tips_ring_on
(0096)         //start timer. 50s.
(0097)         set_timer(RINGANDSCREENINPUTTIMER, 300, ring_screen_timeout);
    05A9 E58A      LDI	R24,0x5A
    05AA 940E0AE4  CALL	0xAE4
    05AC E002      LDI	R16,2
    05AD DF1D      RCALL	_set_timer
(0098)     }
    05AE C00B      RJMP	0x05BA
(0099)     else if(!(PIND&0x02)) //screen key input.
    05AF 9981      SBIC	0x10,1
    05B0 C009      RJMP	0x05BA
(0100)     {
(0101)         screen_on();
    05B1 DFB6      RCALL	_screen_on
(0102)         delay_ms(800);
    05B2 E200      LDI	R16,0x20
    05B3 E013      LDI	R17,3
    05B4 DCBE      RCALL	_delay_ms
(0103)         //start timer. 50s.
(0104)         set_timer(RINGANDSCREENINPUTTIMER, 300, ring_screen_timeout);
    05B5 E58A      LDI	R24,0x5A
    05B6 940E0AE4  CALL	0xAE4
    05B8 E002      LDI	R16,2
    05B9 DF11      RCALL	_set_timer
(0105)     }
(0106)     enable_input();
    05BA DFAC      RCALL	_enable_input
(0107)     return;
    05BB 9622      ADIW	R28,2
    05BC 9508      RET
(0108) }
(0109) 
(0110) //when door open, return 1.
(0111) char check_door(void)
(0112) {
(0113)     return (!(PIND&0x04));
_check_door:
    05BD 9982      SBIC	0x10,2
    05BE C003      RJMP	0x05C2
    05BF E001      LDI	R16,1
    05C0 E010      LDI	R17,0
    05C1 C002      RJMP	0x05C4
    05C2 2700      CLR	R16
    05C3 2711      CLR	R17
    05C4 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\eeprom.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "util.h"
(0005) #include "eeprom.h"
(0006) 
(0007) /* 一个通用的24C01－24C256共9种EEPROM的字节读写操作程序，   
(0008) 此程序有五个入口条件，分别为读写数据缓冲区指针,   
(0009) 进行读写的字节数，EEPROM首址，EEPROM控制字节，   
(0010) 以及EEPROM类型。此程序结构性良好，具有极好的容错性，程序机器码也不多:   
(0011) DataBuff为读写数据输入／输出缓冲区的首址   
(0012) Length 为要读写数据的字节数量   
(0013) Addr 为EEPROM的片内地址 AT24256为0～32767   
(0014) Control 为EEPROM的控制字节，具体形式为(1)(0)(1)(0)(A2)(A1)(A0)(R/W),其中R/W=1,   
(0015) 表示读操作,R/W=0为写操作,A2,A1,A0为EEPROM的页选或片选地址;   
(0016) enumer为枚举变量,需为AT2401至AT24256中的一种,分别对应AT24C01至AT24C256;   
(0017) 函数返回值为一个位变量，若返回1表示此次操作失效，0表示操作成功;   
(0018) ERROR为允许最大次数，若出现ERRORCOUNT次操作失效后，则函数中止操作，并返回1   
(0019) SDA和SCL由用户自定义，这里暂定义为P3^0和P3^1; */   
(0020) /*对于1K位，2K位，4K位，8K位，16K位芯片采用一个8位长的字节地址码，对于32K位以上   
(0021) 的采用2个8位长的字节地址码直接寻址，而4K位，8K位，16K位配合页面地址来寻址*/   
(0022)    
(0023) /* －－－－－  AT24C01～AT24C256 的读写程序 －－－－－－ */
(0024) 
(0025) #define AT24C256DEVADDR 0xa0
(0026) 
(0027) #define MAXRETRY    10
(0028) 
(0029) #define SET_SCL (PORTB|=0x10)
(0030) #define CLR_SCL (PORTB&=0xef)
(0031) #define SET_SDA (PORTB|=0x20)
(0032) #define CLR_SDA (PORTB&=0xdf)
(0033) #define TEST_SDA ((PINB&0x20)?1:0)
(0034) #define SDA_OUT (DDRB|=0x20)
(0035) #define SDA_IN (DDRB&=0xdf,PORTB|=0x20)
(0036) 
(0037) static void start(void);
(0038) static void stop(void);
(0039) static unsigned char recAck(void);
(0040) static void ack(void);
(0041) static void noAck(void);
(0042) static void sendByte(unsigned char byte);
(0043) static unsigned char receiveByte(void);
(0044) 
(0045) //pc4 scl
(0046) //pc5 sda
(0047) void at24c256_init(void)
(0048) {
(0049)     //pc4 and pc5 output mode.
(0050)     DDRB |= 0x30;
_at24c256_init:
    05C5 B387      IN	R24,0x17
    05C6 6380      ORI	R24,0x30
    05C7 BB87      OUT	0x17,R24
(0051)     PORTB |= 0x30;
    05C8 B388      IN	R24,0x18
    05C9 6380      ORI	R24,0x30
    05CA BB88      OUT	0x18,R24
(0052)     return;
    05CB 9508      RET
_rw24c256:
  i                    --> R10
  err                  --> R20
  rwFlag               --> R22
  addr                 --> R12
  len                  --> R14
  data                 --> Y+10
    05CC D23D      RCALL	push_arg4
    05CD D2A8      RCALL	push_gset5
    05CE 2EE2      MOV	R14,R18
    05CF 84CE      LDD	R12,Y+14
    05D0 84DF      LDD	R13,Y+15
    05D1 8968      LDD	R22,Y+16
(0053) }
(0054) 
(0055) char rw24c256(unsigned char *data,unsigned char len,unsigned int addr, unsigned char rwFlag)    
(0056) {
(0057)     unsigned char i = MAXRETRY;
    05D2 E08A      LDI	R24,0xA
    05D3 2EA8      MOV	R10,R24
(0058)     char err = 1;  /*   出错标志   */   
    05D4 E041      LDI	R20,1
    05D5 C045      RJMP	0x061B
(0059)     while(i--)    
(0060)     {    
(0061)         start();  /*   启动总线   */
    05D6 D056      RCALL	_start
(0062) 	    sendByte(AT24C256DEVADDR |0x00); /*   向IIC总线写数据，器件地址 */   
    05D7 EA00      LDI	R16,0xA0
    05D8 D098      RCALL	_sendByte
(0063)         if(recAck()) continue; /*   如写不正确结束本次循环   */   
    05D9 D068      RCALL	_recAck
    05DA 2300      TST	R16
    05DB F009      BEQ	0x05DD
    05DC C03E      RJMP	0x061B
(0064)         sendByte((unsigned char)(addr >> 8));//把整型数据转换为字符型数据：弃高取低，只取低8位.如果容量大于32K位，使用16位地址寻址，写入高八位地址    
    05DD 0186      MOVW	R16,R12
    05DE 2F01      MOV	R16,R17
    05DF 2711      CLR	R17
    05E0 D090      RCALL	_sendByte
(0065)         if(recAck())  continue;    
    05E1 D060      RCALL	_recAck
    05E2 2300      TST	R16
    05E3 F009      BEQ	0x05E5
    05E4 C036      RJMP	0x061B
(0066)         sendByte((unsigned char)addr); /*   向IIC总线写数据   */   
    05E5 2D0C      MOV	R16,R12
    05E6 D08A      RCALL	_sendByte
(0067)         if(recAck())  continue; /*   如写正确结束本次循环   */
    05E7 D05A      RCALL	_recAck
    05E8 2300      TST	R16
    05E9 F009      BEQ	0x05EB
    05EA C030      RJMP	0x061B
(0068)         if(rwFlag == RW24C256WRITE)   //判断是读器件还是写器件    
    05EB 2366      TST	R22
    05EC F4A1      BNE	0x0601
(0069)         {
(0070)             err=0;         /* 清错误特征位 */   
    05ED 2744      CLR	R20
    05EE C00C      RJMP	0x05FB
(0071)             while(len--)    
(0072)             {
(0073)                 sendByte(*(data++)); /*   向IIC总线写数据   */   
    05EF 85EA      LDD	R30,Y+10
    05F0 85FB      LDD	R31,Y+11
    05F1 9101      LD	R16,Z+
    05F2 87FB      STD	Y+11,R31
    05F3 87EA      STD	Y+10,R30
    05F4 D07C      RCALL	_sendByte
(0074)                 if(!recAck()) continue; /*   如写正确结束本次循环   */   
    05F5 D04C      RCALL	_recAck
    05F6 2300      TST	R16
    05F7 F409      BNE	0x05F9
    05F8 C002      RJMP	0x05FB
(0075)                 err=1;    
    05F9 E041      LDI	R20,1
(0076)                 break;    
    05FA C003      RJMP	0x05FE
    05FB 940E0B15  CALL	0xB15
    05FD F789      BNE	0x05EF
(0077)             }    
(0078)             if(err==1) continue;    
    05FE 3041      CPI	R20,1
    05FF F519      BNE	0x0623
    0600 C01A      RJMP	0x061B
(0079)             break;    
(0080)         }    
(0081)         else   
(0082)         { 
(0083)             start();  /*   启动总线   */   
    0601 D02B      RCALL	_start
(0084)             sendByte(AT24C256DEVADDR |0x01); /*   向IIC总线写数据   */   
    0602 EA01      LDI	R16,0xA1
    0603 D06D      RCALL	_sendByte
(0085)             if(recAck()) continue;//器件没应答结束本次本层循环    
    0604 D03D      RCALL	_recAck
    0605 2300      TST	R16
    0606 F049      BEQ	0x0610
    0607 C013      RJMP	0x061B
(0086)             while(len--)  /*   字节长为0结束   */   
(0087)             {
(0088)                 *(data++)= receiveByte();    
    0608 D084      RCALL	_receiveByte
    0609 2E20      MOV	R2,R16
    060A 85EA      LDD	R30,Y+10
    060B 85FB      LDD	R31,Y+11
    060C 9221      ST	R2,Z+
    060D 87FB      STD	Y+11,R31
    060E 87EA      STD	Y+10,R30
(0089)                 ack();   /*   对IIC总线产生应答   */   
    060F D053      RCALL	_ack
    0610 940E0B15  CALL	0xB15
    0612 F7A9      BNE	0x0608
(0090)             }    
(0091)             *data=receiveByte(); /* 读最后一个字节 */   
    0613 D079      RCALL	_receiveByte
    0614 2E20      MOV	R2,R16
    0615 85EA      LDD	R30,Y+10
    0616 85FB      LDD	R31,Y+11
    0617 8220      STD	Z+0,R2
(0092)             noAck();  /*   不对IIC总线产生应答   */   
    0618 D053      RCALL	_noAck
(0093)             err=0;    
    0619 2744      CLR	R20
(0094)             break;    
    061A C008      RJMP	0x0623
    061B 2C2A      MOV	R2,R10
    061C 2433      CLR	R3
    061D 2D82      MOV	R24,R2
    061E 5081      SUBI	R24,1
    061F 2EA8      MOV	R10,R24
    0620 2022      TST	R2
    0621 F009      BEQ	0x0623
    0622 CFB3      RJMP	0x05D6
(0095)         }    
(0096)     }    
(0097)     stop();  /*   停止IIC总线   */   
    0623 D013      RCALL	_stop
(0098)     if(rwFlag == RW24C256WRITE)    
    0624 2366      TST	R22
    0625 F419      BNE	0x0629
(0099)     {     
(0100)         delay_ms(50);    
    0626 E302      LDI	R16,0x32
    0627 E010      LDI	R17,0
    0628 DC4A      RCALL	_delay_ms
(0101)     }    
(0102)     return err;    
    0629 2F04      MOV	R16,R20
    062A D249      RCALL	pop_gset5
    062B 9624      ADIW	R28,4
    062C 9508      RET
(0103) }    
(0104)    
(0105) /* * * * * 以下是对IIC总线的操作子程序 * * * * */   
(0106) /* * * * * * 启动总线 * * * * */   
(0107) static void start(void)    
(0108) {    
(0109)     //SCL=0; /* SCL处于高电平时,SDA从高电平转向低电平表示 */   
(0110)     //CLR_SCL;
(0111)     //SDA=1; /* 一个"开始"状态,该状态必须在其他命令之前执行 */   
(0112)     SET_SDA;
_start:
    062D 9AC5      SBI	0x18,5
(0113)     NOP();
    062E 0000      NOP
    062F 940E0ABC  CALL	0xABC
(0114)     //SCL=1;
(0115)     SET_SCL;
(0116)     NOP(); NOP(); NOP();    
(0117)     //SDA=0;
(0118)     CLR_SDA;
    0631 B388      IN	R24,0x18
    0632 7D8F      ANDI	R24,0xDF
    0633 BB88      OUT	0x18,R24
    0634 940E0AB4  CALL	0xAB4
(0119)     NOP(); NOP(); NOP(); NOP();    
(0120)     //SCL=0;
(0121)     CLR_SCL;
(0122)     //SDA=1;
(0123)     //SET_SDA;
(0124) 
(0125)     return;
    0636 9508      RET
(0126) }    
(0127)    
(0128) /* * * * * 停止IIC总线 * * * * */   
(0129) static void stop(void)    
(0130) {     
(0131)     //SCL=0; /*SCL处于高电平时,SDA从低电平转向高电平 */
(0132)     //CLR_SCL;   
(0133)     //SDA=0; /*表示一个"停止"状态,该状态终止所有通讯 */
(0134)     CLR_SDA;
_stop:
    0637 B388      IN	R24,0x18
    0638 7D8F      ANDI	R24,0xDF
    0639 BB88      OUT	0x18,R24
(0135)     NOP();
    063A 0000      NOP
    063B 940E0ABC  CALL	0xABC
(0136)     //SCL=1;
(0137)     SET_SCL;
(0138)     NOP(); NOP(); NOP(); /* 空操作 */
(0139)     //SDA=1;
(0140)     SET_SDA;
    063D 9AC5      SBI	0x18,5
(0141)     NOP(); NOP(); NOP();
    063E 0000      NOP
    063F 0000      NOP
    0640 0000      NOP
(0142)     //SCL=0;
(0143)     //CLR_SCL;
(0144)     
(0145)     return;
    0641 9508      RET
(0146) }    
(0147)    
(0148) /* * * * * 检查应答位 * * * * */   
(0149) static unsigned char recAck(void)    
(0150) {
(0151)     unsigned char result;
(0152)      unsigned char i=0;
_recAck:
  result               --> R16
  i                    --> R16
    0642 2700      CLR	R16
    0643 940E0B1C  CALL	0xB1C
    0645 940E0ABC  CALL	0xABC
(0153)     
(0154)     //SCL=0;
(0155)     //CLR_SCL;   
(0156)     //SDA=1;
(0157)     SET_SDA;
(0158)     SDA_IN;
(0159)     //SCL=1;
(0160)     SET_SCL;
(0161)     //change sda input mode.
(0162)     NOP(); NOP(); NOP(); NOP();
    0647 0000      NOP
    0648 C001      RJMP	0x064A
(0163)     //CY=SDA;     /* 因为返回值总是放在CY中的 */
(0164)     while(TEST_SDA&&(i>250)) i++;
    0649 9503      INC	R16
    064A 9BB5      SBIS	0x16,5
    064B C003      RJMP	0x064F
    064C E021      LDI	R18,1
    064D E030      LDI	R19,0
    064E C002      RJMP	0x0651
    064F 2722      CLR	R18
    0650 2733      CLR	R19
    0651 3020      CPI	R18,0
    0652 0723      CPC	R18,R19
    0653 F019      BEQ	0x0657
    0654 EF8A      LDI	R24,0xFA
    0655 1780      CP	R24,R16
    0656 F390      BCS	0x0649
(0165)     result = TEST_SDA;
    0657 9BB5      SBIS	0x16,5
    0658 C003      RJMP	0x065C
    0659 E001      LDI	R16,1
    065A E010      LDI	R17,0
    065B C002      RJMP	0x065E
    065C 2700      CLR	R16
    065D 2711      CLR	R17
(0166)     //SCL=0;
(0167)     CLR_SCL;
    065E B388      IN	R24,0x18
    065F 7E8F      ANDI	R24,0xEF
    0660 BB88      OUT	0x18,R24
(0168)     //SDA_OUT;
(0169)     SDA_OUT;
    0661 9ABD      SBI	0x17,5
(0170)     return result;
    0662 9508      RET
(0171) }    
(0172)    
(0173) /* * * * *对IIC总线产生应答 * * * * */   
(0174) static void ack(void)    
(0175) {     
(0176)     //SDA=0; /* EEPROM通过在收到每个地址或数据之后, */
(0177)     CLR_SDA;
_ack:
    0663 B388      IN	R24,0x18
    0664 7D8F      ANDI	R24,0xDF
    0665 BB88      OUT	0x18,R24
(0178)     //SCL=1; /* 置SDA低电平的方式确认表示收到读SDA口状态 */
(0179)     SET_SCL;
    0666 9AC4      SBI	0x18,4
    0667 940E0AB4  CALL	0xAB4
(0180)     NOP(); NOP(); NOP(); NOP();
(0181)     //SCL=0;
(0182)     CLR_SCL;   
(0183)     NOP();
    0669 0000      NOP
(0184)     //SDA=1;
(0185)     SET_SDA;
    066A 9AC5      SBI	0x18,5
(0186) 
(0187)     return;
    066B 9508      RET
(0188) }    
(0189)    
(0190) /* * * * * * * * * 不对IIC总线产生应答 * * * * */   
(0191) static void noAck(void)    
(0192) {    
(0193)     //SDA=1;
(0194)     SET_SDA;
_noAck:
    066C 9AC5      SBI	0x18,5
(0195)     //SCL=1;
(0196)     SET_SCL;
    066D 9AC4      SBI	0x18,4
    066E 940E0AB4  CALL	0xAB4
(0197)     NOP(); NOP(); NOP(); NOP();    
(0198)     //SCL=0;
(0199)     CLR_SCL;
(0200)     
(0201)     return;
    0670 9508      RET
_sendByte:
  mask                 --> R20
  byte                 --> R16
    0671 D20C      RCALL	push_gset1
(0202) }    
(0203)    
(0204) /* * * * * * * * * 向IIC总线写数据 * * * * */   
(0205) static void sendByte(unsigned char byte)    
(0206) {
(0207)     unsigned char mask = 0x80;
    0672 E840      LDI	R20,0x80
(0208)     for(;mask>0;)    
    0673 C011      RJMP	0x0685
(0209)     {
(0210)         //SCL=0;
(0211)         CLR_SCL;
    0674 940E0B10  CALL	0xB10
(0212)         NOP();NOP();
    0676 0000      NOP
(0213)         if(mask&byte)
    0677 2E24      MOV	R2,R20
    0678 2220      AND	R2,R16
    0679 F011      BEQ	0x067C
(0214)         {
(0215)             //SDA=1;
(0216)             SET_SDA;
    067A 9AC5      SBI	0x18,5
(0217)         }
    067B C003      RJMP	0x067F
(0218)         else
(0219)         {
(0220)             //SDA=0;
(0221)             CLR_SDA;
    067C B388      IN	R24,0x18
    067D 7D8F      ANDI	R24,0xDF
    067E BB88      OUT	0x18,R24
(0222)         }
(0223)         mask >>= 1;
    067F 9546      LSR	R20
(0224)         NOP();NOP();
    0680 0000      NOP
    0681 0000      NOP
(0225)         //SCL=1;
(0226)         SET_SCL;
    0682 9AC4      SBI	0x18,4
(0227)         NOP();NOP();
    0683 0000      NOP
    0684 0000      NOP
    0685 2422      CLR	R2
    0686 1624      CP	R2,R20
    0687 F360      BCS	0x0674
(0228)     }
(0229)     //SCL=0;
(0230)     CLR_SCL;
    0688 B388      IN	R24,0x18
    0689 7E8F      ANDI	R24,0xEF
    068A BB88      OUT	0x18,R24
(0231) 
(0232)     return;
    068B D1F5      RCALL	pop_gset1
    068C 9508      RET
_receiveByte:
  i                    --> R16
  receivebyte          --> R18
    068D D1F0      RCALL	push_gset1
(0233) }
(0234)    
(0235) /* * * * * * * * * 从IIC总线上读数据子程序 * * * * */   
(0236) static unsigned char receiveByte(void)    
(0237) {     
(0238)     unsigned char receivebyte = 0, i=8;     
    068E 2722      CLR	R18
    068F E008      LDI	R16,0x8
(0239)     //SCL=0;
(0240)     CLR_SCL;
    0690 B388      IN	R24,0x18
    0691 7E8F      ANDI	R24,0xEF
    0692 BB88      OUT	0x18,R24
    0693 940E0B1C  CALL	0xB1C
(0241)     //SDA = 1;
(0242)     SET_SDA;
(0243)     SDA_IN;
(0244) 	NOP();NOP();
    0695 0000      NOP
    0696 0000      NOP
    0697 C013      RJMP	0x06AB
(0245)     while(i--)    
(0246)     {     
(0247)         //SCL=1;
(0248)         SET_SCL;
    0698 9AC4      SBI	0x18,4
(0249) 		NOP();NOP();
    0699 0000      NOP
    069A 0000      NOP
(0250)         receivebyte = (receivebyte <<1 ) | TEST_SDA;
    069B 9BB5      SBIS	0x16,5
    069C C003      RJMP	0x06A0
    069D E041      LDI	R20,1
    069E E050      LDI	R21,0
    069F C002      RJMP	0x06A2
    06A0 2744      CLR	R20
    06A1 2755      CLR	R21
    06A2 2E22      MOV	R2,R18
    06A3 2433      CLR	R3
    06A4 0C22      LSL	R2
    06A5 1C33      ROL	R3
    06A6 2A24      OR	R2,R20
    06A7 2A35      OR	R3,R21
    06A8 2D22      MOV	R18,R2
    06A9 940E0B10  CALL	0xB10
    06AB 2E20      MOV	R2,R16
    06AC 2433      CLR	R3
    06AD 5001      SUBI	R16,1
    06AE 2022      TST	R2
    06AF F741      BNE	0x0698
(0251)         //SCL=0;
(0252)         CLR_SCL;
(0253)         NOP();
(0254)     }
(0255)     SDA_OUT;
    06B0 9ABD      SBI	0x17,5
(0256)     return receivebyte;    
    06B1 2F02      MOV	R16,R18
    06B2 D1CE      RCALL	pop_gset1
    06B3 9508      RET
FILE: D:\yang-home-shanghai\smarthome\门禁系统资料\code\uart.c
(0001) #include<iom16v.h>
(0002) #include <macros.h>
(0003) 
(0004) #include "uart.h"
(0005) 
(0006) //uart0 init. for printf.
(0007) void uart0_init(void)
(0008) {
(0009)     UCSRB = 0x00;                //禁止UART发送和接收
_uart0_init:
    06B4 2422      CLR	R2
    06B5 B82A      OUT	0x0A,R2
(0010)     UCSRA = 0x02;               //倍速
    06B6 E082      LDI	R24,2
    06B7 B98B      OUT	0x0B,R24
(0011)     UCSRC = 0x06;                //8位数据
    06B8 E086      LDI	R24,6
    06B9 BD80      OUT	0x20,R24
(0012)     UBRRL = 0x67;                 //9600bps
    06BA E687      LDI	R24,0x67
    06BB B989      OUT	0x09,R24
(0013)     UBRRH = 0x00;
    06BC BC20      OUT	0x20,R2
(0014)     UCSRB = 0x18;
FILE: <library>
    06BD E188      LDI	R24,0x18
    06BE B98A      OUT	0x0A,R24
    06BF 9508      RET
__print:
    06C0 D149      RCALL	push_arg4
    06C1 D1B4      RCALL	push_gset5
    06C2 972A      SBIW	R28,0xA
    06C3 2400      CLR	R0
    06C4 2411      CLR	R1
    06C5 821F      STD	Y+7,R1
    06C6 820E      STD	Y+6,R0
    06C7 C12D      RJMP	0x07F5
    06C8 89EE      LDD	R30,Y+22
    06C9 89FF      LDD	R31,Y+23
    06CA 8180      LDD	R24,Z+0
    06CB 3285      CPI	R24,0x25
    06CC F039      BEQ	0x06D4
    06CD 8100      LDD	R16,Z+0
    06CE 89EC      LDD	R30,Y+20
    06CF 89FD      LDD	R31,Y+21
    06D0 D1C4      RCALL	xicall
    06D1 940E0A72  CALL	0xA72
    06D3 C11F      RJMP	0x07F3
    06D4 24EE      CLR	R14
    06D5 24FF      CLR	R15
    06D6 E54D      LDI	R20,0x5D
    06D7 E051      LDI	R21,1
    06D8 E260      LDI	R22,0x20
    06D9 940E0B28  CALL	0xB28
    06DB 2FE8      MOV	R30,R24
    06DC 2FF9      MOV	R31,R25
    06DD 8020      LDD	R2,Z+0
    06DE 2433      CLR	R3
    06DF 823D      STD	Y+5,R3
    06E0 822C      STD	Y+4,R2
    06E1 2D82      MOV	R24,R2
    06E2 2D93      MOV	R25,R3
    06E3 3588      CPI	R24,0x58
    06E4 E0E0      LDI	R30,0
    06E5 079E      CPC	R25,R30
    06E6 F409      BNE	0x06E8
    06E7 C077      RJMP	0x075F
    06E8 E588      LDI	R24,0x58
    06E9 1582      CP	R24,R2
    06EA 0593      CPC	R25,R3
    06EB F0A4      BLT	0x0700
    06EC 818C      LDD	R24,Y+4
    06ED 819D      LDD	R25,Y+5
    06EE 3485      CPI	R24,0x45
    06EF E0E0      LDI	R30,0
    06F0 079E      CPC	R25,R30
    06F1 F409      BNE	0x06F3
    06F2 C0FB      RJMP	0x07EE
    06F3 3485      CPI	R24,0x45
    06F4 E0E0      LDI	R30,0
    06F5 079E      CPC	R25,R30
    06F6 F40C      BGE	0x06F8
    06F7 C043      RJMP	0x073B
    06F8 818C      LDD	R24,Y+4
    06F9 819D      LDD	R25,Y+5
    06FA 3583      CPI	R24,0x53
    06FB E0E0      LDI	R30,0
    06FC 079E      CPC	R25,R30
    06FD F409      BNE	0x06FF
    06FE C0A8      RJMP	0x07A7
    06FF C03B      RJMP	0x073B
    0700 818C      LDD	R24,Y+4
    0701 819D      LDD	R25,Y+5
    0702 368F      CPI	R24,0x6F
    0703 E0E0      LDI	R30,0
    0704 079E      CPC	R25,R30
    0705 F409      BNE	0x0707
    0706 C058      RJMP	0x075F
    0707 E68F      LDI	R24,0x6F
    0708 E090      LDI	R25,0
    0709 802C      LDD	R2,Y+4
    070A 803D      LDD	R3,Y+5
    070B 1582      CP	R24,R2
    070C 0593      CPC	R25,R3
    070D F0DC      BLT	0x0729
    070E 818C      LDD	R24,Y+4
    070F 819D      LDD	R25,Y+5
    0710 3683      CPI	R24,0x63
    0711 E0E0      LDI	R30,0
    0712 079E      CPC	R25,R30
    0713 F409      BNE	0x0715
    0714 C086      RJMP	0x079B
    0715 3684      CPI	R24,0x64
    0716 E0E0      LDI	R30,0
    0717 079E      CPC	R25,R30
    0718 F409      BNE	0x071A
    0719 C02A      RJMP	0x0744
    071A 3685      CPI	R24,0x65
    071B E0E0      LDI	R30,0
    071C 079E      CPC	R25,R30
    071D F409      BNE	0x071F
    071E C0CF      RJMP	0x07EE
    071F 3686      CPI	R24,0x66
    0720 E0E0      LDI	R30,0
    0721 079E      CPC	R25,R30
    0722 F409      BNE	0x0724
    0723 C0CA      RJMP	0x07EE
    0724 3689      CPI	R24,0x69
    0725 E0E0      LDI	R30,0
    0726 079E      CPC	R25,R30
    0727 F0E1      BEQ	0x0744
    0728 C012      RJMP	0x073B
    0729 818C      LDD	R24,Y+4
    072A 819D      LDD	R25,Y+5
    072B 3783      CPI	R24,0x73
    072C E0E0      LDI	R30,0
    072D 079E      CPC	R25,R30
    072E F409      BNE	0x0730
    072F C098      RJMP	0x07C8
    0730 3785      CPI	R24,0x75
    0731 E0E0      LDI	R30,0
    0732 079E      CPC	R25,R30
    0733 F409      BNE	0x0735
    0734 C02A      RJMP	0x075F
    0735 3788      CPI	R24,0x78
    0736 E0E0      LDI	R30,0
    0737 079E      CPC	R25,R30
    0738 F409      BNE	0x073A
    0739 C025      RJMP	0x075F
    073A C000      RJMP	0x073B
    073B 89EE      LDD	R30,Y+22
    073C 89FF      LDD	R31,Y+23
    073D 8100      LDD	R16,Z+0
    073E 89EC      LDD	R30,Y+20
    073F 89FD      LDD	R31,Y+21
    0740 D154      RCALL	xicall
    0741 940E0A72  CALL	0xA72
    0743 C0AF      RJMP	0x07F3
    0744 940E0A5A  CALL	0xA5A
    0746 940E0B66  CALL	0xB66
    0748 2D82      MOV	R24,R2
    0749 2D93      MOV	R25,R3
    074A 3080      CPI	R24,0
    074B E0E0      LDI	R30,0
    074C 079E      CPC	R25,R30
    074D F464      BGE	0x075A
    074E 2D8E      MOV	R24,R14
    074F 2D9F      MOV	R25,R15
    0750 6088      ORI	R24,0x8
    0751 2EE8      MOV	R14,R24
    0752 2EF9      MOV	R15,R25
    0753 E26D      LDI	R22,0x2D
    0754 2D82      MOV	R24,R2
    0755 2D93      MOV	R25,R3
    0756 940E0B34  CALL	0xB34
    0758 8799      STD	Y+9,R25
    0759 8788      STD	Y+8,R24
    075A E08A      LDI	R24,0xA
    075B 940E0AAC  CALL	0xAAC
    075D D1DE      RCALL	_itoa
    075E C039      RJMP	0x0798
    075F 940E0A5A  CALL	0xA5A
    0761 940E0B66  CALL	0xB66
    0763 89EE      LDD	R30,Y+22
    0764 89FF      LDD	R31,Y+23
    0765 8180      LDD	R24,Z+0
    0766 3785      CPI	R24,0x75
    0767 F451      BNE	0x0772
    0768 E08A      LDI	R24,0xA
    0769 E090      LDI	R25,0
    076A 8399      STD	Y+1,R25
    076B 8388      STD	Y+0,R24
    076C 2D22      MOV	R18,R2
    076D 2D33      MOV	R19,R3
    076E 2F04      MOV	R16,R20
    076F 2F15      MOV	R17,R21
    0770 D20A      RCALL	_utoa
    0771 C026      RJMP	0x0798
    0772 89EE      LDD	R30,Y+22
    0773 89FF      LDD	R31,Y+23
    0774 8180      LDD	R24,Z+0
    0775 368F      CPI	R24,0x6F
    0776 F429      BNE	0x077C
    0777 E088      LDI	R24,0x8
    0778 940E0AAC  CALL	0xAAC
    077A D200      RCALL	_utoa
    077B C01C      RJMP	0x0798
    077C E180      LDI	R24,0x10
    077D 940E0AAC  CALL	0xAAC
    077F D1FB      RCALL	_utoa
    0780 89EE      LDD	R30,Y+22
    0781 89FF      LDD	R31,Y+23
    0782 8180      LDD	R24,Z+0
    0783 3588      CPI	R24,0x58
    0784 F499      BNE	0x0798
    0785 940E0B39  CALL	0xB39
    0787 C00D      RJMP	0x0795
    0788 2DEC      MOV	R30,R12
    0789 2DFD      MOV	R31,R13
    078A 8100      LDD	R16,Z+0
    078B 2711      CLR	R17
    078C D22A      RCALL	_toupper
    078D 2DEC      MOV	R30,R12
    078E 2DFD      MOV	R31,R13
    078F 8300      STD	Z+0,R16
    0790 2D8C      MOV	R24,R12
    0791 2D9D      MOV	R25,R13
    0792 9601      ADIW	R24,1
    0793 2EC8      MOV	R12,R24
    0794 2ED9      MOV	R13,R25
    0795 940E0B43  CALL	0xB43
    0797 F781      BNE	0x0788
    0798 940E0B39  CALL	0xB39
    079A C039      RJMP	0x07D4
    079B 940E0A5A  CALL	0xA5A
    079D 8020      LDD	R2,Z+0
    079E 8031      LDD	R3,Z+1
    079F 822A      STD	Y+2,R2
    07A0 2D02      MOV	R16,R2
    07A1 89EC      LDD	R30,Y+20
    07A2 89FD      LDD	R31,Y+21
    07A3 D0F1      RCALL	xicall
    07A4 940E0A72  CALL	0xA72
    07A6 C04C      RJMP	0x07F3
    07A7 940E0A5A  CALL	0xA5A
    07A9 80A0      LDD	R10,Z+0
    07AA 80B1      LDD	R11,Z+1
    07AB 326D      CPI	R22,0x2D
    07AC F4A9      BNE	0x07C2
    07AD E20D      LDI	R16,0x2D
    07AE 89EC      LDD	R30,Y+20
    07AF 89FD      LDD	R31,Y+21
    07B0 D0E4      RCALL	xicall
    07B1 940E0A72  CALL	0xA72
    07B3 C00E      RJMP	0x07C2
    07B4 2DEA      MOV	R30,R10
    07B5 2DFB      MOV	R31,R11
    07B6 95C8      LPM
    07B7 2D00      MOV	R16,R0
    07B8 89EC      LDD	R30,Y+20
    07B9 89FD      LDD	R31,Y+21
    07BA D0DA      RCALL	xicall
    07BB 940E0A72  CALL	0xA72
    07BD 2D8A      MOV	R24,R10
    07BE 2D9B      MOV	R25,R11
    07BF 9601      ADIW	R24,1
    07C0 2EA8      MOV	R10,R24
    07C1 2EB9      MOV	R11,R25
    07C2 2DEA      MOV	R30,R10
    07C3 2DFB      MOV	R31,R11
    07C4 95C8      LPM
    07C5 2000      TST	R0
    07C6 F769      BNE	0x07B4
    07C7 C02B      RJMP	0x07F3
    07C8 940E0A5A  CALL	0xA5A
    07CA 80C0      LDD	R12,Z+0
    07CB 80D1      LDD	R13,Z+1
    07CC 20CC      TST	R12
    07CD F431      BNE	0x07D4
    07CE 20DD      TST	R13
    07CF F421      BNE	0x07D4
    07D0 EF81      LDI	R24,0xF1
    07D1 E090      LDI	R25,0
    07D2 2EC8      MOV	R12,R24
    07D3 2ED9      MOV	R13,R25
    07D4 326D      CPI	R22,0x2D
    07D5 F4A1      BNE	0x07EA
    07D6 E20D      LDI	R16,0x2D
    07D7 89EC      LDD	R30,Y+20
    07D8 89FD      LDD	R31,Y+21
    07D9 D0BB      RCALL	xicall
    07DA 940E0A72  CALL	0xA72
    07DC C00D      RJMP	0x07EA
    07DD 2DEC      MOV	R30,R12
    07DE 2DFD      MOV	R31,R13
    07DF 8100      LDD	R16,Z+0
    07E0 89EC      LDD	R30,Y+20
    07E1 89FD      LDD	R31,Y+21
    07E2 D0B2      RCALL	xicall
    07E3 940E0A72  CALL	0xA72
    07E5 2D8C      MOV	R24,R12
    07E6 2D9D      MOV	R25,R13
    07E7 9601      ADIW	R24,1
    07E8 2EC8      MOV	R12,R24
    07E9 2ED9      MOV	R13,R25
    07EA 940E0B43  CALL	0xB43
    07EC F781      BNE	0x07DD
    07ED C005      RJMP	0x07F3
    07EE E88E      LDI	R24,0x8E
    07EF E090      LDI	R25,0
    07F0 2EC8      MOV	R12,R24
    07F1 2ED9      MOV	R13,R25
    07F2 CFE1      RJMP	0x07D4
    07F3 940E0B28  CALL	0xB28
    07F5 89EE      LDD	R30,Y+22
    07F6 89FF      LDD	R31,Y+23
    07F7 8020      LDD	R2,Z+0
    07F8 2022      TST	R2
    07F9 F009      BEQ	0x07FB
    07FA CECD      RJMP	0x06C8
    07FB 810E      LDD	R16,Y+6
    07FC 811F      LDD	R17,Y+7
    07FD 962A      ADIW	R28,0xA
    07FE D075      RCALL	pop_gset5
    07FF 9624      ADIW	R28,4
    0800 9508      RET
_strcpy:
    0801 2FA0      MOV	R26,R16
    0802 2FB1      MOV	R27,R17
    0803 2FE2      MOV	R30,R18
    0804 2FF3      MOV	R31,R19
    0805 9001      LD	R0,Z+
    0806 920D      ST	R0,X+
    0807 2000      TST	R0
    0808 F7E1      BNE	0x0805
    0809 9508      RET
push_arg4:
    080A 940E0B7A  CALL	0xB7A
push_arg2:
    080C 9508      RET
mod16s:
    080D 9468      BSET	6
    080E 92DA      ST	R13,-Y
    080F 2ED1      MOV	R13,R17
    0810 C004      RJMP	0x0815
div16s:
    0811 94E8      BCLR	6
    0812 92DA      ST	R13,-Y
    0813 2ED1      MOV	R13,R17
    0814 26D3      EOR	R13,R19
    0815 FF17      SBRS	R17,7
    0816 C002      RJMP	0x0819
    0817 940E0B75  CALL	0xB75
    0819 FF37      SBRS	R19,7
    081A C004      RJMP	0x081F
    081B 9530      COM	R19
    081C 9520      COM	R18
    081D 5F2F      SUBI	R18,0xFF
    081E 4F3F      SBCI	R19,0xFF
    081F D009      RCALL	xdiv16u
    0820 FED7      SBRS	R13,7
    0821 C002      RJMP	0x0824
    0822 940E0B75  CALL	0xB75
    0824 90D9      LD	R13,Y+
    0825 9508      RET
mod16u:
    0826 9468      BSET	6
    0827 C001      RJMP	xdiv16u
div16u:
    0828 94E8      BCLR	6
xdiv16u:
    0829 92EA      ST	R14,-Y
    082A 92FA      ST	R15,-Y
    082B 938A      ST	R24,-Y
    082C 24EE      CLR	R14
    082D 24FF      CLR	R15
    082E E180      LDI	R24,0x10
    082F 0F00      LSL	R16
    0830 1F11      ROL	R17
    0831 1CEE      ROL	R14
    0832 1CFF      ROL	R15
    0833 16E2      CP	R14,R18
    0834 06F3      CPC	R15,R19
    0835 F018      BCS	0x0839
    0836 1AE2      SUB	R14,R18
    0837 0AF3      SBC	R15,R19
    0838 9503      INC	R16
    0839 958A      DEC	R24
    083A F7A1      BNE	0x082F
    083B F416      BRTC	0x083E
    083C 2D0E      MOV	R16,R14
    083D 2D1F      MOV	R17,R15
    083E 9189      LD	R24,Y+
    083F 90F9      LD	R15,Y+
    0840 90E9      LD	R14,Y+
    0841 9508      RET
empy32u:
empy32s:
    0842 D05B      RCALL	long_prolog
    0843 927F      PUSH	R7
    0844 D072      RCALL	tstzero1
    0845 F131      BEQ	0x086C
    0846 2477      CLR	R7
    0847 D075      RCALL	tstzero2
    0848 F419      BNE	0x084C
    0849 018C      MOVW	R16,R24
    084A 019D      MOVW	R18,R26
    084B C020      RJMP	0x086C
    084C 9F08      MUL	R16,R24
    084D 2CB0      MOV	R11,R0
    084E 2CA1      MOV	R10,R1
    084F 9F28      MUL	R18,R24
    0850 2C90      MOV	R9,R0
    0851 2C81      MOV	R8,R1
    0852 9F18      MUL	R17,R24
    0853 0CA0      ADD	R10,R0
    0854 1C91      ADC	R9,R1
    0855 1C87      ADC	R8,R7
    0856 9F09      MUL	R16,R25
    0857 0CA0      ADD	R10,R0
    0858 1C91      ADC	R9,R1
    0859 1C87      ADC	R8,R7
    085A 9F19      MUL	R17,R25
    085B 0C90      ADD	R9,R0
    085C 1C81      ADC	R8,R1
    085D 9F0A      MUL	R16,R26
    085E 0C90      ADD	R9,R0
    085F 1C81      ADC	R8,R1
    0860 9F38      MUL	R19,R24
    0861 0C80      ADD	R8,R0
    0862 9F29      MUL	R18,R25
    0863 0C80      ADD	R8,R0
    0864 9F1A      MUL	R17,R26
    0865 0C80      ADD	R8,R0
    0866 9F0B      MUL	R16,R27
    0867 0C80      ADD	R8,R0
    0868 2D0B      MOV	R16,R11
    0869 2D1A      MOV	R17,R10
    086A 2D29      MOV	R18,R9
    086B 2D38      MOV	R19,R8
    086C 907F      POP	R7
    086D C03E      RJMP	long_epilog
pop_gset2:
    086E E0E2      LDI	R30,2
    086F C012      RJMP	pop
pop_gset3:
    0870 E0E4      LDI	R30,4
    0871 C010      RJMP	pop
pop_gset4:
    0872 E0E8      LDI	R30,0x8
    0873 C00E      RJMP	pop
pop_gset5:
    0874 27EE      CLR	R30
    0875 C00C      RJMP	pop
push_gset5:
    0876 92FA      ST	R15,-Y
    0877 92EA      ST	R14,-Y
push_gset4:
    0878 92DA      ST	R13,-Y
    0879 92CA      ST	R12,-Y
push_gset3:
    087A 92BA      ST	R11,-Y
    087B 92AA      ST	R10,-Y
push_gset2:
    087C 937A      ST	R23,-Y
    087D 936A      ST	R22,-Y
push_gset1:
    087E 935A      ST	R21,-Y
    087F 934A      ST	R20,-Y
    0880 9508      RET
pop_gset1:
    0881 E0E1      LDI	R30,1
pop:
    0882 9149      LD	R20,Y+
    0883 9159      LD	R21,Y+
    0884 FDE0      SBRC	R30,0
    0885 9508      RET
    0886 9169      LD	R22,Y+
    0887 9179      LD	R23,Y+
    0888 FDE1      SBRC	R30,1
    0889 9508      RET
    088A 90A9      LD	R10,Y+
    088B 90B9      LD	R11,Y+
    088C FDE2      SBRC	R30,2
    088D 9508      RET
    088E 90C9      LD	R12,Y+
    088F 90D9      LD	R13,Y+
    0890 FDE3      SBRC	R30,3
    0891 9508      RET
    0892 90E9      LD	R14,Y+
    0893 90F9      LD	R15,Y+
    0894 9508      RET
xicall:
    0895 920A      ST	R0,-Y
    0896 95C8      LPM
    0897 920A      ST	R0,-Y
    0898 9631      ADIW	R30,1
    0899 95C8      LPM
    089A 2DF0      MOV	R31,R0
    089B 91E9      LD	R30,Y+
    089C 9009      LD	R0,Y+
    089D 9409      IJMP
long_prolog:
    089E 928A      ST	R8,-Y
    089F 929A      ST	R9,-Y
    08A0 92AA      ST	R10,-Y
    08A1 92BA      ST	R11,-Y
    08A2 93EA      ST	R30,-Y
    08A3 938A      ST	R24,-Y
    08A4 939A      ST	R25,-Y
    08A5 93AA      ST	R26,-Y
    08A6 93BA      ST	R27,-Y
    08A7 8589      LDD	R24,Y+9
    08A8 859A      LDD	R25,Y+10
    08A9 85AB      LDD	R26,Y+11
    08AA 85BC      LDD	R27,Y+12
    08AB 9508      RET
long_epilog:
    08AC 91B9      LD	R27,Y+
    08AD 91A9      LD	R26,Y+
    08AE 9199      LD	R25,Y+
    08AF 9189      LD	R24,Y+
    08B0 91E9      LD	R30,Y+
    08B1 90B9      LD	R11,Y+
    08B2 90A9      LD	R10,Y+
    08B3 9099      LD	R9,Y+
    08B4 9089      LD	R8,Y+
    08B5 9624      ADIW	R28,4
    08B6 9508      RET
tstzero1:
    08B7 27EE      CLR	R30
    08B8 2BE0      OR	R30,R16
    08B9 2BE1      OR	R30,R17
    08BA 2BE2      OR	R30,R18
    08BB 2BE3      OR	R30,R19
    08BC 9508      RET
tstzero2:
    08BD 27EE      CLR	R30
    08BE 2BE8      OR	R30,R24
    08BF 2BE9      OR	R30,R25
    08C0 2BEA      OR	R30,R26
    08C1 2BEB      OR	R30,R27
    08C2 9508      RET
push_lset:
    08C3 93FA      ST	R31,-Y
    08C4 93EA      ST	R30,-Y
    08C5 93BA      ST	R27,-Y
    08C6 93AA      ST	R26,-Y
    08C7 939A      ST	R25,-Y
    08C8 938A      ST	R24,-Y
    08C9 940E0B7A  CALL	0xB7A
    08CB 929A      ST	R9,-Y
    08CC 928A      ST	R8,-Y
    08CD 927A      ST	R7,-Y
    08CE 926A      ST	R6,-Y
    08CF 940E0B70  CALL	0xB70
    08D1 921A      ST	R1,-Y
    08D2 920A      ST	R0,-Y
    08D3 B60F      IN	R0,0x3F
    08D4 920A      ST	R0,-Y
    08D5 9508      RET
pop_lset:
    08D6 9009      LD	R0,Y+
    08D7 BE0F      OUT	0x3F,R0
    08D8 9009      LD	R0,Y+
    08D9 9019      LD	R1,Y+
    08DA 9029      LD	R2,Y+
    08DB 9039      LD	R3,Y+
    08DC 9049      LD	R4,Y+
    08DD 9059      LD	R5,Y+
    08DE 9069      LD	R6,Y+
    08DF 9079      LD	R7,Y+
    08E0 9089      LD	R8,Y+
    08E1 9099      LD	R9,Y+
    08E2 9109      LD	R16,Y+
    08E3 9119      LD	R17,Y+
    08E4 9129      LD	R18,Y+
    08E5 9139      LD	R19,Y+
    08E6 9189      LD	R24,Y+
    08E7 9199      LD	R25,Y+
    08E8 91A9      LD	R26,Y+
    08E9 91B9      LD	R27,Y+
    08EA 91E9      LD	R30,Y+
    08EB 91F9      LD	R31,Y+
    08EC 9508      RET
asgncblk:
    08ED 93AA      ST	R26,-Y
    08EE 93BA      ST	R27,-Y
    08EF 93EA      ST	R30,-Y
    08F0 93FA      ST	R31,-Y
    08F1 920A      ST	R0,-Y
    08F2 81AF      LDD	R26,Y+7
    08F3 85B8      LDD	R27,Y+8
    08F4 81ED      LDD	R30,Y+5
    08F5 81FE      LDD	R31,Y+6
    08F6 3000      CPI	R16,0
    08F7 0701      CPC	R16,R17
    08F8 F031      BEQ	0x08FF
    08F9 95C8      LPM
    08FA 920D      ST	R0,X+
    08FB 9631      ADIW	R30,1
    08FC 5001      SUBI	R16,1
    08FD 4010      SBCI	R17,0
    08FE CFF7      RJMP	0x08F6
    08FF 9009      LD	R0,Y+
    0900 91F9      LD	R31,Y+
    0901 91E9      LD	R30,Y+
    0902 91B9      LD	R27,Y+
    0903 91A9      LD	R26,Y+
    0904 9624      ADIW	R28,4
    0905 9508      RET
asgnblk:
    0906 93AA      ST	R26,-Y
    0907 93BA      ST	R27,-Y
    0908 93EA      ST	R30,-Y
    0909 93FA      ST	R31,-Y
    090A 920A      ST	R0,-Y
    090B 81AF      LDD	R26,Y+7
    090C 85B8      LDD	R27,Y+8
    090D 81ED      LDD	R30,Y+5
    090E 81FE      LDD	R31,Y+6
    090F 3000      CPI	R16,0
    0910 0701      CPC	R16,R17
    0911 F029      BEQ	0x0917
    0912 9001      LD	R0,Z+
    0913 920D      ST	R0,X+
    0914 5001      SUBI	R16,1
    0915 4010      SBCI	R17,0
    0916 CFF8      RJMP	0x090F
    0917 9009      LD	R0,Y+
    0918 91F9      LD	R31,Y+
    0919 91E9      LD	R30,Y+
    091A 91B9      LD	R27,Y+
    091B 91A9      LD	R26,Y+
    091C 9624      ADIW	R28,4
    091D 9508      RET
_putchar:
    091E DF5F      RCALL	push_gset1
    091F 2F40      MOV	R20,R16
    0920 90200176  LDS	R2,_textmode
    0922 90300177  LDS	R3,_textmode+1
    0924 2022      TST	R2
    0925 F411      BNE	0x0928
    0926 2033      TST	R3
    0927 F021      BEQ	0x092C
    0928 304A      CPI	R20,0xA
    0929 F411      BNE	0x092C
    092A E00D      LDI	R16,0xD
    092B DFF2      RCALL	_putchar
    092C 9B5D      SBIS	0x0B,5
    092D CFFE      RJMP	0x092C
    092E B94C      OUT	0x0C,R20
    092F 2F04      MOV	R16,R20
    0930 2711      CLR	R17
    0931 DF4F      RCALL	pop_gset1
    0932 9508      RET
__va_start:
    0933 2F82      MOV	R24,R18
    0934 2F93      MOV	R25,R19
    0935 9601      ADIW	R24,1
    0936 7F8E      ANDI	R24,0xFE
    0937 0F80      ADD	R24,R16
    0938 1F91      ADC	R25,R17
    0939 2F08      MOV	R16,R24
    093A 2F19      MOV	R17,R25
    093B 9508      RET
_itoa:
    093C DF39      RCALL	push_gset5
    093D 2EC2      MOV	R12,R18
    093E 2ED3      MOV	R13,R19
    093F 2F40      MOV	R20,R16
    0940 2F51      MOV	R21,R17
    0941 97A2      SBIW	R28,0x22
    0942 A4AC      LDD	R10,Y+44
    0943 A4BD      LDD	R11,Y+45
    0944 2D8C      MOV	R24,R12
    0945 2D9D      MOV	R25,R13
    0946 3080      CPI	R24,0
    0947 E0E0      LDI	R30,0
    0948 079E      CPC	R25,R30
    0949 F434      BGE	0x0950
    094A E061      LDI	R22,1
    094B 940E0B34  CALL	0xB34
    094D 2EC8      MOV	R12,R24
    094E 2ED9      MOV	R13,R25
    094F C001      RJMP	0x0951
    0950 2766      CLR	R22
    0951 2422      CLR	R2
    0952 A229      STD	Y+33,R2
    0953 2F8C      MOV	R24,R28
    0954 2F9D      MOV	R25,R29
    0955 9681      ADIW	R24,0x21
    0956 2EE8      MOV	R14,R24
    0957 2EF9      MOV	R15,R25
    0958 940E0AF8  CALL	0xAF8
    095A 940E0B3E  CALL	0xB3E
    095C DEB0      RCALL	mod16s
    095D 2FE0      MOV	R30,R16
    095E 2FF1      MOV	R31,R17
    095F E083      LDI	R24,3
    0960 940E0B08  CALL	0xB08
    0962 940E0B3E  CALL	0xB3E
    0964 DEAC      RCALL	div16s
    0965 2EC0      MOV	R12,R16
    0966 2ED1      MOV	R13,R17
    0967 20CC      TST	R12
    0968 F779      BNE	0x0958
    0969 20DD      TST	R13
    096A F769      BNE	0x0958
    096B 2366      TST	R22
    096C F031      BEQ	0x0973
    096D 940E0AF8  CALL	0xAF8
    096F E28D      LDI	R24,0x2D
    0970 2DE2      MOV	R30,R2
    0971 2DF3      MOV	R31,R3
    0972 8380      STD	Z+0,R24
    0973 2D2E      MOV	R18,R14
    0974 2D3F      MOV	R19,R15
    0975 2F04      MOV	R16,R20
    0976 2F15      MOV	R17,R21
    0977 DE89      RCALL	_strcpy
    0978 96A2      ADIW	R28,0x22
    0979 DEFA      RCALL	pop_gset5
    097A 9508      RET
_utoa:
    097B DEFC      RCALL	push_gset4
    097C 2EA2      MOV	R10,R18
    097D 2EB3      MOV	R11,R19
    097E 2EC0      MOV	R12,R16
    097F 2ED1      MOV	R13,R17
    0980 97A2      SBIW	R28,0x22
    0981 A56A      LDD	R22,Y+42
    0982 A57B      LDD	R23,Y+43
    0983 2422      CLR	R2
    0984 A229      STD	Y+33,R2
    0985 2F4C      MOV	R20,R28
    0986 2F5D      MOV	R21,R29
    0987 5D4F      SUBI	R20,0xDF
    0988 4F5F      SBCI	R21,0xFF
    0989 2F84      MOV	R24,R20
    098A 2F95      MOV	R25,R21
    098B 9701      SBIW	R24,1
    098C 2E28      MOV	R2,R24
    098D 2E39      MOV	R3,R25
    098E 2F48      MOV	R20,R24
    098F 2F59      MOV	R21,R25
    0990 940E0B4D  CALL	0xB4D
    0992 DE93      RCALL	mod16u
    0993 2FE0      MOV	R30,R16
    0994 2FF1      MOV	R31,R17
    0995 E288      LDI	R24,0x28
    0996 940E0B08  CALL	0xB08
    0998 940E0B4D  CALL	0xB4D
    099A DE8D      RCALL	div16u
    099B 2EA0      MOV	R10,R16
    099C 2EB1      MOV	R11,R17
    099D 20AA      TST	R10
    099E F751      BNE	0x0989
    099F 20BB      TST	R11
    09A0 F741      BNE	0x0989
    09A1 2F24      MOV	R18,R20
    09A2 2F35      MOV	R19,R21
    09A3 2D0C      MOV	R16,R12
    09A4 2D1D      MOV	R17,R13
    09A5 DE5B      RCALL	_strcpy
    09A6 96A2      ADIW	R28,0x22
    09A7 DECA      RCALL	pop_gset4
    09A8 9508      RET
_islower:
    09A9 E685      LDI	R24,0x65
    09AA E090      LDI	R25,0
    09AB 2E20      MOV	R2,R16
    09AC 2E31      MOV	R3,R17
    09AD 0E28      ADD	R2,R24
    09AE 1E39      ADC	R3,R25
    09AF 2DE2      MOV	R30,R2
    09B0 2DF3      MOV	R31,R3
    09B1 95C8      LPM
    09B2 2D00      MOV	R16,R0
    09B3 2711      CLR	R17
    09B4 7002      ANDI	R16,2
    09B5 7010      ANDI	R17,0
    09B6 9508      RET
_toupper:
    09B7 DEC6      RCALL	push_gset1
    09B8 2F40      MOV	R20,R16
    09B9 2F51      MOV	R21,R17
    09BA 2F04      MOV	R16,R20
    09BB 2F15      MOV	R17,R21
    09BC DFEC      RCALL	_islower
    09BD 3000      CPI	R16,0
    09BE 0701      CPC	R16,R17
    09BF F039      BEQ	0x09C7
    09C0 2F04      MOV	R16,R20
    09C1 2F15      MOV	R17,R21
    09C2 5601      SUBI	R16,0x61
    09C3 4010      SBCI	R17,0
    09C4 5B0F      SUBI	R16,0xBF
    09C5 4F1F      SBCI	R17,0xFF
    09C6 C002      RJMP	0x09C9
    09C7 2F04      MOV	R16,R20
    09C8 2F15      MOV	R17,R21
    09C9 DEB7      RCALL	pop_gset1
    09CA 9508      RET
_printf:
    09CB DE3E      RCALL	push_arg4
    09CC DEB1      RCALL	push_gset1
    09CD 9722      SBIW	R28,2
    09CE E022      LDI	R18,2
    09CF E030      LDI	R19,0
    09D0 2F0C      MOV	R16,R28
    09D1 2F1D      MOV	R17,R29
    09D2 5F0C      SUBI	R16,0xFC
    09D3 4F1F      SBCI	R17,0xFF
    09D4 DF5E      RCALL	__va_start
    09D5 2F40      MOV	R20,R16
    09D6 2F51      MOV	R21,R17
    09D7 8359      STD	Y+1,R21
    09D8 8348      STD	Y+0,R20
    09D9 812C      LDD	R18,Y+4
    09DA 813D      LDD	R19,Y+5
    09DB E50E      LDI	R16,0x5E
    09DC E010      LDI	R17,0
    09DD DCE2      RCALL	__print
    09DE 2F40      MOV	R20,R16
    09DF 2F51      MOV	R21,R17
    09E0 9622      ADIW	R28,2
    09E1 DE9F      RCALL	pop_gset1
    09E2 9624      ADIW	R28,4
    09E3 9508      RET
<created procedures>:
    09E4 9040007D  LDS	R4,id_code+2
    09E6 9050007E  LDS	R5,id_code+3
    09E8 9020007B  LDS	R2,id_code
    09EA 9030007C  LDS	R3,id_code+1
    09EC 0C22      LSL	R2
    09ED 1C33      ROL	R3
    09EE 1C44      ROL	R4
    09EF 1C55      ROL	R5
    09F0 9230007C  STS	id_code+1,R3
    09F2 9220007B  STS	id_code,R2
    09F4 9250007E  STS	id_code+3,R5
    09F6 9240007D  STS	id_code+2,R4
    09F8 9508      RET
    09F9 9230007C  STS	id_code+1,R3
    09FB 9220007B  STS	id_code,R2
    09FD 9250007E  STS	id_code+3,R5
    09FF 9240007D  STS	id_code+2,R4
    0A01 9508      RET
    0A02 8628      STD	Y+8,R2
    0A03 8639      STD	Y+9,R3
    0A04 864A      STD	Y+10,R4
    0A05 865B      STD	Y+11,R5
    0A06 90400087  LDS	R4,passwordH+2
    0A08 90500088  LDS	R5,passwordH+3
    0A0A 90200085  LDS	R2,passwordH
    0A0C 90300086  LDS	R3,passwordH+1
    0A0E 822C      STD	Y+4,R2
    0A0F 823D      STD	Y+5,R3
    0A10 824E      STD	Y+6,R4
    0A11 825F      STD	Y+7,R5
    0A12 9508      RET
    0A13 E040      LDI	R20,0
    0A14 E050      LDI	R21,0
    0A15 E060      LDI	R22,0
    0A16 E070      LDI	R23,0
    0A17 01FE      MOVW	R30,R28
    0A18 8343      STD	Z+3,R20
    0A19 8354      STD	Z+4,R21
    0A1A 8365      STD	Z+5,R22
    0A1B 8376      STD	Z+6,R23
    0A1C E081      LDI	R24,1
    0A1D 838A      STD	Y+2,R24
    0A1E E08D      LDI	R24,0xD
    0A1F 9D8C      MUL	R24,R12
    0A20 01C0      MOVW	R24,R0
    0A21 9508      RET
    0A22 E040      LDI	R20,0
    0A23 E050      LDI	R21,0
    0A24 E060      LDI	R22,0
    0A25 E070      LDI	R23,0
    0A26 8748      STD	Y+8,R20
    0A27 8759      STD	Y+9,R21
    0A28 876A      STD	Y+10,R22
    0A29 877B      STD	Y+11,R23
    0A2A E040      LDI	R20,0
    0A2B E050      LDI	R21,0
    0A2C E060      LDI	R22,0
    0A2D E070      LDI	R23,0
    0A2E 834C      STD	Y+4,R20
    0A2F 835D      STD	Y+5,R21
    0A30 836E      STD	Y+6,R22
    0A31 837F      STD	Y+7,R23
    0A32 01FE      MOVW	R30,R28
    0A33 A820      LDD	R2,Z+48
    0A34 A831      LDD	R3,Z+49
    0A35 A842      LDD	R4,Z+50
    0A36 A853      LDD	R5,Z+51
    0A37 8228      STD	Y+0,R2
    0A38 8239      STD	Y+1,R3
    0A39 824A      STD	Y+2,R4
    0A3A 825B      STD	Y+3,R5
    0A3B 9508      RET
    0A3C E040      LDI	R20,0
    0A3D E050      LDI	R21,0
    0A3E E060      LDI	R22,0
    0A3F E070      LDI	R23,0
    0A40 9508      RET
    0A41 90400087  LDS	R4,passwordH+2
    0A43 90500088  LDS	R5,passwordH+3
    0A45 90200085  LDS	R2,passwordH
    0A47 90300086  LDS	R3,passwordH+1
    0A49 9508      RET
    0A4A 9040007D  LDS	R4,id_code+2
    0A4C 9050007E  LDS	R5,id_code+3
    0A4E 9020007B  LDS	R2,id_code
    0A50 9030007C  LDS	R3,id_code+1
    0A52 9508      RET
    0A53 8399      STD	Y+1,R25
    0A54 8388      STD	Y+0,R24
    0A55 E024      LDI	R18,4
    0A56 018E      MOVW	R16,R28
    0A57 5F0D      SUBI	R16,0xFD
    0A58 4F1F      SBCI	R17,0xFF
    0A59 9508      RET
    0A5A 8D88      LDD	R24,Y+24
    0A5B 8D99      LDD	R25,Y+25
    0A5C 9602      ADIW	R24,2
    0A5D 8F99      STD	Y+25,R25
    0A5E 8F88      STD	Y+24,R24
    0A5F 2FE8      MOV	R30,R24
    0A60 2FF9      MOV	R31,R25
    0A61 9732      SBIW	R30,2
    0A62 9508      RET
    0A63 9040008B  LDS	R4,passwordL+2
    0A65 9050008C  LDS	R5,passwordL+3
    0A67 90200089  LDS	R2,passwordL
    0A69 9030008A  LDS	R3,passwordL+1
    0A6B 9508      RET
    0A6C 01F0      MOVW	R30,R0
    0A6D E48D      LDI	R24,0x4D
    0A6E E091      LDI	R25,1
    0A6F 0FE8      ADD	R30,R24
    0A70 1FF9      ADC	R31,R25
    0A71 9508      RET
    0A72 818E      LDD	R24,Y+6
    0A73 819F      LDD	R25,Y+7
    0A74 9601      ADIW	R24,1
    0A75 839F      STD	Y+7,R25
    0A76 838E      STD	Y+6,R24
    0A77 9508      RET
    0A78 E050      LDI	R21,0
    0A79 E060      LDI	R22,0
    0A7A E070      LDI	R23,0
    0A7B 01FE      MOVW	R30,R28
    0A7C 9508      RET
    0A7D B382      IN	R24,0x12
    0A7E 7E8F      ANDI	R24,0xEF
    0A7F BB82      OUT	0x12,R24
    0A80 E604      LDI	R16,0x64
    0A81 E010      LDI	R17,0
    0A82 9508      RET
    0A83 01FE      MOVW	R30,R28
    0A84 8223      STD	Z+3,R2
    0A85 8234      STD	Z+4,R3
    0A86 8245      STD	Z+5,R4
    0A87 8256      STD	Z+6,R5
    0A88 2422      CLR	R2
    0A89 822A      STD	Y+2,R2
    0A8A E08D      LDI	R24,0xD
    0A8B 9D8A      MUL	R24,R10
    0A8C 01C0      MOVW	R24,R0
    0A8D 9508      RET
    0A8E A820      LDD	R2,Z+48
    0A8F A831      LDD	R3,Z+49
    0A90 A842      LDD	R4,Z+50
    0A91 A853      LDD	R5,Z+51
    0A92 9508      RET
    0A93 E041      LDI	R20,1
    0A94 E050      LDI	R21,0
    0A95 E060      LDI	R22,0
    0A96 E070      LDI	R23,0
    0A97 9350008A  STS	passwordL+1,R21
    0A99 93400089  STS	passwordL,R20
    0A9B 9370008C  STS	passwordL+3,R23
    0A9D 9360008B  STS	passwordL+2,R22
    0A9F 9508      RET
    0AA0 01FE      MOVW	R30,R28
    0AA1 8C22      LDD	R2,Z+26
    0AA2 8C33      LDD	R3,Z+27
    0AA3 8C44      LDD	R4,Z+28
    0AA4 8C55      LDD	R5,Z+29
    0AA5 8228      STD	Y+0,R2
    0AA6 8239      STD	Y+1,R3
    0AA7 824A      STD	Y+2,R4
    0AA8 825B      STD	Y+3,R5
    0AA9 91200083  LDS	R18,current_index
    0AAB 9508      RET
    0AAC E090      LDI	R25,0
    0AAD 8399      STD	Y+1,R25
    0AAE 8388      STD	Y+0,R24
    0AAF 8528      LDD	R18,Y+8
    0AB0 8539      LDD	R19,Y+9
    0AB1 2F04      MOV	R16,R20
    0AB2 2F15      MOV	R17,R21
    0AB3 9508      RET
    0AB4 0000      NOP
    0AB5 0000      NOP
    0AB6 0000      NOP
    0AB7 0000      NOP
    0AB8 B388      IN	R24,0x18
    0AB9 7E8F      ANDI	R24,0xEF
    0ABA BB88      OUT	0x18,R24
    0ABB 9508      RET
    0ABC 9AC4      SBI	0x18,4
    0ABD 0000      NOP
    0ABE 0000      NOP
    0ABF 0000      NOP
    0AC0 9508      RET
    0AC1 01F0      MOVW	R30,R0
    0AC2 E48F      LDI	R24,0x4F
    0AC3 E091      LDI	R25,1
    0AC4 0FE8      ADD	R30,R24
    0AC5 1FF9      ADC	R31,R25
    0AC6 9508      RET
    0AC7 91800081  LDS	R24,read_count
    0AC9 5F8F      SUBI	R24,0xFF
    0ACA 93800081  STS	read_count,R24
    0ACC 9508      RET
    0ACD E041      LDI	R20,1
    0ACE E050      LDI	R21,0
    0ACF E060      LDI	R22,0
    0AD0 E070      LDI	R23,0
    0AD1 9508      RET
    0AD2 1462      CP	R6,R2
    0AD3 0473      CPC	R7,R3
    0AD4 0484      CPC	R8,R4
    0AD5 0495      CPC	R9,R5
    0AD6 9508      RET
    0AD7 01FE      MOVW	R30,R28
    0AD8 8023      LDD	R2,Z+3
    0AD9 8034      LDD	R3,Z+4
    0ADA 8045      LDD	R4,Z+5
    0ADB 8056      LDD	R5,Z+6
    0ADC 01FE      MOVW	R30,R28
    0ADD 9508      RET
    0ADE 91800084  LDS	R24,input_err_count
    0AE0 5F8F      SUBI	R24,0xFF
    0AE1 93800084  STS	input_err_count,R24
    0AE3 9508      RET
    0AE4 E090      LDI	R25,0
    0AE5 8399      STD	Y+1,R25
    0AE6 8388      STD	Y+0,R24
    0AE7 E22C      LDI	R18,0x2C
    0AE8 E031      LDI	R19,1
    0AE9 9508      RET
    0AEA B382      IN	R24,0x12
    0AEB 7E8F      ANDI	R24,0xEF
    0AEC BB82      OUT	0x12,R24
    0AED E900      LDI	R16,0x90
    0AEE E011      LDI	R17,1
    0AEF 9508      RET
    0AF0 2433      CLR	R3
    0AF1 8239      STD	Y+1,R3
    0AF2 8228      STD	Y+0,R2
    0AF3 E021      LDI	R18,1
    0AF4 018E      MOVW	R16,R28
    0AF5 5F0D      SUBI	R16,0xFD
    0AF6 4F1F      SBCI	R17,0xFF
    0AF7 9508      RET
    0AF8 2D8E      MOV	R24,R14
    0AF9 2D9F      MOV	R25,R15
    0AFA 9701      SBIW	R24,1
    0AFB 2E28      MOV	R2,R24
    0AFC 2E39      MOV	R3,R25
    0AFD 2EE8      MOV	R14,R24
    0AFE 2EF9      MOV	R15,R25
    0AFF 9508      RET
    0B00 E586      LDI	R24,0x56
    0B01 E090      LDI	R25,0
    0B02 8399      STD	Y+1,R25
    0B03 8388      STD	Y+0,R24
    0B04 E926      LDI	R18,0x96
    0B05 E030      LDI	R19,0
    0B06 E001      LDI	R16,1
    0B07 9508      RET
    0B08 E091      LDI	R25,1
    0B09 0FE8      ADD	R30,R24
    0B0A 1FF9      ADC	R31,R25
    0B0B 8040      LDD	R4,Z+0
    0B0C 2DE2      MOV	R30,R2
    0B0D 2DF3      MOV	R31,R3
    0B0E 8240      STD	Z+0,R4
    0B0F 9508      RET
    0B10 B388      IN	R24,0x18
    0B11 7E8F      ANDI	R24,0xEF
    0B12 BB88      OUT	0x18,R24
    0B13 0000      NOP
    0B14 9508      RET
    0B15 2C2E      MOV	R2,R14
    0B16 2433      CLR	R3
    0B17 2D82      MOV	R24,R2
    0B18 5081      SUBI	R24,1
    0B19 2EE8      MOV	R14,R24
    0B1A 2022      TST	R2
    0B1B 9508      RET
    0B1C 9AC5      SBI	0x18,5
    0B1D B387      IN	R24,0x17
    0B1E 7D8F      ANDI	R24,0xDF
    0B1F BB87      OUT	0x17,R24
    0B20 9AC5      SBI	0x18,5
    0B21 9508      RET
    0B22 2422      CLR	R2
    0B23 2433      CLR	R3
    0B24 8231      STD	Z+1,R3
    0B25 8220      STD	Z+0,R2
    0B26 E084      LDI	R24,4
    0B27 9508      RET
    0B28 898E      LDD	R24,Y+22
    0B29 899F      LDD	R25,Y+23
    0B2A 9601      ADIW	R24,1
    0B2B 8B9F      STD	Y+23,R25
    0B2C 8B8E      STD	Y+22,R24
    0B2D 9508      RET
    0B2E E090      LDI	R25,0
    0B2F 93900080  STS	id_reader_flags+1,R25
    0B31 9380007F  STS	id_reader_flags,R24
    0B33 9508      RET
    0B34 9580      COM	R24
    0B35 9590      COM	R25
    0B36 5F8F      SUBI	R24,0xFF
    0B37 4F9F      SBCI	R25,0xFF
    0B38 9508      RET
    0B39 E58D      LDI	R24,0x5D
    0B3A E091      LDI	R25,1
    0B3B 2EC8      MOV	R12,R24
    0B3C 2ED9      MOV	R13,R25
    0B3D 9508      RET
    0B3E 2D2A      MOV	R18,R10
    0B3F 2D3B      MOV	R19,R11
    0B40 2D0C      MOV	R16,R12
    0B41 2D1D      MOV	R17,R13
    0B42 9508      RET
    0B43 2DEC      MOV	R30,R12
    0B44 2DFD      MOV	R31,R13
    0B45 8020      LDD	R2,Z+0
    0B46 2022      TST	R2
    0B47 9508      RET
    0B48 940E08C3  CALL	push_lset
    0B4A 940E087C  CALL	push_gset2
    0B4C 9508      RET
    0B4D 2F26      MOV	R18,R22
    0B4E 2F37      MOV	R19,R23
    0B4F 2D0A      MOV	R16,R10
    0B50 2D1B      MOV	R17,R11
    0B51 9508      RET
    0B52 1624      CP	R2,R20
    0B53 0635      CPC	R3,R21
    0B54 0646      CPC	R4,R22
    0B55 0657      CPC	R5,R23
    0B56 9508      RET
    0B57 8348      STD	Y+0,R20
    0B58 8359      STD	Y+1,R21
    0B59 836A      STD	Y+2,R22
    0B5A 837B      STD	Y+3,R23
    0B5B 9508      RET
    0B5C 2D2C      MOV	R18,R12
    0B5D 018E      MOVW	R16,R28
    0B5E 5F04      SUBI	R16,0xF4
    0B5F 4F1F      SBCI	R17,0xFF
    0B60 9508      RET
    0B61 2224      AND	R2,R20
    0B62 2235      AND	R3,R21
    0B63 2246      AND	R4,R22
    0B64 2257      AND	R5,R23
    0B65 9508      RET
    0B66 8020      LDD	R2,Z+0
    0B67 8031      LDD	R3,Z+1
    0B68 8639      STD	Y+9,R3
    0B69 8628      STD	Y+8,R2
    0B6A 9508      RET
    0B6B 9601      ADIW	R24,1
    0B6C 8399      STD	Y+1,R25
    0B6D 8388      STD	Y+0,R24
    0B6E E021      LDI	R18,1
    0B6F 9508      RET
    0B70 925A      ST	R5,-Y
    0B71 924A      ST	R4,-Y
    0B72 923A      ST	R3,-Y
    0B73 922A      ST	R2,-Y
    0B74 9508      RET
    0B75 9510      COM	R17
    0B76 9500      COM	R16
    0B77 5F0F      SUBI	R16,0xFF
    0B78 4F1F      SBCI	R17,0xFF
    0B79 9508      RET
    0B7A 933A      ST	R19,-Y
    0B7B 932A      ST	R18,-Y
    0B7C 931A      ST	R17,-Y
    0B7D 930A      ST	R16,-Y
    0B7E 9508      RET
